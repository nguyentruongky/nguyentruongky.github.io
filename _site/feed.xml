<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-03-30T11:17:33+07:00</updated><id>http://localhost:4000/</id><title type="html">Clean Blog</title><subtitle>My personal notes, codes, reviews, ideas</subtitle><author><name>Ky Nguyen</name></author><entry><title type="html">Different way to do multi languages in iOS</title><link href="http://localhost:4000/2018/03/29/different-way-i18n.html" rel="alternate" type="text/html" title="Different way to do multi languages in iOS" /><published>2018-03-29T00:00:00+07:00</published><updated>2018-03-29T00:00:00+07:00</updated><id>http://localhost:4000/2018/03/29/different-way-i18n</id><content type="html" xml:base="http://localhost:4000/2018/03/29/different-way-i18n.html">&lt;p&gt;Google about multi languages in iOS, I find some step-by-step tuts to do multi languages. That’s a good way, I did that 2 years ago. It shows me to use string files for multi languages.&lt;/p&gt;

&lt;p&gt;This note I want to take note about another way I found in my recent projects. I use plist files to save languages. Do it now.&lt;/p&gt;

&lt;h3 id=&quot;steps&quot;&gt;Steps&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;New project. Design UI like this, connect outlets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fi18n_demo.png?alt=media&amp;amp;token=f1ee2869-5c17-4401-ab2a-124be93b4d7f&quot; width=&quot;350px&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Add 2 plist files, named Lang_en.plist, Lang_vi.plist&lt;/li&gt;
  &lt;li&gt;Add some codes for localization.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class knI18n {
    static let shared = knI18n()
    
    private let knCurrentLanguageKey = &quot;knCurrentLanguageKey&quot;
    private let fileNameBase = &quot;Lang_&quot;
    lazy var localizableDictionary: NSDictionary! = self.getLanguageFile()
    func getLanguageFile() -&amp;gt; NSDictionary {
        let language = currentLanguage ?? &quot;en&quot;
        if let path = Bundle.main.path(forResource: fileNameBase + language, ofType: &quot;plist&quot;) {
            return NSDictionary(contentsOfFile: path)!
        }
        fatalError(&quot;Localizable file NOT found&quot;)
    }
    
    func localize(string: String) -&amp;gt; String {
        guard let localizedString = localizableDictionary.value(forKeyPath: string) as? String else { return string }
        return localizedString
    }
    
    func setLanguage(_ language: String) {
        currentLanguage = language
        localizableDictionary = getLanguageFile()
    }
    
    private var currentLanguage: String? {
        get { return UserDefaults.standard.value(forKeyPath: knCurrentLanguageKey) as? String }
        set { UserDefaults.standard.setValue(newValue, forKeyPath: knCurrentLanguageKey) }
    }
}

extension String {
    var i18n: String {
        return knI18n.shared.localize(string: self)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hope code clean enough to understand. The main idea is to load the plist file into a dictionary and get the value for key I want to change language.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add some code into controller&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@objc func handleChangeToEn() {
    knI18n.shared.setLanguage(&quot;en&quot;)
    refreshUI()
}

@objc func handleChangeToVi() {
    knI18n.shared.setLanguage(&quot;vi&quot;)
    refreshUI()
}

func refreshUI() {
    languageLabel.text = &quot;lang&quot;.i18n
    helloLabel.text = &quot;hello&quot;.i18n
    vietnameseButton.setTitle(&quot;change_vi&quot;.i18n, for: .normal)
    englishButton.setTitle(&quot;change_en&quot;.i18n, for: .normal)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Run the app, and try.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Ffinish_demo_i18n.gif?alt=media&amp;amp;token=cfc52b0b-7b74-4195-b9b9-f8b4e6c76461&quot; width=&quot;320px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-advantages-in-this-way&quot;&gt;What is the advantages in this way?&lt;/h3&gt;

&lt;p&gt;First, I can easily add new text, without worries about key duplication. XCode will tell key exists, and I never to face to error on key duplication.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fkey_exist.png?alt=media&amp;amp;token=937931c6-4480-4891-8f57-8fdb98d0db45&quot; width=&quot;350&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Second, no need to worry about &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; and the end of text. Once, I missed a &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; and faced to error, took me much time to fix. XCode was not kind enough to tell me this problem 2 years ago.&lt;/p&gt;

&lt;p&gt;Third, very easy to add new languages, just new plist files with name start with &lt;code class=&quot;highlighter-rouge&quot;&gt;Lang_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Minor note: XCode can be very slow anytime, so, I like to shorten the name to &lt;code class=&quot;highlighter-rouge&quot;&gt;i18n&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;knI18n&lt;/code&gt; to easier to type without suggestion.&lt;/p&gt;

&lt;h3 id=&quot;but-still-have-disadvantages-in-this-way&quot;&gt;But still have disadvantages in this way&lt;/h3&gt;

&lt;p&gt;I can’t send these plist files to translator, difficult for them to open and do their work. These attached files can help.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GenerateText&lt;/code&gt; is used to export text from language file to text, then I can easily send to translators.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GeneratePlist&lt;/code&gt; is used to convert translated text file to plist. And can import directly to project.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;How to use?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Put &lt;code class=&quot;highlighter-rouge&quot;&gt;GenerateText&lt;/code&gt; app in the same place with plist file, run Terminal at that folder, type &lt;code class=&quot;highlighter-rouge&quot;&gt;./GenerateText&lt;/code&gt;. New file text is generated and ready to send to translators.&lt;/p&gt;

&lt;p&gt;Put translated file in the same folder with &lt;code class=&quot;highlighter-rouge&quot;&gt;GeneratePlist&lt;/code&gt; app, type &lt;code class=&quot;highlighter-rouge&quot;&gt;./GeneratePlist&lt;/code&gt; in Terminal to generate new plist file.&lt;/p&gt;

&lt;p&gt;My app can backup your plist file before generate new one. But should backup manual will be more secure.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Hope this solution can help iOS developer work with i18n easier. Download project at &lt;a href=&quot;https://github.com/nguyentruongky/i18n_Demo&quot;&gt;https://github.com/nguyentruongky/i18n_Demo&lt;/a&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Google about multi languages in iOS, I find some step-by-step tuts to do multi languages. That’s a good way, I did that 2 years ago. It shows me to use string files for multi languages.</summary></entry><entry><title type="html">Make the Most of Your 24 Hours</title><link href="http://localhost:4000/2017/04/28/most-of-24-hours.html" rel="alternate" type="text/html" title="Make the Most of Your 24 Hours" /><published>2017-04-28T00:00:00+07:00</published><updated>2017-04-28T00:00:00+07:00</updated><id>http://localhost:4000/2017/04/28/most-of-24-hours</id><content type="html" xml:base="http://localhost:4000/2017/04/28/most-of-24-hours.html">&lt;h2 id=&quot;bitter-experience&quot;&gt;Bitter Experience&lt;/h2&gt;
&lt;p&gt;I started iOS as a 2-year-experience .NET developer. The salary range for a junior iOS dev is a little bit lower than the amount for a 2-year-experience develop get. I wanted to make myself stronger, earn more experience. I had a misconception of working and learning. I thought, freelance projects will help me strengthen my knowledge and experience. So I tried to get as more as possible freelance projects. And my nightmare started from here.&lt;/p&gt;

&lt;p&gt;I had no time to spend with my family, no time to work on personal improvement, no time to go out with friends, no time at all. All of my time was used up on my freelance work from coding new features, fixing bugs and much more. I was killing myself working odd hours and missing out on quality time with my family and friends.&lt;/p&gt;

&lt;p&gt;I made a mess, uncountable technical debts, bugs, with the project. I was angry with everyone and myself. And the company project was affected. I brought more bugs there, dozens of stupid bugs, critical bugs.&lt;/p&gt;

&lt;p&gt;Finally, after lots of stress situations, I found a way to get myself out of these nightmares.&lt;/p&gt;

&lt;h2 id=&quot;why-necessary-for-you&quot;&gt;Why necessary for you?&lt;/h2&gt;
&lt;p&gt;You’re developer, and you understand clearly about the pressure in development. I’m sure you want to get some freelance projects to earn more money. So, you should try my solution to manage your time effectively.&lt;/p&gt;

&lt;p&gt;You’re developer, and you have to work OT. Too many tasks you have and you have no enough time for work. No time for family, no time for your life, no time at all. My solution can help you get out of your situation.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;This solution is about how to change the way I work, how to manage time effectively. It’s absolutely right for me, and helps me out of the shit situations, boost my career, make my life better. Is it good to try yourself?&lt;/p&gt;

&lt;p&gt;This solution has 2 parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Life skills: something you need to change in your life, how you work, how you enjoy your life…&lt;/li&gt;
  &lt;li&gt;Tech skills: 4 tips for iOS developers to work faster, better, and save time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;life-skills---switch-up-working-hours&quot;&gt;Life Skills - Switch Up Working Hours&lt;/h3&gt;

&lt;p&gt;You have to spend at least 8 hours a day for working at your office. The manager says, “We have no time, we have to work OT”. Yes, it’s a extremely bad solution. Your brain, your body is drained. And now, you force it work more hard. Do you really think you can work effectively after 8 hours working? No, you don’t. You know, your colleagues know, but the manager doesn’t know.&lt;/p&gt;

&lt;p&gt;It’s too hard to decline working OT, but you should do. You have to do unless you make more bugs and everything is worse.&lt;/p&gt;

&lt;p&gt;One time, I had to work until 8.30 pm, without dinner, just some instance noodle. Went home, went to bed and 11.30pm, got a call.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“What the hell are you doing? Something is wrong with the promotion”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OK, turned my Macbook on and worked like a dead guy.&lt;/p&gt;

&lt;p&gt;Many times like that, and the project had shit quality. I can’t believe I can do but, but I did, no choice.&lt;/p&gt;

&lt;h4 id=&quot;what-is-the-better-solution&quot;&gt;What is the better solution?&lt;/h4&gt;

&lt;p&gt;The firs thing in my solution, is to switch up working hours. I decline all OT and try to work better, work more in my ideal time to finish more tasks or fix more bugs.&lt;/p&gt;

&lt;p&gt;The ideal time for working, for me, is 2am after 3 to 4 hours of sleeping, maybe different from you. This time is ideal because everything is quiet and there are absolutely no distractions. No phone calls, no email, no one bothers you. For me, this is the best time to get my creative juices flowing.&lt;/p&gt;

&lt;p&gt;It’s exactly same to freelance projects. You can achieve better results than work after office time.&lt;/p&gt;

&lt;p&gt;It’s hard to start at all, but try it yourself and experience amazing results.&lt;/p&gt;

&lt;h3 id=&quot;life-skills---keep-up-health&quot;&gt;Life Skills - Keep Up Health&lt;/h3&gt;

&lt;p&gt;Most importantly, a healthy body is the key to reach success. I have to work 8 hours everyday in an office and an additional 4-6 hours on freelance projects. If you do the math, my body has to work 1.5 times more than usual. Crazy, right? For most people, their body and mind will become exhausted very quickly with a schedule like this. In order for me to prevent myself from becoming ill, I make a conscious effort to include additional nutrition in my meals with more fruits, protein, etc.&lt;/p&gt;

&lt;p&gt;In additional to a healthy diet, it’s important to stay active.I try to incorporate a little bit of exercise into my daily activities. For example, I use the stairs instead of the elevator, I try to walk faster, clean the floor manually, and more. Now, I know these types of activities won’t help me become an athlete, but every little bit helps to keep my health up.&lt;/p&gt;

&lt;p&gt;You can make more evil bugs when you’re not healthy. And you waste double time to fix what you did when you’re not healthy. So, keep up your health and make good things for your code.&lt;/p&gt;

&lt;h3 id=&quot;life-skills---change-your-mindset&quot;&gt;Life Skills - Change Your Mindset&lt;/h3&gt;

&lt;p&gt;Freelance projects are very good for expanding your experience. You have many projects to fill into your CV. You can earn more money. It’s great. But they’re not good to your knowledge. Freelance projects are useful when you have strong experience and want to strengthen them. But it’s a bad choice for learning because of pressure.&lt;/p&gt;

&lt;p&gt;When you’re in a freelance projects, you have many pressure about time limit, money, client attitude… And you just want to make it done, not want to understand how it work and how to make it better. It’s harmful for you. You think you have experience with it, CoreData for instance, and you apply for new projects with CoreData require. You run into a big bugs and take lots of time to understand to fix that.&lt;/p&gt;

&lt;p&gt;Side projects are better choice. You can research new technologies, try new hot things in new iOS, SiriKit, HealthKit for instance. Don’t forget to publish some side projects. They can help you to show off for your clients or your interviewer.&lt;/p&gt;

&lt;p&gt;You also practice or strengthen your weakness in iOS with side projects. With these projects, you learn a lot and be confident to apply new projects.&lt;/p&gt;

&lt;p&gt;Don’t think about money first, think about yourself, Make yourself better and money comes.&lt;/p&gt;

&lt;h3 id=&quot;tech-skills---code-snippets&quot;&gt;Tech skills - Code Snippets&lt;/h3&gt;

&lt;p&gt;Code Snippets is your template codes. You don’t want to type all the code or copy it from somewhere. Just type some first characters and select it from suggestion list. For instance, I usually type “button”, and XCode will give me this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nguyentruongky/Photos_storage/master/save_coding_time_ios/Button_Snippet.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Easy, right? You don’t want to type boring code anymore.&lt;/p&gt;

&lt;p&gt;Don’t forget use &amp;lt;# and #&amp;gt; with the placeholder text in the middle. Go ahead—try typing that into Xcode, and watch as the text between the octothorp tags magically transforms right in front of your eyes.&lt;/p&gt;

&lt;p&gt;You can try my snippets at &lt;a href=&quot;https://github.com/nguyentruongky/iOS_snippets&quot;&gt;&lt;/a&gt; by copy and paste to &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/Developer/Xcode/UserData/CodeSnippets/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Small things but very useful.&lt;/p&gt;

&lt;h3 id=&quot;tech-skills---knowledge-base&quot;&gt;Tech skills - Knowledge base&lt;/h3&gt;

&lt;p&gt;It works like an external library, nearly same to Pods but in free way.&lt;/p&gt;

&lt;p&gt;Situation like this. You finished a cool animation in company project. It’s really cool and you want to use it in your current freelance project. You copy this code to the freelance project, change something and let it work like a charm. But, you find something can be better in this code. You make changes, and want this change be applied in the company project. You copy this code again. Imagine you have more 2 projects, use this animation. It’s a nightmare.&lt;/p&gt;

&lt;p&gt;Knowledge base is good choice for you. Create your own knowledge base in Github, clone to your projects. Add new features, change some if needed. Push to Github and pull it from other projects. All your projects can get the latest update easily. Cool, right?&lt;/p&gt;

&lt;h4 id=&quot;some-notices-you-should-know&quot;&gt;Some notices you should know&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Clone your knowledge base to every project to avoid some unpredictable situations. Some changes in this project can make consequence to others projects, and it takes you lots of time to find out the cause.&lt;/li&gt;
  &lt;li&gt;Add your knowledge base to .gitignore. Without this step, you will commit your changes into Github with an unrelated commit message. Or you can make some unexpected commit and your knowledge base become a mess.&lt;/li&gt;
  &lt;li&gt;Run test for your code and make sure it works good before commit.&lt;/li&gt;
  &lt;li&gt;Should use &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;to manage your base.
    &lt;h4 id=&quot;why-dont-i-create-a-pods&quot;&gt;Why don’t I create a Pods?&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because CocoaPods need to release on Github. But these pieces of code change continuously, new code, new update, remove redundant code.&lt;/p&gt;

&lt;h3 id=&quot;tech-skills---auto-layout-programmatically&quot;&gt;Tech skills - Auto Layout programmatically&lt;/h3&gt;
&lt;p&gt;This is a popular war for many iOS developers. Storyboard fans think this is stupid thing. Programmatically guys fight for their belief.&lt;/p&gt;

&lt;p&gt;This is opinion from a developer can’t live without Storyboard, and now he abandons it. It’s me :)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Auto Layout programmatically saves your time and your life.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;how-can-it-help-to-save-time&quot;&gt;How can it help to save time?&lt;/h4&gt;

&lt;p&gt;My situation is a good example. I designed a very good UI, and connected outlet, started logic coding, finished that feature. One day, I had to refactor code and found some improvement. Some &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; had gestures, should be changed to &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;. No problem, made changes. What did I do?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Find the &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; need change&lt;/li&gt;
  &lt;li&gt;Delete one by one.&lt;/li&gt;
  &lt;li&gt;Add new &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Connect new outlets&lt;/li&gt;
  &lt;li&gt;Setup Auto Layout constraints. (This is most painful step, dozens of constraints need setup)&lt;/li&gt;
  &lt;li&gt;Find and change many things in code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And when I changed to Auto Layout programmatically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Find the &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; need change&lt;/li&gt;
  &lt;li&gt;Change &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Find and change many things in code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Easier a lot, right? Especially, no change in setting up constraints.&lt;/p&gt;

&lt;p&gt;Another advantage is to customize controls with Auto Layout programmatically. You can make any custom controls with programmatically, but you can’t do that with Storyboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nguyentruongky/Photos_storage/master/Auto_Layout_Programmatically/Custom_Control.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you use Storyboard (I mean Xib file), you can make a view, and copy 2 files, &lt;code class=&quot;highlighter-rouge&quot;&gt;NewTextField.xib&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;NewTextField.swift&lt;/code&gt;to your knowledge base. And you want to change it name to &lt;code class=&quot;highlighter-rouge&quot;&gt;MyAwesomeTextField&lt;/code&gt;, you have to change 4 times, the 2 files’ name, class’ name, and the subclass’ name in xib. Never happen in Programmatically.&lt;/p&gt;

&lt;h4 id=&quot;some-libraries-you-can-try&quot;&gt;Some libraries you can try&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/SnapKit/SnapKit&quot;&gt;SnapKit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/freshOS/Stevia&quot;&gt;Stevia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/roberthein/TinyConstraints&quot;&gt;TinyConstraints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And my favorite library is &lt;a href=&quot;https://github.com/nguyentruongky/knConstraints&quot;&gt;knConstraints&lt;/a&gt;, a project learned style from TinyConstraints, developed with a new syntax and more advantages.&lt;/p&gt;

&lt;h3 id=&quot;tech-skills---vip-architecture&quot;&gt;Tech skills - VIP architecture&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fclean_swift.png?alt=media&amp;amp;token=ba4d79bc-9ea2-49f7-af54-c8def001c631&quot; /&gt;&lt;/p&gt;

&lt;p&gt;VIP Architecture is a complex topic. You should view the talk about it at https://github.com/swift-vietnam/iOS-Awesome-Starter-Kit&lt;/p&gt;

&lt;p&gt;In my post, I only talk about how to use it quickly.&lt;/p&gt;

&lt;p&gt;My example code shows you how to select a photo for profile image. You can do it easily in another way. But in this way, you can easier manage your code and reuse it anywhere.&lt;/p&gt;

&lt;p&gt;Move on step by step&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In your controller, define new variable &lt;code class=&quot;highlighter-rouge&quot;&gt;var output : SampleControllerOutput?&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;New file and add below code:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// (1) - Define actions controller needs in protocol SampleControllerOutput

protocol SampleControllerOutput: class {
    /* action from controller */
    func getProfile()
}

// (2) - Define actions to respond to result in protocol 'SampleInteractorOutput'. For instance: requestSuccess, updateView...

protocol SampleInteractorOutput: class {
    func getProfileSuccess(profile: UserProfile)        
    func getProfileFail(err: Error)
}

// (3) - Conform actions from 'SampleControllerOutput' in 'extension SampleInteractor'

extension SampleInteractor: SampleControllerOutput {
    func getProfile() {
        GGetProfileWorker(id: id,
                         successResponse: output?.fetchProfileSuccess,
                         failResponse: output?.fetchProfileFail)
            .execute()
    }
}

// (4) - Conform actions from 'SampleInteractorOutput'

extension SamplePresenter: SampleInteractorOutput {
    func getProfileFail(err: Error) {
        output?.showGetProfileFailError(err: err)
    }
    func getProfileSuccess(profile: UserProfile) {
        output?.showUserProfile(profile: profile)
    }
}

// (5) - Define actions to update directly to UI to 'SamplePresenterOutput'

protocol SamplePresenterOutput: class {
    func showUserProfile(profile: UserProfile)
    func showGetProfileFailError(err: Error)
}

// (6) - Update UI

extension SampleController: SamplePresenterOutput {
    func showGetProfileFailError(err: Error) { }
    
    func showUserProfile(profile: UserProfile) {
        // update view
    }
}

/* (7) - It's set up. Don't need to care about it. */

class SampleInteractor {
    var output: SampleInteractorOutput?
}

class SamplePresenter {
    weak var output: SamplePresenterOutput?
}

//MARK: Configuration
class SampleConfiguration /* called in viewDidLoad */ {
    static let shared = SampleConfiguration()
    func configure(viewController: SampleController) {
        
        // Presenter
        let presenter = SamplePresenter()
        presenter.output = viewController
        
        // Interactor
        let interactor = SampleInteractor()
        interactor.output = presenter
        
        // View controller
        viewController.output = interactor
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(1) - You define actions your controller need to do. For example: getProfile, updateProfile, viewDetail…&lt;/p&gt;

&lt;p&gt;(2) - Define what happen when the actions from controller finish. For example: getProfileSuccess, getProfileFail…&lt;/p&gt;

&lt;p&gt;(3) - This is the execute space. Conform the actions you defined for controller before, and let worker execute the action.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How does the worker look like?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct GetUserProfile {
    private let api = &quot;/workshops/&quot;
    var id: Int
    var successResponse: ((_ something: UserProfile) -&amp;gt; Void)? = nil
    var failResponse: ((_ error: Error) -&amp;gt; Void)? = nil
    func execute() {
        // connect to server
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(4) - Response to result will be here. You should change the model data to new data, which can easily set to your view. For example, change Date to String, so that you just set to your view, no need to convert Date to String in your controller.&lt;/p&gt;

&lt;p&gt;(5), (6) - Actions to update to controller.&lt;/p&gt;

&lt;p&gt;(7) - These code is ready to use. It’s always same for other controllers. You just need to change the prefix name, &lt;code class=&quot;highlighter-rouge&quot;&gt;Sample&lt;/code&gt; to your feature name.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How to use?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In your controller, &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt;, call &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleConfiguration.shared.config&lt;/code&gt;. And call &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt; to do your actions.&lt;/p&gt;

&lt;p&gt;This solution saves much time for me. I hope it can help you. Save time, work better and enjoy your life.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Bitter Experience I started iOS as a 2-year-experience .NET developer. The salary range for a junior iOS dev is a little bit lower than the amount for a 2-year-experience develop get. I wanted to make myself stronger, earn more experience. I had a misconception of working and learning. I thought, freelance projects will help me strengthen my knowledge and experience. So I tried to get as more as possible freelance projects. And my nightmare started from here.</summary></entry><entry><title type="html">Auto Layout with Storyboard and Programmatically</title><link href="http://localhost:4000/2017/04/25/auto-layout.html" rel="alternate" type="text/html" title="Auto Layout with Storyboard and Programmatically" /><published>2017-04-25T00:00:00+07:00</published><updated>2017-04-25T00:00:00+07:00</updated><id>http://localhost:4000/2017/04/25/auto-layout</id><content type="html" xml:base="http://localhost:4000/2017/04/25/auto-layout.html">&lt;p&gt;I started iOS development as a .NET developer. My first impression, Storyboard is really really interesting. 80% UI of my apps is built in Storyboard. I can’t imagine how I can develop iOS without Storyboard.&lt;/p&gt;

&lt;p&gt;There are many discussions about Auto Layout with Storyboard or Programmatically is better. But no one wins. Everyone has own reason and belief.&lt;/p&gt;

&lt;p&gt;This post is my personal opinion. It’s written by a developer can’t live without Storyboard, and now he abandons it.&lt;/p&gt;

&lt;p&gt;3 reasons why he changed to Auto Layout by programmatically.&lt;/p&gt;

&lt;h2 id=&quot;why-do-i-abandon-storyboard&quot;&gt;Why do I abandon Storyboard?&lt;/h2&gt;

&lt;h3 id=&quot;1-too-many-steps-to-changes&quot;&gt;1. Too many steps to changes&lt;/h3&gt;
&lt;p&gt;I designed a very good UI, and connected outlet, started logic coding, finished that feature. One day, I had to refactor code and found some improvement. Some &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; had gestures, should be changed to &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;. No problem, made changes. What did I do?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Found the &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; need change&lt;/li&gt;
    &lt;li&gt;Delete one by one.&lt;/li&gt;
    &lt;li&gt;Add new &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Connect new outlets&lt;/li&gt;
    &lt;li&gt;Setup Auto Layout constraints. (This is most painful step, dozens of constraints need setup)&lt;/li&gt;
    &lt;li&gt;Find and change many things in code&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;And when I changed to Auto Layout programmatically:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Found the &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; need change&lt;/li&gt;
    &lt;li&gt;Change &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Find and change many things in code&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Easier a lot, right? Especially, no change in setting up constraints.&lt;/p&gt;

&lt;h3 id=&quot;2-open-storyboard-is-a-pain-in-the-ass&quot;&gt;2. Open Storyboard is a pain in the ass&lt;/h3&gt;
&lt;p&gt;My first project had a huge Storyboard, all-in-one. More than &lt;strong&gt;30 Controllers&lt;/strong&gt; were in &lt;strong&gt;1 Storyboard file&lt;/strong&gt;. It’s a nightmare. Anytime I opened it, change the &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;’s textColor, and committed. 99% had conflicts. Fix conflicts in XML is another nightmare.&lt;/p&gt;

&lt;p&gt;Thanks God, some experienced developers tell about split it up. A Storyboard should contain 3 to 5 Controllers, not more. It should be splitted up as features, for instance, &lt;code class=&quot;highlighter-rouge&quot;&gt;Membership&lt;/code&gt; Storyboard contains &lt;code class=&quot;highlighter-rouge&quot;&gt;Landing&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Register&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Login&lt;/code&gt; Controllers, or &lt;code class=&quot;highlighter-rouge&quot;&gt;Password&lt;/code&gt; Controller contains &lt;code class=&quot;highlighter-rouge&quot;&gt;ForgotPassword&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Confirmation&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NewPassword&lt;/code&gt; Controllers. It’s a big improvement and save a lot of iOS developer’s lives.&lt;/p&gt;

&lt;p&gt;It’s better but not the best choice. Conflicts usually occur with Storyboard, and can’t avoid. 
Besides that, constraints list is a mess, really mess and easy to make you mad.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nguyentruongky/Photos_storage/master/Auto_Layout_Programmatically/Constraint_list.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can debate about select a control, and select the constraint you want instead of find in the list. Believe me, many times you can’t do that, and we soon get mad with it.&lt;/p&gt;

&lt;h3 id=&quot;3-dynamically-customize-control-with-auto-layout-programmatically&quot;&gt;3. Dynamically customize control with Auto Layout programmatically&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nguyentruongky/Photos_storage/master/Auto_Layout_Programmatically/Custom_Control.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What would you do with this control in Storyboard? You can make a custom view with 1 &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; for title, 1 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextField&lt;/code&gt; for text input, and 1 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; for underline, 1 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt; for right button.&lt;/p&gt;

&lt;p&gt;How to use it? Drag a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; to Storyboard, choose subclass. Remember, it’s a UIView. You have to access to the view instance, textField and change the properties.&lt;/p&gt;

&lt;p&gt;But with Auto Layout programmatically, it’s a  &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextField&lt;/code&gt;. You can change textColor,  font,  backgroundColor easily. Again, It’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextField&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can see how I implement this custom &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextField&lt;/code&gt; at &lt;a href=&quot;https://github.com/nguyentruongky/knCollection/blob/develop/knCollection/Control/knGistTextField.swift&quot;&gt;knGistTextField&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;reasons-prevent-you-from-using-auto-layout-programmatically&quot;&gt;Reasons prevent you from using Auto Layout programmatically&lt;/h2&gt;

&lt;h3 id=&quot;too-many-code-in-a-file&quot;&gt;Too many code in a file&lt;/h3&gt;

&lt;p&gt;Yes, I have to admit that. There are 600 - 700 lines of code in my file. But it’s easy to solve this problem with &lt;strong&gt;Extension&lt;/strong&gt;. 
Why don’t we define and setup constraints in the main file, (&lt;code class=&quot;highlighter-rouge&quot;&gt;LoginController.swift&lt;/code&gt;, for instance), and move all handler, logic into new file, &lt;code class=&quot;highlighter-rouge&quot;&gt;LoginControllerHandler.swift&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;write-the-same-codes-many-times&quot;&gt;Write the same codes many times&lt;/h3&gt;

&lt;p&gt;Define a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt; with Auto Layout programmatically&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let button: UIButton = {
    let title = &quot;Sample&quot;
    let image = &quot;Sample&quot;
    let color = UIColor.black
    
    let button = UIButton()
    button.translatesAutoresizingMaskIntoConstraints = false
    button.setTitle(title, for: .normal)
    button.setTitleColor(color, for: .normal)
    button.setImage(UIImage(named: image), for: .normal)
    return button
}()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Every time I need a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;, do I have to find and copy this code? No, code snippet can help you.&lt;/p&gt;

&lt;p&gt;Find out how it helps &lt;a href=&quot;http://nshipster.com/xcode-snippets/&quot;&gt;here&lt;/a&gt;.
I define above button with &lt;code class=&quot;highlighter-rouge&quot;&gt;knButton&lt;/code&gt; key in my XCode. It’s easier that find and drag a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt; and then format it in Storyboard, right?&lt;/p&gt;

&lt;h3 id=&quot;code-is-too-long-and-unreadable&quot;&gt;Code is too long and unreadable&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// (1): can't change anything 
let underline = UIView()
underline.translatesAutoresizingMaskIntoConstraints = false
addSubview(underline)

// (2): Constraints setup
underline.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -8).isActive = true
underline.rightAnchor.constraint(equalTo: rightAnchor).isActive = true
underline.leftAnchor.constraint(equalTo: leftAnchor).isActive = true
underline.heightAnchor.constraint(equalToConstant: 1).isActive = true

// Format control
underline.backgroundColor = UIColor.lightGray
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The (1) is same to all controls in Auto Layout programmatically, you have to keep this format for all controls. You can make it better with this code (if you want)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension UIView {
    func addToView(view: UIView) {
        translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(self)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1) can be changed to&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let underline = UIView()
underline.addToView(view)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The (2), they’re default code from Apple, why don’t we make it more readable and beautiful?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;underline.bottom(toView: view, space: -8)
underline.horizontal(toView: view)
underline.height(1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is it beautiful enough? It comes from my own Auto Layout library. You can find it at &lt;a href=&quot;https://github.com/nguyentruongky/knConstraints&quot;&gt;https://github.com/nguyentruongky/knConstraints&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-can-i-do-with-auto-layout-programmatically&quot;&gt;What can I do with Auto Layout programmatically?&lt;/h2&gt;

&lt;p&gt;If you wan to try a life without Storyboard, why don’t you try these following instructions?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Setup your own code snippets&lt;/li&gt;
  &lt;li&gt;Try my Auto Layout library &lt;a href=&quot;https://github.com/nguyentruongky/knConstraints&quot;&gt;&lt;strong&gt;knConstraints&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Develop some simple custom views, with Auto Layout programmatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-can-i-help&quot;&gt;How can I help?&lt;/h2&gt;

&lt;p&gt;Please feel free to touch to me by leaving comments below or Skype: nguyentruongky3390.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">I started iOS development as a .NET developer. My first impression, Storyboard is really really interesting. 80% UI of my apps is built in Storyboard. I can’t imagine how I can develop iOS without Storyboard.</summary></entry><entry><title type="html">Use UITableViewController to solve very long screen</title><link href="http://localhost:4000/2017/04/18/long-screen.html" rel="alternate" type="text/html" title="Use UITableViewController to solve very long screen" /><published>2017-04-18T00:00:00+07:00</published><updated>2017-04-18T00:00:00+07:00</updated><id>http://localhost:4000/2017/04/18/long-screen</id><content type="html" xml:base="http://localhost:4000/2017/04/18/long-screen.html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nguyentruongky/Photos_storage/master/UITableViewController_static/Long_screen.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Do you have any solutions for long long screen like this? I’m sure have. This kind of screen is very popular in item detail (e-commercial app), room view (booking app)… I have to implement this screen in my class detail from an education app. This is how I did that.&lt;/p&gt;

&lt;h2 id=&quot;my-problem&quot;&gt;My problem&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;The screen is too long, and too many controls are in every section.&lt;/li&gt;
  &lt;li&gt;Some sections can be missing, for instance, promotion code section is only available for specially class.&lt;/li&gt;
  &lt;li&gt;Some sections contain very complex controls, for instance, UICollectionView the editor’s picks in the above photo.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;First I thought about the UIStackView. It can hide or show view easily. But hard to control the section’s size and have to manage scrolling.&lt;/p&gt;

&lt;p&gt;I find my best solution, UITableViewController, static UITableView.&lt;/p&gt;

&lt;h2 id=&quot;the-idea&quot;&gt;The idea&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A section is a cell in the TableView.&lt;/li&gt;
  &lt;li&gt;I make some custom views for complex section, like an embedded UICollectionView.&lt;/li&gt;
  &lt;li&gt;Other simple sections, like Summary, Promotion, Shipping can be define controls inside the controller.&lt;/li&gt;
  &lt;li&gt;Develop some functions to dynamically generate cells. Don’t define variables for cells.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sample-code&quot;&gt;Sample code&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func makeAvailibilityCell() -&amp;gt; knTableCell {
    let cell = knTableCell()

    let containerView = UIView()
    containerView.translatesAutoresizingMaskIntoConstraints = false
    cell.addSubview(containerView)
    containerView.fill(toView: cell)
    
    let titleLabel = makeHeaderLabel(text: &quot;availability&quot;.classLocalized) // (1)
    
    let seeButton = ogeSupporter.createGradientBorderButton() // (2)
    seeButton.setTitle(&quot;seeAvailability&quot;.classLocalized, for: .normal)
    
    containerView.addSubview(titleLabel)
    containerView.addSubview(availabilityLabel) // (3)
    containerView.addSubview(seeButton)
    
    // (4)
    seeButton.width(160)
    seeButton.right(toView: containerView, space: -30)
    seeButton.centerY(toView: titleLabel)
    
    titleLabel.left(toView: containerView, space: 30)
    titleLabel.width(screenWidth - 60)
    
    availabilityLabel.horizontal(toView: titleLabel)
    
    containerView.addConstraints(withFormat: &quot;V:|-15-[v0]-10-[v1]|&quot;,
                                 views: titleLabel, availabilityLabel)
    
    return cell
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1) (2) - Just define a label/button. Nothing is important here. These controls are not changed text/UI, should be defined inside the functions to reduce the number of reference controls in the controllers&lt;/p&gt;

&lt;p&gt;(3) - This is the content of this section. Data changes up to different items. I need to keep this reference to update data when request completed.&lt;/p&gt;

&lt;p&gt;(4) - Set up the UI with auto layout.&lt;/p&gt;

&lt;p&gt;**Important: ** The space between 2 sections should be define on 1 cell. Look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;Promotion code&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Is that a gift?&lt;/code&gt; in the photo. The padding between them should belong to &lt;code class=&quot;highlighter-rouge&quot;&gt;Is that a gift?&lt;/code&gt; cell.&lt;/p&gt;

&lt;p&gt;It means, the &lt;code class=&quot;highlighter-rouge&quot;&gt;bottomAnchor&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Apply button&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;Promotion code&lt;/code&gt; to the cell is 0. And the &lt;code class=&quot;highlighter-rouge&quot;&gt;topAnchor&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Is that a gift? label&lt;/code&gt; is about 54. It’s very useful in missing section. The space among sections still are good enough.&lt;/p&gt;

&lt;h4 id=&quot;how-to-use&quot;&gt;How to use&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cells.append(makeAboutSellerCell()) 
cells.append(makeAddressCell())
         
if promotion.isAvailable == true {
     cells.append(makePromotionCell())
}
tableView.reloadTable()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It’s easy, right? It saves much time for me. If designer wants to change anything, go to exactly make cell function, change the UI.&lt;/p&gt;

&lt;p&gt;Enjoy coding.&lt;/p&gt;

&lt;p&gt;I use my auto layout library in this project. You can find it here: &lt;a href=&quot;https://github.com/nguyentruongky/knConstraints&quot;&gt;https://github.com/nguyentruongky/knConstraints&lt;/a&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html"></summary></entry><entry><title type="html">How to draw a gradient border button?</title><link href="http://localhost:4000/2017/04/13/gradient-border-button.html" rel="alternate" type="text/html" title="How to draw a gradient border button?" /><published>2017-04-13T00:00:00+07:00</published><updated>2017-04-13T00:00:00+07:00</updated><id>http://localhost:4000/2017/04/13/gradient-border-button</id><content type="html" xml:base="http://localhost:4000/2017/04/13/gradient-border-button.html">&lt;h2 id=&quot;my-problem&quot;&gt;My Problem&lt;/h2&gt;

&lt;p&gt;Last week, my partner showed me his design for our application. Everything is great, easily implemented with some custom controls. But wait, something is not in my knowledge.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/nguyentruongky/89020a5f495420b260952f2ff19c4147/raw/df4fc4447088c33ed934e8f4fb56cdc6da1b6a55/res_Gradient_border_button.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A button with gradient border. Never try it before. Up to now, I just created gradient background views 2 times in previous projects. Googled and found some good results.&lt;/p&gt;

&lt;h2 id=&quot;other-solutions&quot;&gt;Other solutions&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let button = UIButton(frame: CGRect(x: 100, y: 100, width: 200, height: 100))
let gradient = CAGradientLayer()
gradient.frame =  CGRect(origin: .zero, size: button.frame.size)
gradient.colors = [UIColor.blue.cgColor, UIColor.green.cgColor]
let shape = CAShapeLayer()
shape.lineWidth = 2
shape.path = UIBezierPath(rect: button.bounds).cgPath
shape.strokeColor = UIColor.black.cgColor
shape.fillColor = UIColor.clear.cgColor
gradient.mask = shape
button.layer.addSublayer(gradient)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Awesome, it’s perfect.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/nguyentruongky/89020a5f495420b260952f2ff19c4147/raw/df4fc4447088c33ed934e8f4fb56cdc6da1b6a55/res_Gradient_border_rectangle.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rectangles with rounded corners are everywhere! (Steve Jobs)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tried to make my button rounded corner. And…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/nguyentruongky/89020a5f495420b260952f2ff19c4147/raw/df4fc4447088c33ed934e8f4fb56cdc6da1b6a55/res_Wrong_round_corner_gradient_rectangle.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oops. It didn’t work as what I need. Did some more search and found another great one from Ian Hirschfeld here &lt;a href=&quot;https://medium.com/swift-programming/how-to-create-an-angle-gradient-border-in-swift-f4856dde4c90&quot;&gt;https://medium.com/swift-programming/how-to-create-an-angle-gradient-border-in-swift-f4856dde4c90&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;my-solution&quot;&gt;My solution&lt;/h2&gt;

&lt;p&gt;It works like a charm, but it’s not my favorite solution. I need a Swifty project, not a combination with Objective-C. So don’t I try to make something simpler and easier for me and others. Finally, I did it.&lt;/p&gt;

&lt;h3 id=&quot;the-idea&quot;&gt;The idea&lt;/h3&gt;

&lt;p&gt;Simple idea, create a button with gradient background, fill it with a solid color view, and the padding to the button bounds is the border width.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Talk is cheap. Show me the code. (Linus Torvalds)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func setupView() {    
    let gradientLayer = CAGradientLayer()
    gradientLayer.frame = bounds
    gradientLayer.colors = colors.map({ return $0.cgColor })
    gradientLayer.startPoint = startPoint
    gradientLayer.endPoint = endPoint
    layer.insertSublayer(gradientLayer, at: 0) // * important
    
    let backgroundView = UIView()
    backgroundView.translatesAutoresizingMaskIntoConstraints = false
    insertSubview(backgroundView, at: 1) // * (1)
    backgroundView.backgroundColor = backgroundColor // (2)
    backgroundView.fill(toView: self, space: UIEdgeInsets(space: borderWidth)) // (3)
    createRoundCorner(cornerRadius)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1) - The most important thing here is the order of the gradient layer and background view. The title label will be overlapped and when we use &lt;code class=&quot;highlighter-rouge&quot;&gt;addSublayer&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;addSubview&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(2) - backgroundColor: the view property from UIKit.&lt;/p&gt;

&lt;p&gt;(3) - borderWidth is new property, we will use it every time re-setupView.&lt;/p&gt;

&lt;p&gt;Now is time to create the rounded corner.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func createRoundCorner(_ radius: CGFloat) {
    cornerRadius = radius
    super.createRoundCorner(radius)
    backgroundView.createRoundCorner(radius - borderWidth)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Every time we set the radius or backgroundColor, &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt; called. So that, the &lt;code class=&quot;highlighter-rouge&quot;&gt;gradientLayer&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;backgroundView&lt;/code&gt; are added many times. Keep an instance and remove it every time view setup.&lt;/p&gt;

&lt;p&gt;But, no gradient border appears. The border width still zero. We need to give a non-zero value to &lt;code class=&quot;highlighter-rouge&quot;&gt;borderWidth&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt; again.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func createBorder(_ width: CGFloat) {
    borderWidth = width
    setupView()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;See the result&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/nguyentruongky/89020a5f495420b260952f2ff19c4147/raw/df4fc4447088c33ed934e8f4fb56cdc6da1b6a55/res_Final_button.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;completed-code&quot;&gt;Completed code&lt;/h3&gt;

&lt;p&gt;Have a look at my completed code for this library at &lt;a href=&quot;https://github.com/nguyentruongky/knGradientBorderButton&quot;&gt;https://github.com/nguyentruongky/knGradientBorderButton&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I use my auto layout library in this project. You can find it here: &lt;a href=&quot;https://github.com/nguyentruongky/knConstraints&quot;&gt;https://github.com/nguyentruongky/knConstraints&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;suggestions-or-feedback&quot;&gt;Suggestions or feedback?&lt;/h2&gt;

&lt;p&gt;Feel free to comment, suggest, create pull request or open issue.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">My Problem</summary></entry><entry><title type="html">Top Skills iOS Developers Need Today</title><link href="http://localhost:4000/2017/03/08/top-skills-ios.html" rel="alternate" type="text/html" title="Top Skills iOS Developers Need Today" /><published>2017-03-08T00:00:00+07:00</published><updated>2017-03-08T00:00:00+07:00</updated><id>http://localhost:4000/2017/03/08/top-skills-ios</id><content type="html" xml:base="http://localhost:4000/2017/03/08/top-skills-ios.html">&lt;p&gt;We all know that iOS development never stops. There are hundred of skills you need to become a skilled iOS developer in the tech industry today. Let’s have a look at some skills are expected of iOS developers today in this ever changing and fast-paced industry.&lt;/p&gt;

&lt;h2 id=&quot;1-swift&quot;&gt;1. Swift&lt;/h2&gt;

&lt;p&gt;Swift is a great place to start for all iOS developers. I started learning iOS from C#, and I found out that it was a smooth transition for me. It took me just a short amount of time to work on my first iOS application with my company.&lt;/p&gt;

&lt;p&gt;Swift grows quickly and some of the biggest technology companies have migrated to Swift. Most of the iOS developer job descriptions out there require Swift as a top skill.&lt;/p&gt;

&lt;p&gt;However, one problem with Swift is that it grows too fast and it changes too many things in each updated version. On the other hand, the one good thing about this is that Apple tells you how to make changes for your code accordingly.&lt;/p&gt;

&lt;h2 id=&quot;2-programmatically-auto-layout&quot;&gt;2. Programmatically Auto Layout&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://i2.wp.com/pangara.com/wp-content/uploads/2017/03/auto_layout_programmatically.png?w=1280&amp;amp;ssl=1&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my opinion, Auto Layout is an extremely wonderful UI builder system for iOS developers. You can try Auto Layout in two ways: Interface Builder and Programmatically.&lt;/p&gt;

&lt;p&gt;I tried Auto Layout with Interface Builder and I fell in love with it. I became the best developer in my company using Auto Layout and I was requested to specifically build UI for all future projects.&lt;/p&gt;

&lt;p&gt;After a long time of using Interface Builder, I received a great tutorial from Brian Voong, a skilled iOS app developer. I abandoned Interface Builder right after the tutorial and continued with Auto Layout programmatically.&lt;/p&gt;

&lt;p&gt;Auto Layout programmatically allows me to use my imagination, code re-usability, and it dynamically changes. I have an ability to imagine exactly what UI will look like after 1 year of using Auto Layout programmatically.&lt;/p&gt;

&lt;h2 id=&quot;3-animation&quot;&gt;3. Animation&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://i2.wp.com/pangara.com/wp-content/uploads/2017/03/Animation.gif?resize=318%2C574&amp;amp;ssl=1&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The best iOS applications have gorgeous animations. Without animation, your app looks like a robot and you run the risk of losing users. Animation allows your app to come alive and fascinate its users. This is truly the future of tech and being skilled in animation will only make you more valuable to clients.&lt;/p&gt;

&lt;p&gt;Now, what is the best way to start Animation? I would suggest you first watch a variety of YouTube animation videos, purchase this book from Ray Wenderlich, try them out for yourself, understand how code animates the objects, and transform your apps. Remember, practice makes perfect!&lt;/p&gt;

&lt;h2 id=&quot;4-3rd-party-libraries&quot;&gt;4. 3rd-Party Libraries&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/pangara.com/wp-content/uploads/2017/03/3rd_party_libs.png?resize=1024%2C807&amp;amp;ssl=1&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are millions of talented iOS developers out there who create amazing code everyday. Instead of developing a new custom alert view with images and animations, you can use some awesome codes from cocoacontrols website and make your app make it to the Appstore even faster.&lt;/p&gt;

&lt;p&gt;There are many ways to use 3rd-party libraries in your projects, but I suggest you try one of these solutions I’ve used: Cocoapods and Carthage. For general projects, I still prefer Cocoapods. To get a better idea of which solution is more suitable for you, this blog post might be able to help.&lt;/p&gt;

&lt;h2 id=&quot;5-version-control&quot;&gt;5. Version Control&lt;/h2&gt;

&lt;p&gt;Version control is one skill that can’t be missing from any iOS developer. There are two popular ways to work with version control: a UI application or command lines. I always suggest my developers use command lines instead of an application. UI applications do everything for you so that you can’t understand what is going on with your version control. Using command lines helps you to understand clearly what happens with your command and how to combine commands together to solve a conflict.&lt;/p&gt;

&lt;h2 id=&quot;6-framework-digging&quot;&gt;6. Framework Digging&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://i1.wp.com/pangara.com/wp-content/uploads/2017/03/framework_digging.png?resize=1024%2C836&amp;amp;ssl=1&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nowadays, iOS developers, especially from Vietnam, try framework or library to solve their problems without understanding what is exactly happening to their code. I think this a very bad habit. There are several advantages when it comes to digging into frameworks or libraries.&lt;/p&gt;

&lt;p&gt;Digging into frameworks helps you to better understand the author’s purpose and to prevent unexpected issues.&lt;/p&gt;

&lt;p&gt;Now, there are many libraries can help you solve a feature, but what is the best library to use for your project? You can figure this out when you dig into the source codes. By doing this, you will find out the most suitable and the one with the best performance.&lt;/p&gt;

&lt;p&gt;It’s important to remember that you you can learn a lot from other iOS developers. The best way I improve my code is to read other code. I learn a lot from other libraries.&lt;/p&gt;

&lt;h1&gt;#&lt;/h1&gt;

&lt;p&gt;I’ve learned all of these skills throughout my iOS development. I hope these experiences can help other iOS developers continue to further their career.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">We all know that iOS development never stops. There are hundred of skills you need to become a skilled iOS developer in the tech industry today. Let’s have a look at some skills are expected of iOS developers today in this ever changing and fast-paced industry.</summary></entry><entry><title type="html">4 Tips on How to Become a Global IT Freelancer</title><link href="http://localhost:4000/2017/02/02/it-freelancer.html" rel="alternate" type="text/html" title="4 Tips on How to Become a Global IT Freelancer" /><published>2017-02-02T00:00:00+07:00</published><updated>2017-02-02T00:00:00+07:00</updated><id>http://localhost:4000/2017/02/02/it-freelancer</id><content type="html" xml:base="http://localhost:4000/2017/02/02/it-freelancer.html">&lt;p&gt;Personally, working eight hours a day, five days a week in an office is boring. I love having the freedom to work anytime and anywhere. I have learned many things by having these so-called ‘free days.’ And it all comes with working as an IT freelancer.&lt;/p&gt;

&lt;p&gt;Working a nine to five in various positions in application development, such as .NET, iOS, Nodejs, and more was great experience for me but my dream of becoming a full time freelancer never stopped growing. In Vietnam, becoming an IT freelancer is not necessarily the best choice for developers. Due to company’s low budgets for domestic projects these is all too low for the actual cost of living in the country. This is why I decided to become a global IT freelancer. You may wonder what is the difference between an IT freelancer and a global IT freelancer. Well, you guessed it. My work extends far beyond the borders of Vietnam. I’m no longer limited to just working in Vietnam. The whole world is at my fingertips!&lt;/p&gt;

&lt;p&gt;Upon first learning about working as a global IT freelance, many people may think this is a simple job. But they don’t realise that it is actually can be more difficult working as a full time freelancer. Here are a few tips on what I had to do to get to where I am today as a global freelancer.&lt;/p&gt;

&lt;h2 id=&quot;english&quot;&gt;English&lt;/h2&gt;

&lt;p&gt;You won’t make it outside your country without English, especially when it comes to the IT world. All documents are in English, all relevant l forums and groups are in English, most of your clients will use English, and millions of online freelance jobs in this IT worlds are in English. With good English communication skills, your first step into the world of freedom. It’s important to note that you’re not required to be a master or an expert in English. IT freelance careers don’t ask you to write essays in English. You’ll need strong English when it comes to communicating.&lt;/p&gt;

&lt;h2 id=&quot;strong-portfolio&quot;&gt;Strong Portfolio&lt;/h2&gt;

&lt;p&gt;When I first started to step out into the freelancer world, I thought I could do everything. I was fully confident in applying and bidding on every project I came across. But for some reason, no one was reaching out to me. I focused on voicing my experience and technical knowledge but I didn’t have a strong portfolio to back it up. Clients who viewed my portfolio didn’t see a lot of truth in what I was telling them about my skill set.&lt;/p&gt;

&lt;p&gt;A strong tech portfolio is not only necessary as an IT freelancer, but also in all online freelance jobs no matter what industry you’re working in. For most clients, your portfolio may make or break your chances of landing the job.&lt;/p&gt;

&lt;p&gt;It’s important to build up your website and include relevant blog posts, apps or projects you’ve worked on to build up your freelancer profile and credibility.If they have a good idea of your background and work experience, they will be more likely to hire you for the job.&lt;/p&gt;

&lt;h2 id=&quot;understand-your-clients-needs&quot;&gt;Understand Your Client’s Needs&lt;/h2&gt;

&lt;h4 id=&quot;you-cant-sell-a-comb-to-someone-with-no-hair&quot;&gt;&lt;em&gt;You can’t sell a comb to someone with no hair.&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;It’s important you understand what your clients want. For instance, while searching for IT freelancer jobs, you will learn that many available projects involve working with social networks, dating apps, streaming, chatting, financial, and more. These are hot topics right now in the freelancer industry. Build some projects in these areas to showcase your understanding and expertise of these products. This will make you very valuable to potential clients. Not only will you gain experience from building these projects but you will also have some demos to add to your portfolio.&lt;/p&gt;

&lt;h2 id=&quot;build-your-network&quot;&gt;Build Your Network&lt;/h2&gt;

&lt;p&gt;The best way for newbies to find job opportunities in the freelance world is to build up network starting with the people you know. It helps to utilise contacts you’ve made with previous projects. Reach out to them and let them know you’re looking for additional work. I found my first project from my Android friend for iOS position in his project. There are hundreds of  groups and forums specialising in specific tech projects thousands of experts to bounce ideas off of and showcase your skills. Use these groups to  learn more about what skills you may be missing in the industry, share what you’re good at and gain advice from your peers. The more you share, the bigger your network grows and more opportunities will come your way.&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;One takeaway point from this whole experience is that the more preparation and experience I had, the more successful I became at landing new clients.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Personally, working eight hours a day, five days a week in an office is boring. I love having the freedom to work anytime and anywhere. I have learned many things by having these so-called ‘free days.’ And it all comes with working as an IT freelancer.</summary></entry><entry><title type="html">3 Tips on How to Effectively Manage Your Time</title><link href="http://localhost:4000/2017/01/10/mange-your-time.html" rel="alternate" type="text/html" title="3 Tips on How to Effectively Manage Your Time" /><published>2017-01-10T00:00:00+07:00</published><updated>2017-01-10T00:00:00+07:00</updated><id>http://localhost:4000/2017/01/10/mange-your-time</id><content type="html" xml:base="http://localhost:4000/2017/01/10/mange-your-time.html">&lt;p&gt;One of the luxuries of working as a freelancer is having the ability to create your own schedule, work when you want, and at your own pace. Some see it as a blessing and some see it as a curse. If you’re new to the fast-growing freelancer industry, this might be a tough adjustment. Especially if you’re coming from a strict 9-to-5 work schedule.&lt;/p&gt;

&lt;h4 id=&quot;make-the-most-of-your-24-hours&quot;&gt;Make the Most of Your 24 Hours&lt;/h4&gt;

&lt;p&gt;Have you ever wished you had more than 24 hours in a day? I sure have. There came a point in my life when I had a really hard time with  time management and I wasn’t about to find a way to get out of this funk. I had no time to spend with my family, no time to work on personal improvement, no time to go out with friends, no time at all. All of my time was used up on my freelance work from coding new features, fixing bugs and much more. I was killing myself working odd hours and missing out on quality time with my family and friends.&lt;/p&gt;

&lt;p&gt;I spent all of my efforts learning  how to manage my time more effectively. Finally, I found a light at the end of the tunnel. I hope these tips will help you learn how to manage your time more effectively and become a freelance rockstar.&lt;/p&gt;

&lt;h2 id=&quot;switch-up-your-working-hours&quot;&gt;Switch Up Your Working Hours&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2FWorking_Hours.jpg?alt=media&amp;amp;token=975b7404-cdfc-4df8-a3c0-bd27c1a5beeb&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first step I took to implement effective time management was to change up my work hours. Everyday I spent 8 hours in the office and I spent an additional 4-6 hours after dinner to work on my freelance projects. But this system did not give me time for my freelance activities because I spent all of my energy at work. I was physically and mentally drained and there was no way I could efficiently finish my freelance work. This is one of the main reasons why working over-time is not a good idea for any type of project.&lt;/p&gt;

&lt;p&gt;It’s important to recognise what times of the day you are the most productive and what times you are not. After dinner, I want to spend time with my family, play games with my kids, read a book, or simply, take part in a stimulating conversation where I’m not talking about work or another project. It’s important to use this after-work time to shut off and spend some time with your loved ones or simply in an activity that doesn’t require you to think so much.&lt;/p&gt;

&lt;h4 id=&quot;what-time-do-of-the-day-do-you-work-most-efficiently&quot;&gt;What time do of the day do you work most efficiently?&lt;/h4&gt;

&lt;p&gt;For me, I usually start working at 2 AM after 3 to 4 hours of sleep. This time is ideal for me because everything is quiet and there are absolutely no distractions. No phone calls, no email, no one bothers you. For me, this is the best time to get my creative juices flowing. I use this period to do some researches and to work on my side projects. I’ve found that this is the most effective way for me to manage my time and to receive the best results out of my work. I am able to contribute to more online communities, take some online and bring myself to a new experience level. And of course as a result, I am able to earn more money from my freelance projects.&lt;/p&gt;

&lt;h2 id=&quot;keep-up-your-health&quot;&gt;Keep Up Your Health&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2FHealth.jpg?alt=media&amp;amp;token=ca264177-c28c-4a5e-b66a-ee12e9b5e10c&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Most importantly, a healthy body is the key to reach success. I have to work 8 hours everyday in an office and an additional 4-6 hours on freelance projects. If you do the math, my body has to work 1.5 times more than usual. Crazy, right? For most people, their body and mind will become exhausted very quickly with a schedule like this. In order for me to prevent myself from becoming ill, I make a conscious effort to include additional nutrition in my meals with more fruits, protein, etc.&lt;/p&gt;

&lt;p&gt;In additional to a healthy diet, it’s important to stay active.I try to incorporate a little bit of  exercise into my daily activities. For example, I use the stairs instead of the elevator, I try to walk faster, clean the floor manually, and more. Now, I know these types of activities won’t help me become an athlete, but every little bit helps to keep my health up.&lt;/p&gt;

&lt;h2 id=&quot;change-your-mindset&quot;&gt;Change Your Mindset&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fbackground-of-success-ideas_1284-1184.jpg?alt=media&amp;amp;token=56fdb401-87c4-4afc-adb8-260860ff95e7&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I had a misconception of working and learning and what it took to manage your time as a freelancer and a full-time employee. I was working on more freelance projects in the hopes of expanding my knowledge and my experience. In 2015, I took on so many freelance projects and it was a big mistake.&lt;/p&gt;

&lt;p&gt;When we work on a freelance project, we have a lot of  pressure to uphold the quality of code, time, and money. We have to develop new features, fix bugs, while continuously releasing and developing more new features in a very limited amount of time. And what was the result? All I was trying to was  learn how to finish the project as fast a possible. As a result of this, the quality of my work suffered. I wasn’t growing or learning from my freelance projects, and I wasn’t managing my time effectively.&lt;/p&gt;

&lt;p&gt;It’s important to learn the new technology or framework, and to become strong and familiar with it before starting a new project. As a tech freelancer, this will help you go far. Learn the technology in depth, apply it to project, and experience it. Not only will this help you earn money but it will also help you manage your time better.&lt;/p&gt;

&lt;h4 id=&quot;free-time-is-your-friend&quot;&gt;Free time is your friend.&lt;/h4&gt;

&lt;p&gt;After one or two projects (around 2 -3 months), you should set aside some free time to learn and research. Build your library of knowledge so you can apply these skills to future projects. This will boost your career.&lt;/p&gt;

&lt;p&gt;From the very first time I implemented these tips, I have earned more about 1.5 to 2 times more money than before. I still have time for family, friends, learning new skills and building my technical knowledge. It’s all a balance act. Once you’ve learned how to manage your time and mastered that, everything else will fall into place.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">One of the luxuries of working as a freelancer is having the ability to create your own schedule, work when you want, and at your own pace. Some see it as a blessing and some see it as a curse. If you’re new to the fast-growing freelancer industry, this might be a tough adjustment. Especially if you’re coming from a strict 9-to-5 work schedule.</summary></entry><entry><title type="html">Activate code view</title><link href="http://localhost:4000/2016/05/25/code-view.html" rel="alternate" type="text/html" title="Activate code view" /><published>2016-05-25T00:00:00+07:00</published><updated>2016-05-25T00:00:00+07:00</updated><id>http://localhost:4000/2016/05/25/code-view</id><content type="html" xml:base="http://localhost:4000/2016/05/25/code-view.html">&lt;h4 id=&quot;purpose&quot;&gt;Purpose&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fcode_view.gif?alt=media&amp;amp;token=994d2ae9-1c38-456b-ad68-7f711805548e&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;requirement&quot;&gt;Requirement&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Dynamic number of character, maybe 6 or 8, maximum is 12.&lt;/li&gt;
  &lt;li&gt;Active the current character underline.&lt;/li&gt;
  &lt;li&gt;Auto active/validate when enter enough character.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;idea&quot;&gt;Idea&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Create a custom view named &lt;code class=&quot;highlighter-rouge&quot;&gt;CharacterView&lt;/code&gt; to display a code character with underline.&lt;/li&gt;
  &lt;li&gt;Create an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;CharacterView&lt;/code&gt; with the number of character base on demand.&lt;/li&gt;
  &lt;li&gt;Calculate and decrease the font size, the distance between 2 views to make sure all characters will be displayed at the center of the screen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s do it.&lt;/p&gt;

&lt;h4 id=&quot;character-view&quot;&gt;Character View&lt;/h4&gt;

&lt;p&gt;The character view includes 2 elements: 1 label for code and 1 view for underline.
Setup the code label and underline view&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private func setupCode() {
    codeLabel = UILabel(frame: CGRect(x: 0, y: 0, width: frame.width, height: frame.height))
    codeLabel.font = UIFont.systemFontOfSize(defaultFontSize)
    codeLabel.textAlignment = NSTextAlignment.Center
    self.addSubview(codeLabel)
}

private func setupUnderline() {
    underlineView = UIView(frame: CGRect(
        x: codeLabel.frame.origin.x,
        y: codeLabel.frame.origin.y + codeLabel.frame.height + 4,
        width: codeLabel.frame.width,
        height: codeLabel.frame.width / 10))
    underlineView.backgroundColor = Color.inactiveColor
    self.addSubview(underlineView)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are some errors here.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;defaultFontSize&lt;/code&gt; is a global variable, it’ll be changed base on the number of characters.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Color.inactiveColor&lt;/code&gt; is a static variable, you can change any color you want.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The character view has active, inactive states. These methods to do that.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func activate() { 
    changeStateWithColor(Color.activeColor) 
}
func deactivate() { 
    changeStateWithColor(Color.inactiveColor) 
}
private func changeStateWithColor(color: UIColor) { 
    codeLabel.textColor = color; - 
    underlineView.backgroundColor = color; 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And another method to change to string in code label.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func changeCodeWithString(string: String) { 
    codeLabel.text = string 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;code-view&quot;&gt;Code View&lt;/h4&gt;

&lt;p&gt;The code view will have some variables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;characterViews : [CharacterView]&lt;/code&gt;: An array of character views.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;horizontalSpacing: CGFloat&lt;/code&gt;: the spacing between 2 characters.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;codeField : UITextField&lt;/code&gt;: A hidden textfield, the code will be enter directly here and parse to character view.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;validateCode: ((String) -&amp;gt; ())?&lt;/code&gt;: a method will be executed when the code enter completely.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Initialize the view&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;required init?(coder aDecoder: NSCoder) { super.init(coder: aDecoder) }

override init(frame: CGRect) { super.init(frame: frame) }

convenience init(frame: CGRect, numberOfCharacter: Int) {
    self.init(frame: frame)
    setupCodeField()
    let value = calculateSizeForScreenBaseOnWidth(frame.width, numberOfCharacter: numberOfCharacter)
    let horizontalSpacing: CGFloat = value.spacing
    let baseSize = value.baseSize
    var labelX = calculateFirstLabelXBaseOnLabelWidth(baseSize.width,
                                                      viewWidth: frame.width,
                                                      numberOfCharacter: numberOfCharacter,
                                                      horizontalSpacing: horizontalSpacing)

    for _ in 0 ..&amp;lt; numberOfCharacter {
        self.addSubview(createCharacterViewWithSize(baseSize, atX: labelX))
        labelX += horizontalSpacing + baseSize.width
    }

    activeCodeAtIndex(0)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have to setup the hidden textfield. Don’t forget conform UITextFieldDelegate&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private func setupCodeField() {
    codeField.delegate = self
    self.addSubview(codeField)
    codeField.becomeFirstResponder()
    codeField.autocorrectionType = UITextAutocorrectionType.No
    codeField.autocapitalizationType = UITextAutocapitalizationType.None
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have to calculate the character size and font size base on the code view and number of character. For example: with 6-character-code, the font size can be 40+pt and the horizontal spacing is 16. But with 12-character-code, we can’t do that. The font size has to be decreased. This is a recursion method to find the suitable size.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func calculateSizeForScreenBaseOnWidth(viewWidth: CGFloat, numberOfCharacter: Int) -&amp;gt; (chracterSize: CGSize, spacing: CGFloat) {
    let baseSize = calculateSizeBaseOnFontSize(defaultFontSize)
    if viewWidth / CGFloat(numberOfCharacter) &amp;gt; baseSize.width + horizontalSpacing { return (baseSize, horizontalSpacing) }

    horizontalSpacing -=  horizontalSpacing &amp;gt; 8 ? 2 : 0
    defaultFontSize -= 4
    return calculateSizeForScreenBaseOnWidth(viewWidth, numberOfCharacter: numberOfCharacter)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This method returns a tuple with the character view size and the horizontal spacing between 2 character views.
Next, we have to calculate the x coordinate for the first character view.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func calculateFirstLabelXBaseOnLabelWidth(width: CGFloat,
                                          viewWidth: CGFloat,
                                          numberOfCharacter: Int,
                                          horizontalSpacing spacing: CGFloat) -&amp;gt; CGFloat {
    var labelX: CGFloat = width * CGFloat(numberOfCharacter)
    labelX += spacing * CGFloat(numberOfCharacter - 1)
    labelX = (viewWidth - labelX) / 2
    return labelX
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the most important method is the textfield delegate.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String) -&amp;gt; Bool {
    let codeLength = textField.text!.characters.count
    // delete character
    guard string.isEmpty == false &amp;amp;&amp;amp; range.length != 1 else {
        characterViews[codeLength - 1].changeCodeWithString(string)
        activeCodeAtIndex(codeLength - 1)
        deactivateCodeAtIndex(codeLength)
        return true
    }

    // enter new character
    guard codeLength &amp;lt; characterViews.count else { return false }
    enterCodeAtIndex(codeLength, withString: string)

    // validate code
    if codeLength + 1 == characterViews.count {
        let code = (textField.text! as NSString).stringByReplacingCharactersInRange(range, withString: string)
        print(&quot;validate code \(code)&quot;)
        if let validateCode = validateCode {
            validateCode(code)
        }
    }
    return true
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have to handle the delete key, when input new character, when fill all characters and execute &lt;code class=&quot;highlighter-rouge&quot;&gt;validateCode&lt;/code&gt; method.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Delete key: clear text, activate the current character and deactivate the previous character view. Make sure your character index will not out of index. View detail in the sample project.&lt;/li&gt;
  &lt;li&gt;Add new character: add text to current character, active next character.&lt;/li&gt;
  &lt;li&gt;Auto execute the method: check the count of character, use &lt;code class=&quot;highlighter-rouge&quot;&gt;stringByReplacingCharactersInRange&lt;/code&gt; to create new text and execute the method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;improvement&quot;&gt;Improvement&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;The code doesn’t work good on iPhone 6+, the font size is a little small.&lt;/li&gt;
  &lt;li&gt;The recursion code makes the performance down a lot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some detail can’t be written here, please see more at my github: &lt;a href=&quot;https://github.com/nguyentruongky/ActiveCode&quot;&gt;https://github.com/nguyentruongky/ActiveCode&lt;/a&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Purpose</summary></entry><entry><title type="html">Dynamically load view controller into another</title><link href="http://localhost:4000/2016/01/29/embed-controller.html" rel="alternate" type="text/html" title="Dynamically load view controller into another" /><published>2016-01-29T00:00:00+07:00</published><updated>2016-01-29T00:00:00+07:00</updated><id>http://localhost:4000/2016/01/29/embed-controller</id><content type="html" xml:base="http://localhost:4000/2016/01/29/embed-controller.html">&lt;p&gt;I saw a question on &lt;a href=&quot;http://stackoverflow.com/questions/35011539/how-to-make-view-scroll-like-instagrams-profile-vc-with-segmentedcontroller/35079835#35079835&quot;&gt;stackoverflow&lt;/a&gt;. He ran into a problem when use ContainerView to embed other view controller. I’ll share what I did.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create new project.&lt;/li&gt;
  &lt;li&gt;Design what you want. I add a label, a segmented control and a container view to embed child controller.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fcontainer_view.png?alt=media&amp;amp;token=1a69995c-9f5f-4226-a67c-b7bbd3bbce83&quot; alt=&quot;design&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Select all controls and choose menu Editor\Embed In\View. Name it: Content View.&lt;/li&gt;
  &lt;li&gt;Select Content View and embed into ScrollView.&lt;/li&gt;
  &lt;li&gt;Set constraint for ScrollView: leading, trailing, top, bottom to super view equal 0.&lt;/li&gt;
  &lt;li&gt;Set constraint for Content View: leading, trailing, top, bottom to ScrollView equal to 0, vertical and horizontal alignment.&lt;/li&gt;
  &lt;li&gt;Connect outlets and action to your controller.&lt;/li&gt;
  &lt;li&gt;Add your new controllers. In my demo, I added 2 TableViewController, 1 for displaying images (ImageController), 1 for loading text (TextController).&lt;/li&gt;
  &lt;li&gt;Back to your main view controller, add some code.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var dynamicHeight: CGFloat = 0    
@IBOutlet weak var scrollView: UIScrollView!  
@IBOutlet weak var pageContainer: UIView!
@IBAction func selectPage(sender: AnyObject) {
	// remove child controllers before add others
	for controller in childViewControllers {  
		controller.removeFromParentViewController()
	}  
	for view in pageContainer.subviews {  
		view.removeFromSuperview()
	}
	let segment = sender as! UISegmentedControl
	if segment.selectedSegmentIndex == 0 {  
		createImageController()
	} else { 
		createTextController()
	}  
	updateScrollContentSize()
}
    
func updateScrollContentSize() {
	// 150 is your other view height. 
	scrollView.contentSize = CGSize(width: view.frame.size.width, height: dynamicHeight + 150)
}
    
func createTextController() {    
	let textController = UIStoryboard(name: &quot;Main&quot;, bundle: nil).instantiateViewControllerWithIdentifier(&quot;TextController&quot;) as! TextController
	dynamicHeight = textController.getTableContentHeight()
	textController.tableView.scrollEnabled = false  
	self.addChildViewController(textController)
	pageContainer.addSubview(textController.view)
	textController.view.frame = CGRectMake(0, 0, pageContainer.frame.size.width, dynamicHeight)
}

func createImageController() {    
	let imageController = UIStoryboard(name: &quot;Main&quot;, bundle: nil).instantiateViewControllerWithIdentifier(&quot;ImageShowController&quot;) as! ImageShowController
	dynamicHeight = imageController.getTableContentHeight()
	imageController.tableView.scrollEnabled = false  
	self.addChildViewController(imageController)
	pageContainer.addSubview(imageController.view)
	imageController.view.frame = CGRectMake(0, 0, pageContainer.frame.size.width, dynamicHeight * 2)
}
    
override func viewDidAppear(animated: Bool) {    
	super.viewDidAppear(true)
	createImageController()
	updateScrollContentSize()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Xcode tells you about the error. Fix it now. Open your controller you want to embed and add some code.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func getTableContentHeight() -&amp;gt; CGFloat {    
	// calculate the total height of your controller. 
	return CGFloat(vietnamTravelLocations.count) * 44
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s done, run your project and see the result.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Container view is very convenient, But don’t exploit it, especially when your embed controller change the height many times. Your app will be lag, unstable and bring a bad experience to your user.&lt;/p&gt;

&lt;p&gt;You can download my demo at &lt;a href=&quot;https://github.com/nguyentruongky/DemoContainerViewDynamicLoading&quot;&gt;my github&lt;/a&gt;. Hope this can help.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">I saw a question on stackoverflow. He ran into a problem when use ContainerView to embed other view controller. I’ll share what I did.</summary></entry></feed>