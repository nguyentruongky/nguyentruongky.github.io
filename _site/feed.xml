<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4001/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4001/" rel="alternate" type="text/html" /><updated>2018-04-25T11:20:19+07:00</updated><id>http://localhost:4001/</id><title type="html">&amp;lt; Code for life /&amp;gt;</title><subtitle>My personal notes, codes, reviews, ideas</subtitle><author><name>Ky Nguyen</name></author><entry><title type="html">Unsplash - iOs application</title><link href="http://localhost:4001/2018/04/20/unsplash-homescreen.html" rel="alternate" type="text/html" title="Unsplash - iOs application" /><published>2018-04-20T00:00:00+07:00</published><updated>2018-04-20T00:00:00+07:00</updated><id>http://localhost:4001/2018/04/20/unsplash-homescreen</id><content type="html" xml:base="http://localhost:4001/2018/04/20/unsplash-homescreen.html">&lt;p&gt;I found an excellent app, Unsplash. It’s simple and good at UX. Some techniques are very interesting. I will implement a demo for this app. Just for practise my skills and hope this can help junior developers can enjoy new techniques.&lt;/p&gt;

&lt;p&gt;This note is about homescreen. I will make a basic homescreen with photos like Unsplash. Animation, category, load more photos are in other notes.&lt;/p&gt;

&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;
&lt;p&gt;I use some code collection from my personal codebase. You can download it at &lt;a href=&quot;https://github.com/nguyentruongky/codebase&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Init an empty project and added my &lt;code class=&quot;highlighter-rouge&quot;&gt;mustHave&lt;/code&gt; folder&lt;/p&gt;

&lt;h2 id=&quot;add-tableview-to-homecontroller&quot;&gt;Add TableView to HomeController&lt;/h2&gt;
&lt;p&gt;Change something&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;File name: &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController.swift&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController.swift&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Class name: &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Main Storyboard custome class: &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Class &lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController&lt;/code&gt; content is below.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    // (1)
    class HomeController: knCustomTableController {
        override func viewDidLoad() {
            super.viewDidLoad()
            setupView()
        }
        override func setupView() {
            view.addSubview(tableView)
            tableView.fill(toView: view)
        }
        override func registerCells() {
            tableView.register(UITableViewCell.self, forCellReuseIdentifier: &quot;UITableViewCell&quot;)
        }
    }

    // (2)
    extension HomeController {
        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int { 
            return 5
        }
        
        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell {
            let cell = tableView.dequeueReusableCell(withIdentifier: &quot;UITableViewCell&quot;, for: indexPath) as! UITableViewCell
            cell.backgroundColor = UIColor.color(value: CGFloat(UInt32.random(lower: 0, upper: 255)))
            return cell
        }
        
        override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -&amp;gt; CGFloat {
            return 35
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1): &lt;code class=&quot;highlighter-rouge&quot;&gt;knCustomTableController&lt;/code&gt; is my favourite controller in my codebase. It’s a view controller, contain &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt;, conform &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDataSource&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDelegate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Why don’t I use &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewController&lt;/code&gt;? I have a note about this &lt;a href=&quot;https://kynguyen.space/2017/10/12/UITableViewController-vs-UIViewController.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;knCustomTableController&lt;/code&gt; is setup everything to be ready to display. You need override &lt;code class=&quot;highlighter-rouge&quot;&gt;registerCells&lt;/code&gt;, some needed methods for table datasource like (2).&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt; method contains something weird. It’s my constraints setting. I am a fan of Auto Layout Programmatically, so usually use my library, &lt;a href=&quot;https://github.com/nguyentruongky/knConstraints&quot;&gt;&lt;strong&gt;knConstraints&lt;/strong&gt;&lt;/a&gt; for setting constraints.&lt;/p&gt;

&lt;p&gt;Run and see a tableView with 5 rows, different colors.&lt;/p&gt;

&lt;h2 id=&quot;add-model-and-fake-data&quot;&gt;Add Model and fake data&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Add new file name &lt;code class=&quot;highlighter-rouge&quot;&gt;PhotoModel.swift&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add some code&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    class Photo {
        var author: String
        var url: String
        var ratio: CGFloat = 1
        var displayHeight: CGFloat {
            return CGFloat(floor(Double(ratio * screenWidth)))
        }
        
        init(author: String, url: String, ratio: CGFloat) {
            self.author = author
            self.url = url
            self.ratio = ratio
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Update code in file &lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController.swift&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    var datasource = [Photo]()

    override func registerCells() {
        tableView.register(PhotoCell.self, forCellReuseIdentifier: &quot;PhotoCell&quot;)
    }

    override func fetchData() {
        for _ in 0 ..&amp;lt; 5 {
            datasource.append(Photo(author: &quot;Kyle&quot;, url: &quot;https://unsplash.com/photos/zydhjnjppEc/download&quot;, ratio: 0.667954600338083))
            datasource.append(Photo(author: &quot;Mark&quot;, url: &quot;https://unsplash.com/photos/Y6N_w94x8ik/download&quot;, ratio: 1.5))
        }
        tableView.reloadData()
    }

    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int { 
        return datasource.count }
        
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: &quot;PhotoCell&quot;, for: indexPath) as! PhotoCell
        cell.data = datasource[indexPath.row]
        return cell
    }

    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -&amp;gt; CGFloat { 
        return UITableViewAutomaticDimension }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;fetchData()&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Can’t run because of missing PhotoCell. Add new file &lt;code class=&quot;highlighter-rouge&quot;&gt;PhotoCell.swift&lt;/code&gt;. Add content below to &lt;code class=&quot;highlighter-rouge&quot;&gt;PhotoCell.swift&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    import UIKit
    class PhotoCell: knTableCell {
        var heightConstraint: NSLayoutConstraint?
        var data: Photo? {
            didSet {
                guard let data = data else { return }
                authorLabel.text = data.author
                photoImageView.downloadImage(from: data.url)
                // (1)
                heightConstraint?.constant = data.displayHeight
            }
        }

        private let authorLabel = knUIMaker.makeLabel()
        private let photoImageView = knUIMaker.makeImageView(contentMode: .scaleAspectFill)
        
        override func setupView() {
            let line = knUIMaker.makeLine(color: .white, height: 1)
            
            addSubviews(views: photoImageView, authorLabel, line)
            photoImageView.fill(toView: self)
            
            authorLabel.bottomLeft(toView: self, bottom: -8, left: 8)
            
            line.horizontal(toView: self)
            line.bottom(toView: self)
            
            // (2)
            heightConstraint = height(100, isActive: false)
            heightConstraint?.priority = UILayoutPriority(999)
            heightConstraint?.isActive = true
        }
    }
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I always setup Auto Layout in &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt; method. So, want to change any layout, UI, just find &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(1): Every photo has different ratio, and we need to keep the photoImageView the same ratio. So every photo, update the height constraint (calculated when ratio set).&lt;/p&gt;

&lt;p&gt;(2): Need to descrease the priority to avoid conflict with &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView-Encapsulated-Layout-Height&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView-Encapsulated-Layout-Height&lt;/code&gt; is a constraints automatically added by iOs.&lt;/p&gt;

&lt;h2 id=&quot;install-pod&quot;&gt;Install pod&lt;/h2&gt;

&lt;p&gt;Still have error at &lt;code class=&quot;highlighter-rouge&quot;&gt;photoImageView.downloadImage(from: data.url)&lt;/code&gt;. You comment it before because missing &lt;code class=&quot;highlighter-rouge&quot;&gt;Kingfisher&lt;/code&gt; library. We need to install &lt;code class=&quot;highlighter-rouge&quot;&gt;Kingfisher&lt;/code&gt; to help us download image. It’s very cool lib. More detail about Kingfisher is &lt;a href=&quot;https://github.com/onevcat/Kingfisher&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Use Terminal to access to your project, and &lt;code class=&quot;highlighter-rouge&quot;&gt;pod init&lt;/code&gt; then follow &lt;a href=&quot;https://github.com/onevcat/Kingfisher/wiki/Installation-Guide&quot;&gt;this instruction&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Uncomment code in &lt;code class=&quot;highlighter-rouge&quot;&gt;knUIImage.swift&lt;/code&gt; and run again&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Funsplash%2Funsplash_photo_list_1.gif?alt=media&amp;amp;token=5e2786f0-e428-4771-8aee-879d6c3f2404&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">I found an excellent app, Unsplash. It’s simple and good at UX. Some techniques are very interesting. I will implement a demo for this app. Just for practise my skills and hope this can help junior developers can enjoy new techniques.</summary></entry><entry><title type="html">OTP Code View</title><link href="http://localhost:4001/2018/04/17/otp-code-view.html" rel="alternate" type="text/html" title="OTP Code View" /><published>2018-04-17T00:00:00+07:00</published><updated>2018-04-17T00:00:00+07:00</updated><id>http://localhost:4001/2018/04/17/otp-code-view</id><content type="html" xml:base="http://localhost:4001/2018/04/17/otp-code-view.html">&lt;p&gt;Two years ago, I did a view for this purpose. Detail is on my github: &lt;a href=&quot;https://github.com/nguyentruongky/ActiveCode&quot;&gt;https://github.com/nguyentruongky/ActiveCode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nguyentruongky/ActiveCode/master/E7AVZubaOT.gif&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s 100% code, without auto layout. Today, I make another view, with same purpose, but use auto layout, better UI and much easier to maintain.&lt;/p&gt;

&lt;p&gt;UI will be like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fotp%2Fotp_design.png?alt=media&amp;amp;token=2355a603-7056-45c1-94fa-dfb18e6e0318&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;initilize-view&quot;&gt;Initilize view&lt;/h3&gt;

&lt;p&gt;Init view with number of digits you need and an action to validate your OTP from your controller. The number of digits should be less than 6 for good UI.&lt;/p&gt;

&lt;p&gt;Anyone can customize UI themselves for more digits. Digit indicator is • or _ can save more space.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    private var digitCount = 0
    private var validate: ((String) -&amp;gt; Void)?
    convenience init(digitCount: Int, validate: @escaping ((String) -&amp;gt; Void)) {
        self.init(frame: CGRect.zero)
        self.digitCount = digitCount
        self.validate = validate
        setupView()
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;setup-the-ui&quot;&gt;Setup the UI&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    override func setupView() {
        // (1)
        guard digitCount &amp;gt; 0 else { return }

        // (2)
        var constraints = &quot;H:|-8-&quot;
        for i in 0 ..&amp;lt; digitCount {
            let label = makeLabel()
            if i &amp;gt; 0 {
                label.width(toView: labels[0])
            }
            constraints += &quot;[v\(i)]-8-&quot;
        }
        constraints += &quot;|&quot;
        addConstraints(withFormat: constraints, arrayOf: labels)
        height(60)
        
        // (3)
        setCode(at: 0, active: true)
        hiddenTextField.becomeFirstResponder()
        addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(becomeFirstResponder)))
    }

    private func makeLabel() -&amp;gt; UILabel {
        let label = knUIMaker.makeLabel(font: UIFont.systemFont(ofSize: 45),
                                    color: color_69_125_245,
                                    alignment: .center)
        // (4)
        label.createRoundCorner(5)
        label.createBorder(0.5, color: color_102)

        // (5)
        addSubview(label)
        label.vertical(toView: self)
        labels.append(label)
        return label
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(1): Prevent code running while no digit. Only support init view by code with &lt;code class=&quot;highlighter-rouge&quot;&gt;init(digitCount:validate)&lt;/code&gt;, so should prevent other init way to make wrong behaviour.&lt;/p&gt;

&lt;p&gt;(2): Set Auto layout code. Create a Visual Format Language string (like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;H:|-8-[v0]-[v1]-8-|&quot;&lt;/code&gt;). Detail is &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/VisualFormatLanguage.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To make sure all digit indicators have same width, I set widthConstraint equal to the first indicator.&lt;/p&gt;

&lt;p&gt;(3): Minor stuffs, make first indicator active, set focus to the hiddenTextField to show keyboard.&lt;/p&gt;

&lt;p&gt;(4): This is how the indicator look. Want to change UI, just do it here. Please keep the (5) stay here. it is for auto layout setting.&lt;/p&gt;

&lt;h3 id=&quot;set-hidden-uitextfield&quot;&gt;Set hidden UITextField&lt;/h3&gt;
&lt;p&gt;Just add a UITextField, which is overlapped to use its keyboard and delegate. Every key input, I will update the digit indicator by catch the character in UITextFieldDelegate&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    lazy var hiddenTextField = self.addHiddenTextField()
    private func addHiddenTextField() -&amp;gt; UITextField {
        let tf = UITextField()
        tf.translatesAutoresizingMaskIntoConstraints = false
        tf.keyboardType = .numberPad
        tf.isHidden = true
        tf.delegate = self
        
        addSubviews(views: tf)
        tf.fill(toView: self)
        
        return tf
    }
    override func becomeFirstResponder() -&amp;gt; Bool {
        hiddenTextField.becomeFirstResponder()
        return true
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Conform &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextFieldDelegate&lt;/code&gt; and update method &lt;code class=&quot;highlighter-rouge&quot;&gt;textfield(shouldChangeCharactersIn:replacementString)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -&amp;gt; Bool {
        var newText = string
        // (1)
        if isInvalid {
            isInvalid = false
        }
        else {
            newText = (textField.text! as NSString).replacingCharacters(in: range, with: string)
        }

        // (2)
        let codeLength = newText.length
        guard codeLength &amp;lt;= digitCount else { return false }
        textField.text = newText
        
        // (3)
        func setTextToActiveBox() {
            for i in 0 ..&amp;lt; codeLength {
                let char = textField.text!.substring(from: i, to: i)
                labels[i].text = char
                setCode(at: i, active: true)
            }
        }
        
        // (4)
        func setTextToInactiveBox() {
            for i in codeLength ..&amp;lt; digitCount {
                labels[i].text = &quot;&quot;
                setCode(at: i, active: false)
            }
            
            if codeLength &amp;lt;= digitCount - 1 {
                setCode(at: codeLength, active: true)
            }
        }
        
        setTextToActiveBox()
        setTextToInactiveBox()
        
        if codeLength == digitCount {
            validateCode(code: textField.text!)
        }
        return false
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1): Reset all boxes when the code is invalid and type new character.&lt;/p&gt;

&lt;p&gt;(2)(3)(4): Update every character from &lt;code class=&quot;highlighter-rouge&quot;&gt;hiddenTextField&lt;/code&gt; to every indicator box. Rest of boxes will be set to empty.&lt;/p&gt;

&lt;h3 id=&quot;result&quot;&gt;Result&lt;/h3&gt;
&lt;p&gt;The main part is ready. Minors methods, properties are in the lib in github. Link is &lt;a href=&quot;https://github.com/nguyentruongky/knOtpView&quot;&gt;https://github.com/nguyentruongky/knOtpView&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fotp%2Fotp_final.gif?alt=media&amp;amp;token=a60f523c-40ac-429d-9546-804344e27d1f&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Two years ago, I did a view for this purpose. Detail is on my github: https://github.com/nguyentruongky/ActiveCode.</summary></entry><entry><title type="html">Customize your UITabBarController</title><link href="http://localhost:4001/2018/04/15/TabController-TabBar.html" rel="alternate" type="text/html" title="Customize your UITabBarController" /><published>2018-04-15T00:00:00+07:00</published><updated>2018-04-15T00:00:00+07:00</updated><id>http://localhost:4001/2018/04/15/TabController-TabBar</id><content type="html" xml:base="http://localhost:4001/2018/04/15/TabController-TabBar.html">&lt;p&gt;From 2017, design trending has changed to tab bar, instead of slide menu. &lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt; has become one of the most popular controller. It’s very simple to use. But sometime, it’s too simple to customize and make attractive. Designers are artists, and they usually want tab bar like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2FtabController%2Fogenii.png?alt=media&amp;amp;token=033df77c-7adb-40a7-aca9-ad921efb4629&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;or like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2FtabController%2Fdoctor.png?alt=media&amp;amp;token=e5a38fff-eddf-4863-b2bb-b4e15fdef4d2&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I had to implement a tab bar like above in 2015. My implementation at that time was bad. I used a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; as a main controller, and added a custom view like a tab bar. And everytime a tab selected, embed the other &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; into the main controller. That’s not good option.&lt;/p&gt;

&lt;p&gt;Today I make a &lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt; with a custom view like a tab bar. With this solution, we can use the max strength of &lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt; with the same behavior and code. Much easier and better than my implementation before. Hope anyone can easily customize to their design if they want after this note.&lt;/p&gt;

&lt;h2 id=&quot;kntabbaritem&quot;&gt;knTabBarItem&lt;/h2&gt;
&lt;p&gt;First thing need to be customized is the &lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBarItem&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBarItem&lt;/code&gt; is not flexible enough to be customized to anything I want. I need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    class knTabBarItem: UIButton {
        // (1)
        var itemHeight: CGFloat = 0
        // (2)
        var lock = false
        // (3)
        var color: UIColor = UIColor.lightGray {
            didSet {
                guard lock == false else { return }
                iconImageView.change(color: color)
                textLabel.textColor = color
            }}
        
        // (4)
        private let iconImageView = knUIMaker.makeImageView(contentMode: .scaleAspectFit)
        private let textLabel = knUIMaker.makeLabel(font: UIFont.systemFont(ofSize: 11),
                                            color: .black, alignment: .center)
        
        convenience init(icon: UIImage, title: String,
                        font: UIFont = UIFont.systemFont(ofSize: 11)) {
            self.init()
            translatesAutoresizingMaskIntoConstraints = false
            iconImageView.image = icon
            textLabel.text = title
            textLabel.font = UIFont(name: font.fontName, size: 11)
            setupView()
        }
        
        // (5)
        private func setupView() {
            addSubviews(views: iconImageView, textLabel)
            iconImageView.top(toView: self, space: 4)
            iconImageView.centerX(toView: self)
            iconImageView.square()
            
            let iconBottomConstant: CGFloat = textLabel.text == &quot;&quot; ? -2 : -20
            iconImageView.bottom(toView: self, space: iconBottomConstant)
            
            textLabel.bottom(toView: self, space: -2)
            textLabel.centerX(toView: self)
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1): Some tab items can be bigger than others. I can easily set the height for them to make difference with others.&lt;/p&gt;

&lt;p&gt;(2) (3): Same to (1), some tab items are very unacceptional with different color and don’t change color when selected.&lt;/p&gt;

&lt;p&gt;(4): knUIMaker is my collection to make controls. Just easier to make UIButton, UIImageView, UILabel by code.&lt;/p&gt;

&lt;p&gt;(5): &lt;code class=&quot;highlighter-rouge&quot;&gt;addSubviews&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;centerX&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bottom&lt;/code&gt; are from my &lt;a href=&quot;https://github.com/nguyentruongky/knConstraints&quot;&gt;knConstraints&lt;/a&gt; to make auto layout. I’m a fan of auto layout programmatically, so make controls and set layouts by code is what to do hundreds of times everyday.&lt;/p&gt;

&lt;h2 id=&quot;kntabbar&quot;&gt;knTabBar&lt;/h2&gt;
&lt;p&gt;Next thing I have to focus on is &lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBar&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    class knTabBar: UITabBar {
        // (1)
        var kn_items = [knTabBarItem]()
        convenience init(items: [knTabBarItem]) {
            self.init()
            kn_items = items
            translatesAutoresizingMaskIntoConstraints = false
            setupView()
        }
        
        override var tintColor: UIColor! {
            didSet {
                for item in kn_items {
                    item.color = tintColor
                }}}
        
        func setupView() {
            backgroundColor = .white
            if kn_items.count == 0 { return }
            
            // (2)
            let line = knUIMaker.makeLine(color: .gray, height: 0.5)
            addSubviews(views: line)
            line.horizontal(toView: self)
            line.top(toView: self)
            
            // (3)
            var horizontalConstraints = &quot;H:|&quot;
            let itemWidth: CGFloat = screenWidth / CGFloat(kn_items.count)
            for i in 0 ..&amp;lt; kn_items.count {
                let item = kn_items[i]
                addSubviews(views: item)
                if item.itemHeight == 0 {
                    item.vertical(toView: self)
                }
                else {
                    item.bottom(toView: self)
                    item.height(item.itemHeight)
                }
                item.width(itemWidth)
                horizontalConstraints += String(format: &quot;[v%d]&quot;, i)
                if item.lock == false {
                    item.color = tintColor
                }
            }
            
            horizontalConstraints += &quot;|&quot;
            addConstraints(withFormat: horizontalConstraints, arrayOf: kn_items)
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1): I can’t override &lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBar&lt;/code&gt;, so I name it a little bit similar to easier to remember&lt;/p&gt;

&lt;p&gt;(2): Add a line to separate the tab bar to the controller. Some designs need indicator at the selected item, I will add indicator here.&lt;/p&gt;

&lt;p&gt;(3): Flexible to add items by programmatically. Thanks Apple for Auto Layout Programmatically.&lt;/p&gt;

&lt;h2 id=&quot;kntabcontroller&quot;&gt;knTabController&lt;/h2&gt;
&lt;p&gt;The easiest thing is here. Just inherit from &lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt;, add some code, and it works.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    class knTabController: UITabBarController {
        var kn_tabBar: knTabBar!
        var selectedColor = UIColor.darkGray
        var normalColor = UIColor.lightGray {
            didSet {
                kn_tabBar.tintColor = normalColor
            }}
        
        private var kn_tabBarHeight: CGFloat = 49
        override func viewDidLoad() {
            super.viewDidLoad()
            tabBar.isHidden = true
            setupView()
        }

        func setupView() {}
        
        private func setTabBar(items: [knTabBarItem], height: CGFloat = 49) {
            guard items.count &amp;gt; 0 else { return }
            
            kn_tabBar = knTabBar(items: items)
            guard let bar = kn_tabBar else { return }
            kn_tabBar.tintColor = normalColor
            bar.kn_items.first?.color = selectedColor
            
            view.addSubviews(views: bar)
            bar.horizontal(toView: view)
            bar.bottom(toView: view)
            kn_tabBarHeight = height
            bar.height(kn_tabBarHeight)
            for i in 0 ..&amp;lt; items.count {
                items[i].tag = i
                items[i].addTarget(self, action: #selector(switchTab))
            }
        }
        
        @objc func switchTab(button: UIButton) {
            selectedIndex = button.tag
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s ready for new tab bar. Just use it in a controller.&lt;/p&gt;

&lt;h2 id=&quot;how-to-use&quot;&gt;How to use?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Inherit class &lt;code class=&quot;highlighter-rouge&quot;&gt;knTabController&lt;/code&gt; to your controller.&lt;/li&gt;
  &lt;li&gt;Override &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt; method.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    class DoctorController: knTabController {
        override func setupView() {
            let home = knTabBarItem(icon: #imageLiteral(resourceName: &quot;home&quot;), title: &quot;Home&quot;)
            let appointment = knTabBarItem(icon: #imageLiteral(resourceName: &quot;appointment&quot;), title: &quot;Appointment&quot;)
            let add = knTabBarItem(icon: #imageLiteral(resourceName: &quot;add&quot;), title: &quot;&quot;)
            add.lock = true
            add.itemHeight = 66
            let doctors = knTabBarItem(icon: #imageLiteral(resourceName: &quot;doctors&quot;), title: &quot;Doctors&quot;)
            let porfolio = knTabBarItem(icon: #imageLiteral(resourceName: &quot;user&quot;), title: &quot;Porfolio&quot;)

            let red = UIViewController()
            red.view.backgroundColor = .red
            let green = UIViewController()
            green.view.backgroundColor = .green
            let blue = UIViewController()
            blue.view.backgroundColor = .white
            let yellow = UIViewController()
            yellow.view.backgroundColor = .yellow
            let gray = UIViewController()
            gray.view.backgroundColor = .gray

            setTabBar(items: [home, appointment, add, doctors, porfolio])
            viewControllers = [red, green, blue, yellow, gray]
            normalColor = .red
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Run and see. The main button (Hexagon Add) is locked, don’t change the color when selected.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2FtabController%2Fdoctor.gif?alt=media&amp;amp;token=27df3f84-5d39-499a-9205-43eaeea87515&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But it’s better if we have animation, looks much better.&lt;/p&gt;

&lt;h2 id=&quot;add-animation&quot;&gt;Add animation&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;knTabController&lt;/code&gt;, change method &lt;code class=&quot;highlighter-rouge&quot;&gt;switchTab&lt;/code&gt; content to&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    let newIndex = button.tag
    changeTab(from: selectedIndex, to: newIndex)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Add method &lt;code class=&quot;highlighter-rouge&quot;&gt;changeTab&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    private func changeTab(from fromIndex: Int, to toIndex: Int) {
        kn_tabBar.kn_items[fromIndex].color = normalColor
        kn_tabBar.kn_items[toIndex].color = selectedColor
        animateSliding(from: fromIndex, to: toIndex)
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;And result:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2FtabController%2Fdoctor_slide.gif?alt=media&amp;amp;token=2b1a56d8-aacf-4d51-924e-a44d6827a99d&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hope this can help anyone want to customize a tab bar can do it effortless. Code is &lt;a href=&quot;https://github.com/nguyentruongky/knTabController&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I will add some more animations and some properties to make it more convenience in very near future. Suggestions and feedbacks are welcome.&lt;/p&gt;

&lt;h3 id=&quot;notes&quot;&gt;Notes&lt;/h3&gt;
&lt;p&gt;I am a fan of Auto Layout Programmatically, so usually use my library, &lt;strong&gt;knConstraints&lt;/strong&gt; for setting constraints. &lt;strong&gt;knConstraints&lt;/strong&gt; is a very simple way to setup Auto Layout with very easy to read syntax. You can try it yourself &lt;a href=&quot;https://github.com/nguyentruongky/knConstraints&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">From 2017, design trending has changed to tab bar, instead of slide menu. UITabBarController has become one of the most popular controller. It’s very simple to use. But sometime, it’s too simple to customize and make attractive. Designers are artists, and they usually want tab bar like this</summary></entry><entry><title type="html">i18n from Server</title><link href="http://localhost:4001/2018/04/13/i18n-from-server.html" rel="alternate" type="text/html" title="i18n from Server" /><published>2018-04-13T00:00:00+07:00</published><updated>2018-04-13T00:00:00+07:00</updated><id>http://localhost:4001/2018/04/13/i18n-from-server</id><content type="html" xml:base="http://localhost:4001/2018/04/13/i18n-from-server.html">&lt;p&gt;I took a note about multi languages in iOs few days before. Multi languages can’t be finished from iOS/Android or Web only, but need help from server. Without support from server, users can face to messages in English while using Vietnamese, or notifications in Vietnamese, but app language is in English.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ogenii.com&quot;&gt;Ogenii&lt;/a&gt; is fully supported i18n from client to server. It’s not an easy task for me, because I’m just a newbie in backend. I believe this is not the best way to do but it’s a good way I can find and do at this time. Main idea is separation all texts to languages objects and get the values by the keys.&lt;/p&gt;

&lt;h3 id=&quot;move-all-texts-to-language-files&quot;&gt;Move all texts to language files&lt;/h3&gt;
&lt;p&gt;I support English and Vietnamese in &lt;a href=&quot;https://ogenii.com&quot;&gt;Ogenii&lt;/a&gt;, so I add 2 new files &lt;code class=&quot;highlighter-rouge&quot;&gt;en.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;vi.js&lt;/code&gt; and move texts to object &lt;code class=&quot;highlighter-rouge&quot;&gt;texts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;en.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    module.exports.texts = {
        err_401: &quot;Your login is expired. Login again and keep learning.&quot;,
        verification_sent: 'Your verification will be processed in 2-4 hours',
        clazz_created: &quot;Your class is created and under review. It'll be live soon.&quot;
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vi.js&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    module.exports.texts = {
        err_401: &quot;Phiên đăng nhập đã hết hạn. Đăng nhập lại và tiếp tục học thôi&quot;,
        verification_sent: 'Thông tin xác thực của bạn sẽ được xử lý xong trong 2 - 4 giờ tới',
        clazz_created: &quot;Lớp của bạn đã được tạo thành công và đang được xem xét. Lớp sẽ sớm online thôi&quot;
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;add-a-language-center-file&quot;&gt;Add a language center file&lt;/h3&gt;
&lt;p&gt;Don’t connect language files directly to others, I make a file as a center to connect all supported languages to other files and name it &lt;code class=&quot;highlighter-rouge&quot;&gt;LangCenter.js&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Import all supported languages to &lt;code class=&quot;highlighter-rouge&quot;&gt;LangCenter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    let En = require('./en')
    let Vi = require('./vi')

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add all language to an object like this. So don’t care how many languages will support.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    let supported_langs = {
        &quot;en&quot;: En, 
        &quot;vi&quot;: Vi
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add an object to contain all keys. The values of this object must be exactly &lt;strong&gt;same&lt;/strong&gt; to keys of object &lt;code class=&quot;highlighter-rouge&quot;&gt;texts&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;en.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;vi.js&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    module.exports.keys = {
        err_401: &quot;err_401&quot;,
        verification_sent: &quot;verification_sent&quot;,
        clazz_created: &quot;clazz_created&quot;
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add function to get a translated text from a key and requested language from client. By adding languages to object &lt;code class=&quot;highlighter-rouge&quot;&gt;supported_lang&lt;/code&gt;, we don’t need condition to get the requested language texts here, much easier.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    /**
    * @desc Get string by language
    * @param key of the text 
    * @param lang If param `lang` is a String, it's a language name. If it's an object, it is a request from client. param `lang` is in the request header. 
    * @return String in selected language
    */
    function getText(key, lang) {
        if (typeof lang !== 'string') {
            lang = lang.headers['lang']
        }
        let dict = supported_langs[lang].texts
        return dict[key]
    }
    module.exports.getText = getText

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay, it’s done for all messages from server. Any messages we need to send to client, just add to language files and &lt;code class=&quot;highlighter-rouge&quot;&gt;keys&lt;/code&gt; objects in &lt;code class=&quot;highlighter-rouge&quot;&gt;LangCenter.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is not fully supported yet. Notification still is 1 language only. I saved the notification content to database, and it can’t be dynamic for multi languages. I had to change. Just save elements to generate notification content only. Depend on elements, I can get text by language.&lt;/p&gt;

&lt;h3 id=&quot;generate-notification-content-by-language&quot;&gt;Generate Notification content by language&lt;/h3&gt;

&lt;p&gt;One example to generate message.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    /**
    * @desc Generate text to tell Master when Genius book his class
    * @desc Text structure: Genius `&amp;lt;genius_name&amp;gt;` has just booked your class `&amp;lt;clazz_title&amp;gt;`
    * @param data: `genius_name`, `clazz_title`
    * @param lang
    * @return Meaningful String
    */
    function getClazzBookedToMasterText(data, lang) {
        let booked = Lang.getText(LangCenter.keys.clazz_booked_to_master, lang)
        return `Genius ${data.genius_name} ${booked} ${data.clazz_title}`
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I make functions to generate messages, because I need these functions several times.&lt;/p&gt;

&lt;p&gt;NodeJS is not as strict as Swift, so that, I put lot of comments in my code, especially for params. It helps me easier to get back or fix bugs.&lt;/p&gt;

&lt;p&gt;Now, the code is 95% flexible for multi languages. Server now returns notification content by client requested language.&lt;/p&gt;

&lt;h3 id=&quot;multi-language-in-push-notification&quot;&gt;Multi language in push notification&lt;/h3&gt;

&lt;p&gt;Final step is push notification in multi language. Push notification is dynamic from server, when data meets some conditions. Genius books a class and server pushes notification to Master, for instance. No request from Master, so I don’t know the Master’s current language. I have to save user language to database and get it when push notification is needed. Then generate content by functions above and push to users.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That’s all I do with multi languages in Ogenii backend. It’s 98% flexible. There is one more edge case I have no solution at this time.  &lt;code class=&quot;highlighter-rouge&quot;&gt;User has multi devices, and in every device, he selects a different language.&lt;/code&gt; Hope I find solution to solve this edge case soon. Any suggestion to solve it, please drop me a message on Skype.&lt;/p&gt;

&lt;p&gt;Hope this can help.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">I took a note about multi languages in iOs few days before. Multi languages can’t be finished from iOS/Android or Web only, but need help from server. Without support from server, users can face to messages in English while using Vietnamese, or notifications in Vietnamese, but app language is in English.</summary></entry><entry><title type="html">Short note - Configure the development environments</title><link href="http://localhost:4001/2018/04/11/config-development-environment.html" rel="alternate" type="text/html" title="Short note - Configure the development environments" /><published>2018-04-11T00:00:00+07:00</published><updated>2018-04-11T00:00:00+07:00</updated><id>http://localhost:4001/2018/04/11/config-development-environment</id><content type="html" xml:base="http://localhost:4001/2018/04/11/config-development-environment.html">&lt;p&gt;My previous note is about configuration to release multi apps in the same project. I can use these configurations to build different enviroments for internal testing via Fabric, HockeyApp or TestFlight. For instance, production, staging and development have different icons, endpoint. Detail is &lt;a href=&quot;https://kynguyen.space/2018/04/07/user-define-setting-ios.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But in development, I usually connect devices to Macbook, build and run directly from Xcode, no need to switch scheme. We have 3 different environments in development: &lt;code class=&quot;highlighter-rouge&quot;&gt;production&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;staging&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;development&lt;/code&gt;. It means there are 3 endpoints. While coding, I have to switch to 3 of them very often, for coding or debugging for production.&lt;/p&gt;

&lt;p&gt;So I write some code to make it easier.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-`&quot;&gt;
    enum EndPoints: String {
        case dev = &quot;http://dev.kynguyen.space&quot;
        case pro = &quot;https://kynguyen.space&quot;
        case staging = &quot;http://staging.kynguyen.space&quot;
    }

    var baseUrl: String = {
        return EndPoints.pro.rawValue 
    }()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So everytime I need to change, I switch &lt;code class=&quot;highlighter-rouge&quot;&gt;baseUrl&lt;/code&gt; to EndPoints I need, very easy.&lt;/p&gt;

&lt;p&gt;But I usually forget to switch to production endpoint when release, even one time I pushed to TestFlight. So do one more step.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    var baseUrl: String = {
        #if DEBUG
            return EndPoints.dev.rawValue
        #else
            return EndPoints.pro.rawValue
        #endif
    }()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#if DEBUG ... #else&lt;/code&gt; is very useful for hard-coded values. Can be use widely in coding and testing.&lt;/p&gt;

&lt;p&gt;When switch environment, we need to logout the current account and sign in to another account to prevent unknown error, avoid wasting time for debug. It’s a damn experience with error like this.&lt;/p&gt;

&lt;p&gt;So I need to remember current enviroment to UserDefault.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    var currentUrl: EndPoint {
        get {
            if let url = UserDefaults.standard.value(forKeyPath: &quot;currentUrl&quot;) as? String,
                let environment = EndPoint(rawValue: url) {
                return environment
            }
            return EndPoint.dev
        }
        set {
            UserDefaults.standard.setValue(&quot;\(newValue)&quot;, forKeyPath: &quot;currentUrl&quot;)
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And check every time app runs. Show login if EndPoint is changed.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    var isNeedToLogout: Bool {
        if let baseUrl = EndPoint(rawValue: Setting.baseUrl),
            baseUrl == currentUrl { return false }
        return true
    }
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Just some basic tips but they save me much time in development.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">My previous note is about configuration to release multi apps in the same project. I can use these configurations to build different enviroments for internal testing via Fabric, HockeyApp or TestFlight. For instance, production, staging and development have different icons, endpoint. Detail is here.</summary></entry><entry><title type="html">Configuration and User-Defined setting in iOS</title><link href="http://localhost:4001/2018/04/07/user-define-setting-ios.html" rel="alternate" type="text/html" title="Configuration and User-Defined setting in iOS" /><published>2018-04-07T00:00:00+07:00</published><updated>2018-04-07T00:00:00+07:00</updated><id>http://localhost:4001/2018/04/07/user-define-setting-ios</id><content type="html" xml:base="http://localhost:4001/2018/04/07/user-define-setting-ios.html">&lt;p&gt;I ran into a challenge: support different countries with different app’s name, icon but same code. “Green” app is the original app, there is a need to convert the original “Green” app to another app with different properties, which in the demo is known as the “Red” app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fuser-defined-setting.gif?alt=media&amp;amp;token=9767c004-c1d6-4788-8ebc-0d9d0fc8c255&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cloning to different projects is not my solution. Did some research and finally, I did this solution. Use different Build Settings and Schemes for markets. This is how I did&lt;/p&gt;

&lt;h3 id=&quot;add-configurations&quot;&gt;Add configurations&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Access to Project Setting/Info. Rename configuration &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug_Red&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Release_Red&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Frename_configuration.png?alt=media&amp;amp;token=abe69701-38e7-4824-9f70-53e28d98627f&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Duplicate these 2 configurations and change name to &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug_Green&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Release_Green&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fduplicate_configuration.png?alt=media&amp;amp;token=38bcfbc7-1db0-441b-bb54-ecee23cee2f2&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;add-schemes&quot;&gt;Add Schemes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Select current scheme and &lt;code class=&quot;highlighter-rouge&quot;&gt;Edit Scheme...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fedit_scheme.png?alt=media&amp;amp;token=293dc583-d59a-4a8b-b1cb-8ddd627b6e72&quot; width=&quot;65%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Duplicate Scheme&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Manage Schemes...&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Select a scheme and press Return key to rename.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Frename_scheme.png?alt=media&amp;amp;token=e436ccc7-1416-4d22-aee4-7ee384d11388&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Double click to Scheme Red and check left hand side setting&lt;/li&gt;
  &lt;li&gt;Make sure &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Test&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Analyze&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug_Red&lt;/code&gt; configuration and &lt;code class=&quot;highlighter-rouge&quot;&gt;Profile&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;Release_Red&lt;/code&gt;. To change configuration, select &lt;code class=&quot;highlighter-rouge&quot;&gt;Info&lt;/code&gt; and change in &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Configuration&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fchange_scheme_setting.png?alt=media&amp;amp;token=4ba4f76f-1328-4c7e-899e-86e0f85daa76&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Same to Scheme Green&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;add-user-defined-setting&quot;&gt;Add User-Defined Setting&lt;/h3&gt;
&lt;p&gt;Red and Green have different name, bundle ID, version, build number. I have to add some User-Defined Setting&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Select Project setting/Editor/Add Build Setting/Add User-Defined&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fadd_setting_menu.png?alt=media&amp;amp;token=349c2c95-0e7b-44fa-8c35-0c40fe3bf923&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add some settings: &lt;code class=&quot;highlighter-rouge&quot;&gt;app_name&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle_id&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;version&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;build_number&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add value to new settings
&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fnew_setting.png?alt=media&amp;amp;token=eae822e1-389e-4de3-ac55-f531a1d11c22&quot; width=&quot;75%&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bind-user-defined-setting&quot;&gt;Bind User-Defined Setting&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;In Tab &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Setting&lt;/code&gt;, search &lt;code class=&quot;highlighter-rouge&quot;&gt;Product Bundle Identifier&lt;/code&gt; and enter value &lt;code class=&quot;highlighter-rouge&quot;&gt;$(bundle_id)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fapply_setting.png?alt=media&amp;amp;token=37fd8c6b-d86d-4728-818e-b68a66d40d14&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Select Tab &lt;code class=&quot;highlighter-rouge&quot;&gt;General&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Enter &lt;code class=&quot;highlighter-rouge&quot;&gt;$(app_name)&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Display Name&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$(version)&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Version&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$(build_number)&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Build&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Ffinish_apply_setting.png?alt=media&amp;amp;token=35d459c5-979c-42e7-a1df-21ba261fd80e&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;result&quot;&gt;Result&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Add some UILabel to Storyboard Main and connect outlets&lt;/li&gt;
  &lt;li&gt;Add some code to show setting of the running app.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    appNameLabel.text = Bundle.main.object(forInfoDictionaryKey: &quot;CFBundleDisplayName&quot;) as? String
    versionLabel.text = Bundle.main.infoDictionary?[&quot;CFBundleShortVersionString&quot;] as? String
    buildLabel.text = Bundle.main.infoDictionary?[&quot;CFBundleVersion&quot;] as? String
    bundleIdLabel.text = Bundle.main.bundleIdentifier

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;It works&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fred_first.png?alt=media&amp;amp;token=3fa4e33e-3c19-49cf-8cdf-cfe920f98265&quot; width=&quot;240px&quot; /&gt; &lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fgreen_first.png?alt=media&amp;amp;token=5293183b-716b-4a33-b4e4-147e90b51d4b&quot; width=&quot;240px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;other-setting&quot;&gt;Other setting&lt;/h3&gt;
&lt;p&gt;We can apply this solution to Launchscreen, App Icon by adding 2 Launchscreens, 2 App Icons with same name, just different suffix.&lt;/p&gt;

&lt;p&gt;We can set &lt;code class=&quot;highlighter-rouge&quot;&gt;Launchscreen&lt;/code&gt; same to &lt;code class=&quot;highlighter-rouge&quot;&gt;Display Name&lt;/code&gt; but App Icon needs to be configured same to &lt;code class=&quot;highlighter-rouge&quot;&gt;Product Bundle Identifier&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Besides that, we need to change font family, theme color, text color depend on App. Here how to do.&lt;/p&gt;

&lt;h3 id=&quot;configure-in-code&quot;&gt;Configure in code&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    protocol Configuration {
        var themeColor: UIColor { get set }
        var textColor: UIColor { get set }
    }

    struct RedConfiguration: Configuration {
        var themeColor = UIColor.red
        var textColor = UIColor.white
    }

    struct GreenConfiguration: Configuration {
        var themeColor: UIColor = UIColor.green
        var textColor = UIColor.blue
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my main setting class&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    let config: Configuration = {
        if let app = Bundle.main.object(forInfoDictionaryKey: &quot;CFBundleDisplayName&quot;) as? String {
            if app == &quot;Red&quot; {
                return RedConfiguration()
            }
            else {
                return GreenConfiguration()
            }
        }
        
        return RedConfiguration()
    }()
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;final&quot;&gt;Final&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fred_final.png?alt=media&amp;amp;token=5429f000-f157-419d-aad4-acc7bc3723a1&quot; width=&quot;240px&quot; /&gt; &lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fgreen_final.png?alt=media&amp;amp;token=616338fa-4bd4-4c2a-afaa-fb1aa41dd15a&quot; width=&quot;240px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My demo source is available on &lt;a href=&quot;https://github.com/nguyentruongky/User-Defined-Setting-iOS&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">I ran into a challenge: support different countries with different app’s name, icon but same code. “Green” app is the original app, there is a need to convert the original “Green” app to another app with different properties, which in the demo is known as the “Red” app.</summary></entry><entry><title type="html">Today I learn</title><link href="http://localhost:4001/2018/04/07/til-today-i-learn.html" rel="alternate" type="text/html" title="Today I learn" /><published>2018-04-07T00:00:00+07:00</published><updated>2018-04-07T00:00:00+07:00</updated><id>http://localhost:4001/2018/04/07/til-today-i-learn</id><content type="html" xml:base="http://localhost:4001/2018/04/07/til-today-i-learn.html">&lt;h1 id=&quot;04042018&quot;&gt;04/04/2018&lt;/h1&gt;

&lt;h3 id=&quot;how-to-remove-pod-in-ios-project&quot;&gt;How to remove pod in iOS project&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    sudo gem install cocoapods-deintegrate cocoapods-clean
    pod deintegrate
    pod clean
    rm Podfile
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;integrate-zendesk-sdk&quot;&gt;Integrate Zendesk SDK&lt;/h3&gt;

&lt;p&gt;Do not follow pod instruction from Zendesk tutorial, take too much time to fix but can’t run.&lt;/p&gt;

&lt;p&gt;Add SDK manual way: Add 2 more framework from iOS &lt;code class=&quot;highlighter-rouge&quot;&gt;MobileCoreServices.framework&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Security.framework.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Access to Tagets/General, add all Zendesk SDK files to Embedded Binaries.&lt;/p&gt;

&lt;h3 id=&quot;merge-unrelated-histories-in-git&quot;&gt;Merge unrelated histories in git&lt;/h3&gt;
&lt;p&gt;Usually have this issue when create new project in local, create repo in git then add remote url from git to local project.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull origin branch_name --allow-unrelated-histories&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;basic-authorization&quot;&gt;Basic Authorization&lt;/h3&gt;

&lt;p&gt;Learn from &lt;a href=&quot;https://gist.github.com/cmoulton/c26dc371d771c5cbaff325de6bbe5c77&quot;&gt;https://gist.github.com/cmoulton/c26dc371d771c5cbaff325de6bbe5c77&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    let userName = &quot;myUsername&quot;
    let password = &quot;myPassword&quot;
    let authString = userName + &quot;:&quot; + password
    let credentialData = authString.dataUsingEncoding(NSUTF8StringEncoding)!
    let base64Credentials = credentialData.base64EncodedStringWithOptions([])

    let headers = [&quot;Authorization&quot;: &quot;Basic &quot; + base64Credentials]
    let url = URL(string: api)!
    Alamofire.request(url, method: .post,
                    parameters: params,
                    encoding: JSONEncoding.default,
                    headers: headers)
        .validate().responseJSON { (response) in
        print(response)
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;05042018&quot;&gt;05/04/2018&lt;/h1&gt;
&lt;h3 id=&quot;format-string&quot;&gt;Format string&lt;/h3&gt;
&lt;p&gt;Always display 2 characters for Int: 09:10, 10:15&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String(format: &quot;%02d:%02d&quot;, hr, min)&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;06042018&quot;&gt;06/04/2018&lt;/h1&gt;
&lt;h3 id=&quot;open-setting-of-my-app&quot;&gt;Open setting of my app&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    
    if let url = URL(string: UIApplicationOpenSettingsURLString) {
        UIApplication.shared.openURL(url)
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;add-event-to-calendar&quot;&gt;Add event to calendar&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    struct ogeSystemCalendar {
        let eventStore = EKEventStore()
        func addEvent(title: String, startDate: Date,
                    endDate: Date, notes: String?) {
            eventStore.requestAccess(to: .event) { (granted, error) in
                if granted == false {
                    DispatchQueue.main.async {
                        self.tellNoPermission() }
                    return
                }
                
                self.addToCalendar(title: title, start: startDate,
                                end: endDate, notes: notes)
            }
        }
        
        private func tellNoPermission() {
            let alert = ogeMessage.showDialog(title: &quot;no_permission&quot;.i18n, description: &quot;no_calendar_permission&quot;.i18n)
            alert.addAction(PMAlertAction(title: &quot;OK&quot;, style: .default, action: {
                DispatchQueue.main.async { ogeSystemInteractor.openCalendar() }
            }))
            appDelegate.ogeniiManager?.present(alert)
        }
        
        private func addToCalendar(title: String, start startDate: Date,
                    end endDate: Date, notes: String?) {
            let event = EKEvent(eventStore: eventStore)
            event.title = title
            event.startDate = startDate
            event.endDate = endDate
            event.notes = notes
            event.calendar = eventStore.defaultCalendarForNewEvents
            do {
                try eventStore.save(event, span: .thisEvent)
                DispatchQueue.main.async {
                    ogeMessage.showMessage(&quot;saved_to_calendar&quot;.i18n) }
            } catch { }
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;07042018&quot;&gt;07/04/2018&lt;/h1&gt;

&lt;h3 id=&quot;make-app-icon-ios&quot;&gt;Make app icon iOS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://makeappicon.com/&quot;&gt;https://makeappicon.com/&lt;/a&gt; is a really wonderful tool. Just copy folder &lt;code class=&quot;highlighter-rouge&quot;&gt;AppIcon.appiconset&lt;/code&gt; and replace the old one in project and App Icon is set. Thanks a lot, awesome app.&lt;/p&gt;

&lt;h3 id=&quot;update-sql-by-removing-text-in-text&quot;&gt;Update SQL by removing text in text&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UPDATE My_Table set my_column = REPLACE(my_column, &quot;text_need_removed&quot;, '') where my_condition&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;error-in-git&quot;&gt;Error in git&lt;/h3&gt;
&lt;p&gt;Error: &lt;code class=&quot;highlighter-rouge&quot;&gt;The requested URL returned error: 403 while accessing&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Solution:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/config&lt;/code&gt; file under your repo directory&lt;/li&gt;
  &lt;li&gt;Find &lt;code class=&quot;highlighter-rouge&quot;&gt;url=&lt;/code&gt; entry under section &lt;code class=&quot;highlighter-rouge&quot;&gt;[remote &quot;origin&quot;]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Change all the texts before @ symbol to &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh://git&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Save&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://stackoverflow.com/questions/7438313/pushing-to-git-returning-error-code-403-fatal-http-request-failed&quot;&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;11042018&quot;&gt;11/04/2018&lt;/h1&gt;
&lt;h3 id=&quot;prevent-rotation-in-ios&quot;&gt;Prevent rotation in iOS&lt;/h3&gt;
&lt;p&gt;There are three kinds of Device orientation keys there in the info.plist now.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Supported interface orientations (iPad)&lt;/li&gt;
  &lt;li&gt;Supported interface orientations (iPhone)&lt;/li&gt;
  &lt;li&gt;Supported interface orientations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://stackoverflow.com/questions/10125050/can-you-disable-rotation-globally-in-an-ios-app&quot;&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;17042018&quot;&gt;17/04/2018&lt;/h1&gt;
&lt;h3 id=&quot;open-location-service&quot;&gt;Open Location service&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    if let url = URL(string: &quot;App-Prefs:root=Privacy&amp;amp;path=LOCATION&quot;) {
        UIApplication.shared.open(url, options: [:], completionHandler: nil)
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">04/04/2018</summary></entry><entry><title type="html">Hyperlink Label</title><link href="http://localhost:4001/2018/04/05/hyperlink-label.html" rel="alternate" type="text/html" title="Hyperlink Label" /><published>2018-04-05T00:00:00+07:00</published><updated>2018-04-05T00:00:00+07:00</updated><id>http://localhost:4001/2018/04/05/hyperlink-label</id><content type="html" xml:base="http://localhost:4001/2018/04/05/hyperlink-label.html">&lt;p&gt;Clickable Label is very popular in iOS, especially in Login, Register screen. You can easily see some text like this:&lt;/p&gt;

&lt;p&gt;By register, I agree to … &lt;strong&gt;Terms of Service&lt;/strong&gt; and &lt;strong&gt;Private Policy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is how I make this label.&lt;/p&gt;

&lt;h3 id=&quot;define-your-texts&quot;&gt;Define your texts&lt;/h3&gt;
&lt;p&gt;Make sure the text you need to make clickable is exacly same to the full text.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    let termText = &quot;By register, I agree to ... Terms of Service and Private Policy&quot;
    let term = &quot;Terms of Service&quot;
    let policy = &quot;Private Policy&quot;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;format-the-label&quot;&gt;Format the Label&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    let termLabel = UILabel()
    let formattedText = String.format(strings: [term, policy],
                                        boldFont: UIFont.boldSystemFont(ofSize: 15),
                                        boldColor: UIColor.blue,
                                        inString: termText,
                                        font: UIFont.systemFont(ofSize: 15),
                                        color: UIColor.black)
    termLabel.attributedText = formattedText
    termLabel.numberOfLines = 0
    let tap = UITapGestureRecognizer(target: self, action: #selector(handleTermTapped))
    termLabel.addGestureRecognizer(tap)
    termLabel.isUserInteractionEnabled = true
    termLabel.textAlignment = .center

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String.format&lt;/code&gt; is an extension from my code collection. This is the full function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    extension String {
        static func format(strings: [String],
                        boldFont: UIFont = UIFont.boldSystemFont(ofSize: 14),
                        boldColor: UIColor = UIColor.blue,
                        inString string: String,
                        font: UIFont = UIFont.systemFont(ofSize: 14),
                        color: UIColor = UIColor.black) -&amp;gt; NSAttributedString {
            let attributedString =
                NSMutableAttributedString(string: string,
                                        attributes: [
                                            NSAttributedStringKey.font: font,
                                            NSAttributedStringKey.foregroundColor: color])
            let boldFontAttribute = [NSAttributedStringKey.font: boldFont, NSAttributedStringKey.foregroundColor: boldColor]
            for bold in strings {
                attributedString.addAttributes(boldFontAttribute, range: (string as NSString).range(of: bold))
            }
            return attributedString
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;handle-label-tap-gesture&quot;&gt;Handle Label Tap Gesture&lt;/h3&gt;

&lt;p&gt;I get the tap location in the Label and check if this location belongs to term or policy text range.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    @objc func handleTermTapped(gesture: UITapGestureRecognizer) {
        let termString = termText as NSString
        let termRange = termString.range(of: term)
        let policyRange = termString.range(of: policy)
        
        let tapLocation = gesture.location(in: termLabel)
        let index = termLabel.indexOfAttributedTextCharacterAtPoint(point: tapLocation)
        
        if checkRange(termRange, contain: index) == true {
            handleViewTermOfUse()
            return
        }
        
        if checkRange(policyRange, contain: index) {
            handleViewPrivacy()
            return
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;supported-code&quot;&gt;Supported code&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Check if a range contain an index&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    func checkRange(_ range: NSRange, contain index: Int) -&amp;gt; Bool {
        return index &amp;gt; range.location &amp;amp;&amp;amp; index &amp;lt; range.location + range.length
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Get index from a point in UILabel&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    extension UILabel {
        func indexOfAttributedTextCharacterAtPoint(point: CGPoint) -&amp;gt; Int {
            assert(self.attributedText != nil, &quot;This method is developed for attributed string&quot;)
            let textStorage = NSTextStorage(attributedString: self.attributedText!)
            let layoutManager = NSLayoutManager()
            textStorage.addLayoutManager(layoutManager)
            let textContainer = NSTextContainer(size: self.frame.size)
            textContainer.lineFragmentPadding = 0
            textContainer.maximumNumberOfLines = self.numberOfLines
            textContainer.lineBreakMode = self.lineBreakMode
            layoutManager.addTextContainer(textContainer)
            
            let index = layoutManager.characterIndex(for: point, in: textContainer, fractionOfDistanceBetweenInsertionPoints: nil)
            return index
        }
    }
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;/h3&gt;

&lt;p&gt;And result is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fhyperlink-label%2Fterm_demo.gif?alt=media&amp;amp;token=9cd27012-8f3f-4d42-adfd-c6fd45df6857&quot; width=&quot;240px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Demo is &lt;a href=&quot;https://github.com/nguyentruongky/HyperlinkLabel&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Clickable Label is very popular in iOS, especially in Login, Register screen. You can easily see some text like this:</summary></entry><entry><title type="html">Thinking about Coinhako history screen</title><link href="http://localhost:4001/2018/03/29/coinhako-history-demo.html" rel="alternate" type="text/html" title="Thinking about Coinhako history screen" /><published>2018-03-29T00:00:00+07:00</published><updated>2018-03-29T00:00:00+07:00</updated><id>http://localhost:4001/2018/03/29/coinhako-history-demo</id><content type="html" xml:base="http://localhost:4001/2018/03/29/coinhako-history-demo.html">&lt;p&gt;Have just joined cryptocurrencies market and select &lt;a href=&quot;https://www.coinhako.com&quot;&gt;Coinhako&lt;/a&gt; as a wallet because of its simplicity. The UI is really simple for newcomers like me. But the UI make me feel excited, some screens are interesting to implement. If you’re new to crytocurrencies, you can try this app &lt;a href=&quot;https://itunes.apple.com/us/app/coinhako-wallet/id1137855704?mt=8&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I get design from designers, I think a lot about how to make it done. Have to pick good one. If pick wrong one, it takes lots of time to change. The history screen in this is one of screen I had to think a lot. Here what I thought and what I did.&lt;/p&gt;

&lt;p&gt;Screenshots from Coinhako app&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fmulti_screens_in_one%2Fmulti_screen_in_one_1.png?alt=media&amp;amp;token=3294c068-91f5-4f5b-89e5-8c6226e9ad85&quot; width=&quot;240px&quot; /&gt;
&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fmulti_screens_in_one%2Fmulti_screen_in_one_2.png?alt=media&amp;amp;token=8a2162c1-4c38-478b-ad21-8b272a63fd8a&quot; width=&quot;240px&quot; /&gt;
&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fmulti_screens_in_one%2Fmulti_screen_in_one_3.png?alt=media&amp;amp;token=cad07161-1c66-48eb-99ec-4e268e7198f7&quot; width=&quot;240px&quot; /&gt;
&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fmulti_screens_in_one%2Fmulti_screen_in_one_4.png?alt=media&amp;amp;token=425d0c31-48bd-4f61-8b8f-c48a368b647f&quot; width=&quot;240px&quot; /&gt;
&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fmulti_screens_in_one%2Fmulti_screen_in_one_5.png?alt=media&amp;amp;token=6b1818c3-e292-4f52-984b-371d9a8caf11&quot; width=&quot;240px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Display 2 lists of status: Pending transactions and Completed transactions. This can be done with a UITableView in a UIViewController.&lt;/li&gt;
  &lt;li&gt;There is filter, and filter result is a list of transaction, no matter what status. It looks like displayed in the same screen with 2 status lists before.&lt;/li&gt;
  &lt;li&gt;Every list has empty state.&lt;/li&gt;
  &lt;li&gt;Every list can load more if available.&lt;/li&gt;
  &lt;li&gt;Every list can reload when displayed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;my-thinking&quot;&gt;My thinking&lt;/h2&gt;
&lt;p&gt;First thinking is a UITableView in a UIViewController. There are 4 datasources, &lt;code class=&quot;highlighter-rouge&quot;&gt;pendingDatasource&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;completedDatasource&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filterDatasource&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mainDatasource&lt;/code&gt;. When user selects pending segment or completed segment or filter, app will update the correct datasource and &lt;code class=&quot;highlighter-rouge&quot;&gt;mainDatasource&lt;/code&gt; then reload UITableView. Empty state will be dislay if the selected datasource is empty. This can be the good solution. But I am concern about load more and reload. Very difficult to handle all of them to reload and load more.&lt;/p&gt;

&lt;p&gt;New thinking, make a custom view contain UITableView to display list, handle load data, reload, load more event, empty state inside the view. When user does any actions, add the view to UIViewController and remove the previous one. I will do this solution in my demo.&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fmulti_screens_in_one%2Fmulti_screen_in_one_demo.gif?alt=media&amp;amp;token=0efd1a87-910e-44b5-be56-31ac988b49e1&quot; width=&quot;320px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;create-project&quot;&gt;Create project&lt;/h3&gt;
&lt;p&gt;I am a big fan of Auto Layout Programatically, so that no Storyboard in my project. I added some libs for Auto Layout and some codebase.&lt;/p&gt;

&lt;p&gt;The demo has HistoryController and FilterController.&lt;/p&gt;

&lt;p&gt;HistoryController contains a UISegmentControl for status and a bar button to show filter. 
FilterController contains only UIButton to turn filter on/off.&lt;/p&gt;

&lt;p&gt;UI for controller is in &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;add-listview&quot;&gt;Add ListView&lt;/h3&gt;

&lt;p&gt;ListView is a base view for PendingView, CompletedView, FilterView. ListView contains a UITableView and conform UITableViewDelegate, UITableViewDataSource. ListView also handles load data or load more, status (empty, error, loading).&lt;/p&gt;

&lt;p&gt;This is just a simple demo, so I make a Datasource (fake data). In my regular projects, I will load data/load more by workers to handle request result and separate code for the View.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    class ListView: knView {
        let maxItemCount = 20
        
        let fakeData = Datasource()
        var currentPage = 0
        var canLoadMore = true 
        var datasource = [String]() { didSet { tableView.reloadData() }}
        
        lazy var tableView: UITableView = { [weak self] in
            let tb = UITableView()
            tb.translatesAutoresizingMaskIntoConstraints = false
            tb.separatorStyle = .none
            tb.showsVerticalScrollIndicator = false
            tb.dataSource = self
            tb.delegate = self
            tb.register(knTableCell.self, forCellReuseIdentifier: &quot;knTableCell&quot;)
            return tb
            }()
        
        override func setupView() {
            translatesAutoresizingMaskIntoConstraints = false
            addSubviews(views: tableView)
            tableView.fill(toView: self)
            backgroundColor = .white
        }
        
        func fetchMore() { }
        func fetchData() { }

        func checkLoadMoreAvailable(currentCount: Int) {
            canLoadMore = currentCount == maxItemCount
            currentPage += currentCount == maxItemCount ? 1 : 0
        }
    }

    extension ListView: UITableViewDelegate, UITableViewDataSource {
        func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int {
            return datasource.count }
        
        func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
            if indexPath.row == datasource.count - 1 {
                fetchMore()
            }
        }
        
        func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell {
            let cell = tableView.dequeueReusableCell(withIdentifier: &quot;knTableCell&quot;, for: indexPath) as! knTableCell
            cell.textLabel?.text = datasource[indexPath.row]
            return cell
        }
        
        func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -&amp;gt; CGFloat { return 66 }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;add-pendingview-completedview-filterview&quot;&gt;Add PendingView, CompletedView, FilterView&lt;/h3&gt;
&lt;p&gt;Add more 3 views and override &lt;code class=&quot;highlighter-rouge&quot;&gt;fetchData()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fetchMore()&lt;/code&gt;. Example for PendingView&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    class PendingView: ListView {
        override func fetchData() {
            let newData = fakeData.getPendingList(page: 0)
            checkLoadMoreAvailable(currentCount: newData.count)
            datasource = newData
        }
        
        override func fetchMore() {
            guard canLoadMore else { return }
            let newData = fakeData.getPendingList(page: currentPage)
            checkLoadMoreAvailable(currentCount: newData.count)
            datasource += newData
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;handle-logic&quot;&gt;Handle logic&lt;/h3&gt;
&lt;p&gt;In HistoryController, handle the add view and remove previous one by setting ListType.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    func showList(_ listType: ListType) {
        switch listType {
            case .pending:
                if pendingView.datasource.count == 0 {
                    pendingView.fetchData()
                }
                statusSegment.selectedSegmentIndex = 0
                view.addSubview(pendingView)
                pendingView.fill(toView: view, space: UIEdgeInsets(top: 16 * 2 + 44 + 84, left: 0, bottom: 0, right: 0))
                currentList?.removeFromParentView()
                currentList = pendingView
                
            case .completed:
                if completedView.datasource.count == 0 {
                    completedView.fetchData()
                }
                statusSegment.selectedSegmentIndex = 1
                view.addSubview(completedView)
                completedView.fill(toView: view, space: UIEdgeInsets(top: 16 * 2 + 44 + 84, left: 0, bottom: 0, right: 0))
                currentList?.removeFromParentView()
                currentList = completedView
                
            case .filter:
                view.addSubview(filterView)
                filterView.fill(toView: view, space: UIEdgeInsets(top: 66, left: 0, bottom: 0, right: 0))
                currentList?.removeFromParentView()
                currentList = filterView
        }
    }
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the most complicated portion in this demo. Other minor codes you can see in the sample on &lt;a href=&quot;https://github.com/nguyentruongky/MultiScreensInOneDemo&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Have just joined cryptocurrencies market and select Coinhako as a wallet because of its simplicity. The UI is really simple for newcomers like me. But the UI make me feel excited, some screens are interesting to implement. If you’re new to crytocurrencies, you can try this app here.</summary></entry><entry><title type="html">Different way to do multi languages in iOS</title><link href="http://localhost:4001/2018/03/29/different-way-i18n.html" rel="alternate" type="text/html" title="Different way to do multi languages in iOS" /><published>2018-03-29T00:00:00+07:00</published><updated>2018-03-29T00:00:00+07:00</updated><id>http://localhost:4001/2018/03/29/different-way-i18n</id><content type="html" xml:base="http://localhost:4001/2018/03/29/different-way-i18n.html">&lt;p&gt;Google about multi languages in iOS, I find some step-by-step tuts to do multi languages. That’s a good way, I did that 2 years ago. It shows me to use string files for multi languages.&lt;/p&gt;

&lt;p&gt;This note I want to take note about another way I found in my recent projects. I use plist files to save languages. Do it now.&lt;/p&gt;

&lt;h3 id=&quot;steps&quot;&gt;Steps&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;New project. Design UI like this, connect outlets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fi18n%2Fi18n_demo.png?alt=media&amp;amp;token=0e0a0ce4-103c-48fe-b8ef-f9f6c292c8e4&quot; width=&quot;350px&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Add 2 plist files, named Lang_en.plist, Lang_vi.plist&lt;/li&gt;
  &lt;li&gt;Add some codes for localization.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    class knI18n {
        static let shared = knI18n()
        
        private let knCurrentLanguageKey = &quot;knCurrentLanguageKey&quot;
        private let fileNameBase = &quot;Lang_&quot;
        lazy var localizableDictionary: NSDictionary! = self.getLanguageFile()
        func getLanguageFile() -&amp;gt; NSDictionary {
            let language = currentLanguage ?? &quot;en&quot;
            if let path = Bundle.main.path(forResource: fileNameBase + language, ofType: &quot;plist&quot;) {
                return NSDictionary(contentsOfFile: path)!
            }
            fatalError(&quot;Localizable file NOT found&quot;)
        }
        
        func localize(string: String) -&amp;gt; String {
            guard let localizedString = localizableDictionary.value(forKeyPath: string) as? String else { return string }
            return localizedString
        }
        
        func setLanguage(_ language: String) {
            currentLanguage = language
            localizableDictionary = getLanguageFile()
        }
        
        private var currentLanguage: String? {
            get { return UserDefaults.standard.value(forKeyPath: knCurrentLanguageKey) as? String }
            set { UserDefaults.standard.setValue(newValue, forKeyPath: knCurrentLanguageKey) }
        }
    }

    extension String {
        var i18n: String {
            return knI18n.shared.localize(string: self)
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hope code clean enough to understand. The main idea is to load the plist file into a dictionary and get the value for key I want to change language.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add some code into controller&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    @objc func handleChangeToEn() {
        knI18n.shared.setLanguage(&quot;en&quot;)
        refreshUI()
    }

    @objc func handleChangeToVi() {
        knI18n.shared.setLanguage(&quot;vi&quot;)
        refreshUI()
    }

    func refreshUI() {
        languageLabel.text = &quot;lang&quot;.i18n
        helloLabel.text = &quot;hello&quot;.i18n
        vietnameseButton.setTitle(&quot;change_vi&quot;.i18n, for: .normal)
        englishButton.setTitle(&quot;change_en&quot;.i18n, for: .normal)
    }
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Run the app, and try.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fi18n%2Ffinish_demo_i18n.gif?alt=media&amp;amp;token=4eda2910-d8c5-4de8-b257-100042c030f6&quot; width=&quot;320px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-advantages-in-this-way&quot;&gt;What is the advantages in this way?&lt;/h3&gt;

&lt;p&gt;First, I can easily add new text, without worries about key duplication. XCode will tell key exists, and I never to face to error on key duplication.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fi18n%2Fkey_exist.png?alt=media&amp;amp;token=3bb069ff-ca96-4885-9b52-9146232a1f3b&quot; width=&quot;350&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Second, no need to worry about &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; and the end of text. Once, I missed a &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; and faced to error, took me much time to fix. XCode was not kind enough to tell me this problem 2 years ago.&lt;/p&gt;

&lt;p&gt;Third, very easy to add new languages, just new plist files with name start with &lt;code class=&quot;highlighter-rouge&quot;&gt;Lang_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Minor note: XCode can be very slow anytime, so, I like to shorten the name to &lt;code class=&quot;highlighter-rouge&quot;&gt;i18n&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;knI18n&lt;/code&gt; to easier to type without suggestion.&lt;/p&gt;

&lt;h3 id=&quot;but-still-have-disadvantages-in-this-way&quot;&gt;But still have disadvantages in this way&lt;/h3&gt;

&lt;p&gt;I can’t send these plist files to translator, difficult for them to open and do their work. These attached files can help.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GenerateText&lt;/code&gt; is used to export text from language file to text, then I can easily send to translators.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GeneratePlist&lt;/code&gt; is used to convert translated text file to plist. And can import directly to project.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;How to use?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Put &lt;code class=&quot;highlighter-rouge&quot;&gt;GenerateText&lt;/code&gt; app in the same place with plist file, run Terminal at that folder, type &lt;code class=&quot;highlighter-rouge&quot;&gt;./GenerateText&lt;/code&gt;. New file text is generated and ready to send to translators.&lt;/p&gt;

&lt;p&gt;Put translated file in the same folder with &lt;code class=&quot;highlighter-rouge&quot;&gt;GeneratePlist&lt;/code&gt; app, type &lt;code class=&quot;highlighter-rouge&quot;&gt;./GeneratePlist&lt;/code&gt; in Terminal to generate new plist file.&lt;/p&gt;

&lt;p&gt;My app can backup your plist file before generate new one. But should backup manual will be more secure.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Hope this solution can help iOS developer work with i18n easier. Download project at &lt;a href=&quot;https://github.com/nguyentruongky/i18n_Demo&quot;&gt;https://github.com/nguyentruongky/i18n_Demo&lt;/a&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Google about multi languages in iOS, I find some step-by-step tuts to do multi languages. That’s a good way, I did that 2 years ago. It shows me to use string files for multi languages.</summary></entry></feed>