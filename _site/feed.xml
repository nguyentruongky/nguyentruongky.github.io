<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4001/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4001/" rel="alternate" type="text/html" /><updated>2018-04-09T01:40:49+07:00</updated><id>http://localhost:4001/</id><title type="html">&amp;lt; Code for life /&amp;gt;</title><subtitle>My personal notes, codes, reviews, ideas</subtitle><author><name>Ky Nguyen</name></author><entry><title type="html">Configuration and User-Defined setting in iOS</title><link href="http://localhost:4001/2018/04/07/user-define-setting-ios.html" rel="alternate" type="text/html" title="Configuration and User-Defined setting in iOS" /><published>2018-04-07T00:00:00+07:00</published><updated>2018-04-07T00:00:00+07:00</updated><id>http://localhost:4001/2018/04/07/user-define-setting-ios</id><content type="html" xml:base="http://localhost:4001/2018/04/07/user-define-setting-ios.html">&lt;p&gt;I ran into a challange: support different countries with different app’s names but same code. It means, when I release to Vietnam market, I have to change name to Red, release to Singapore, app’s name is Green. Color theme, text color, font family are different by country.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fuser-defined-setting.gif?alt=media&amp;amp;token=9767c004-c1d6-4788-8ebc-0d9d0fc8c255&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cloning to different projects is not my solution. I choose this solution. Every market has its own setting. Do it now.&lt;/p&gt;

&lt;h3 id=&quot;add-configurations&quot;&gt;Add configurations&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Access to Project Setting/Info. Rename configuration &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug_Red&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Release_Red&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Frename_configuration.png?alt=media&amp;amp;token=abe69701-38e7-4824-9f70-53e28d98627f&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Duplicate these 2 configurations and change name to &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug_Green&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Release_Green&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fduplicate_configuration.png?alt=media&amp;amp;token=38bcfbc7-1db0-441b-bb54-ecee23cee2f2&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;add-schemes&quot;&gt;Add Schemes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Select current scheme and &lt;code class=&quot;highlighter-rouge&quot;&gt;Edit Scheme...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fedit_scheme.png?alt=media&amp;amp;token=293dc583-d59a-4a8b-b1cb-8ddd627b6e72&quot; width=&quot;65%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Duplicate Scheme&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Manage Schemes...&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Select a scheme and press Return key to rename.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Frename_scheme.png?alt=media&amp;amp;token=e436ccc7-1416-4d22-aee4-7ee384d11388&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Double click to Scheme Red and check left hand side setting&lt;/li&gt;
  &lt;li&gt;Make sure &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Test&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Analyze&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug_Red&lt;/code&gt; configuration and &lt;code class=&quot;highlighter-rouge&quot;&gt;Profile&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;Release_Red&lt;/code&gt;. To change configuration, select &lt;code class=&quot;highlighter-rouge&quot;&gt;Info&lt;/code&gt; and change in &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Configuration&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fchange_scheme_setting.png?alt=media&amp;amp;token=4ba4f76f-1328-4c7e-899e-86e0f85daa76&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Same to Scheme Green&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;add-user-defined-setting&quot;&gt;Add User-Defined Setting&lt;/h3&gt;
&lt;p&gt;Red and Green have different name, bundle ID, version, build number. I have to add some User-Defined Setting&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Select Project setting/Editor/Add Build Setting/Add User-Defined&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fadd_setting_menu.png?alt=media&amp;amp;token=349c2c95-0e7b-44fa-8c35-0c40fe3bf923&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add some settings: &lt;code class=&quot;highlighter-rouge&quot;&gt;app_name&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle_id&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;version&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;build_number&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add value to new settings
&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fnew_setting.png?alt=media&amp;amp;token=eae822e1-389e-4de3-ac55-f531a1d11c22&quot; width=&quot;75%&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bind-user-defined-setting&quot;&gt;Bind User-Defined Setting&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;In Tab &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Setting&lt;/code&gt;, search &lt;code class=&quot;highlighter-rouge&quot;&gt;Product Bundle Identifier&lt;/code&gt; and enter value &lt;code class=&quot;highlighter-rouge&quot;&gt;$(bundle_id)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fapply_setting.png?alt=media&amp;amp;token=37fd8c6b-d86d-4728-818e-b68a66d40d14&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Select Tab &lt;code class=&quot;highlighter-rouge&quot;&gt;General&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Enter &lt;code class=&quot;highlighter-rouge&quot;&gt;$(app_name)&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Display Name&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$(version)&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Version&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$(build_number)&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Build&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Ffinish_apply_setting.png?alt=media&amp;amp;token=35d459c5-979c-42e7-a1df-21ba261fd80e&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;result&quot;&gt;Result&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Add some UILabel to Storyboard Main and connect outlets&lt;/li&gt;
  &lt;li&gt;Add some code to show setting of the running app.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;appNameLabel.text = Bundle.main.object(forInfoDictionaryKey: &quot;CFBundleDisplayName&quot;) as? String
versionLabel.text = Bundle.main.infoDictionary?[&quot;CFBundleShortVersionString&quot;] as? String
buildLabel.text = Bundle.main.infoDictionary?[&quot;CFBundleVersion&quot;] as? String
bundleIdLabel.text = Bundle.main.bundleIdentifier
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;It works&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fred_first.png?alt=media&amp;amp;token=3fa4e33e-3c19-49cf-8cdf-cfe920f98265&quot; width=&quot;240px&quot; /&gt; &lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fgreen_first.png?alt=media&amp;amp;token=5293183b-716b-4a33-b4e4-147e90b51d4b&quot; width=&quot;240px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;other-setting&quot;&gt;Other setting&lt;/h3&gt;
&lt;p&gt;We can apply this solution to Launchscreen, App Icon by adding 2 Launchscreens, 2 App Icons with same name, just different suffix.&lt;/p&gt;

&lt;p&gt;We can set &lt;code class=&quot;highlighter-rouge&quot;&gt;Launchscreen&lt;/code&gt; same to &lt;code class=&quot;highlighter-rouge&quot;&gt;Display Name&lt;/code&gt; but App Icon needs to be configured same to &lt;code class=&quot;highlighter-rouge&quot;&gt;Product Bundle Identifier&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Besides that, we need to change font family, theme color, text color depend on App. Here how to do.&lt;/p&gt;

&lt;h3 id=&quot;configure-in-code&quot;&gt;Configure in code&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protocol Configuration {
    var themeColor: UIColor { get set }
    var textColor: UIColor { get set }
}

struct RedConfiguration: Configuration {
    var themeColor = UIColor.red
    var textColor = UIColor.white
}

struct GreenConfiguration: Configuration {
    var themeColor: UIColor = UIColor.green
    var textColor = UIColor.blue
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my main setting class&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let config: Configuration = {
    if let app = Bundle.main.object(forInfoDictionaryKey: &quot;CFBundleDisplayName&quot;) as? String {
        if app == &quot;Red&quot; {
            return RedConfiguration()
        }
        else {
            return GreenConfiguration()
        }
    }
    
    return RedConfiguration()
}()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;final&quot;&gt;Final&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fred_final.png?alt=media&amp;amp;token=5429f000-f157-419d-aad4-acc7bc3723a1&quot; width=&quot;240px&quot; /&gt; &lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fuser-setting%2Fgreen_final.png?alt=media&amp;amp;token=616338fa-4bd4-4c2a-afaa-fb1aa41dd15a&quot; width=&quot;240px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My demo source is available on &lt;a href=&quot;https://github.com/nguyentruongky/User-Defined-Setting-iOS&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">I ran into a challange: support different countries with different app’s names but same code. It means, when I release to Vietnam market, I have to change name to Red, release to Singapore, app’s name is Green. Color theme, text color, font family are different by country.</summary></entry><entry><title type="html">Today I learn</title><link href="http://localhost:4001/2018/04/07/til-today-i-learn.html" rel="alternate" type="text/html" title="Today I learn" /><published>2018-04-07T00:00:00+07:00</published><updated>2018-04-07T00:00:00+07:00</updated><id>http://localhost:4001/2018/04/07/til-today-i-learn</id><content type="html" xml:base="http://localhost:4001/2018/04/07/til-today-i-learn.html">&lt;h1 id=&quot;04042018&quot;&gt;04/04/2018&lt;/h1&gt;

&lt;h3 id=&quot;how-to-remove-pod-in-ios-project&quot;&gt;How to remove pod in iOS project&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem install cocoapods-deintegrate cocoapods-clean
pod deintegrate
pod clean
rm Podfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;integrate-zendesk-sdk&quot;&gt;Integrate Zendesk SDK&lt;/h3&gt;

&lt;p&gt;Do not follow pod instruction from Zendesk tutorial, take too much time to fix but can’t run.&lt;/p&gt;

&lt;p&gt;Add SDK manual way: Add 2 more framework from iOS &lt;code class=&quot;highlighter-rouge&quot;&gt;MobileCoreServices.framework&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Security.framework.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Access to Tagets/General, add all Zendesk SDK files to Embedded Binaries.&lt;/p&gt;

&lt;h3 id=&quot;merge-unrelated-histories-in-git&quot;&gt;Merge unrelated histories in git&lt;/h3&gt;
&lt;p&gt;Usually have this issue when create new project in local, create repo in git then add remote url from git to local project.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull origin branch_name --allow-unrelated-histories&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;basic-authorization&quot;&gt;Basic Authorization&lt;/h3&gt;

&lt;p&gt;Learn from &lt;a href=&quot;https://gist.github.com/cmoulton/c26dc371d771c5cbaff325de6bbe5c77&quot;&gt;https://gist.github.com/cmoulton/c26dc371d771c5cbaff325de6bbe5c77&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let userName = &quot;myUsername&quot;
let password = &quot;myPassword&quot;
let authString = userName + &quot;:&quot; + password
let credentialData = authString.dataUsingEncoding(NSUTF8StringEncoding)!
let base64Credentials = credentialData.base64EncodedStringWithOptions([])

let headers = [&quot;Authorization&quot;: &quot;Basic &quot; + base64Credentials]
let url = URL(string: api)!
Alamofire.request(url, method: .post,
                parameters: params,
                encoding: JSONEncoding.default,
                headers: headers)
    .validate().responseJSON { (response) in
    print(response)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;05042018&quot;&gt;05/04/2018&lt;/h1&gt;
&lt;h3 id=&quot;format-string&quot;&gt;Format string&lt;/h3&gt;
&lt;p&gt;Always display 2 characters for Int: 09:10, 10:15&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String(format: &quot;%02d:%02d&quot;, hr, min)&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;06042018&quot;&gt;06/04/2018&lt;/h1&gt;
&lt;h3 id=&quot;open-setting-of-my-app&quot;&gt;Open setting of my app&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if let url = URL(string: UIApplicationOpenSettingsURLString) {
    UIApplication.shared.openURL(url)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;add-event-to-calendar&quot;&gt;Add event to calendar&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct ogeSystemCalendar {
    let eventStore = EKEventStore()
    func addEvent(title: String, startDate: Date,
                  endDate: Date, notes: String?) {
        eventStore.requestAccess(to: .event) { (granted, error) in
            if granted == false {
                DispatchQueue.main.async {
                    self.tellNoPermission() }
                return
            }
            
            self.addToCalendar(title: title, start: startDate,
                               end: endDate, notes: notes)
        }
    }
    
    private func tellNoPermission() {
        let alert = ogeMessage.showDialog(title: &quot;no_permission&quot;.i18n, description: &quot;no_calendar_permission&quot;.i18n)
        alert.addAction(PMAlertAction(title: &quot;OK&quot;, style: .default, action: {
            DispatchQueue.main.async { ogeSystemInteractor.openCalendar() }
        }))
        appDelegate.ogeniiManager?.present(alert)
    }
    
    private func addToCalendar(title: String, start startDate: Date,
                  end endDate: Date, notes: String?) {
        let event = EKEvent(eventStore: eventStore)
        event.title = title
        event.startDate = startDate
        event.endDate = endDate
        event.notes = notes
        event.calendar = eventStore.defaultCalendarForNewEvents
        do {
            try eventStore.save(event, span: .thisEvent)
            DispatchQueue.main.async {
                ogeMessage.showMessage(&quot;saved_to_calendar&quot;.i18n) }
        } catch { }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;07042018&quot;&gt;07/04/2018&lt;/h1&gt;

&lt;h3 id=&quot;make-app-icon-ios&quot;&gt;Make app icon iOS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://makeappicon.com/&quot;&gt;https://makeappicon.com/&lt;/a&gt; is a really wonderful tool. Just copy folder &lt;code class=&quot;highlighter-rouge&quot;&gt;AppIcon.appiconset&lt;/code&gt; and replace the old one in project and App Icon is set. Thanks a lot, awesome app.&lt;/p&gt;

&lt;h3 id=&quot;update-sql-by-removing-text-in-text&quot;&gt;Update SQL by removing text in text&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UPDATE My_Table set my_column = REPLACE(my_column, &quot;text_need_removed&quot;, '') where my_condition&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;error-in-git&quot;&gt;Error in git&lt;/h3&gt;
&lt;p&gt;Error: &lt;code class=&quot;highlighter-rouge&quot;&gt;The requested URL returned error: 403 while accessing&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Solution:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/config&lt;/code&gt; file under your repo directory&lt;/li&gt;
  &lt;li&gt;Find &lt;code class=&quot;highlighter-rouge&quot;&gt;url=&lt;/code&gt; entry under section &lt;code class=&quot;highlighter-rouge&quot;&gt;[remote &quot;origin&quot;]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Change all the texts before @ symbol to &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh://git&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Save&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://stackoverflow.com/questions/7438313/pushing-to-git-returning-error-code-403-fatal-http-request-failed&quot;&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">04/04/2018</summary></entry><entry><title type="html">Hyperlink Label</title><link href="http://localhost:4001/2018/04/05/hyperlink-label.html" rel="alternate" type="text/html" title="Hyperlink Label" /><published>2018-04-05T00:00:00+07:00</published><updated>2018-04-05T00:00:00+07:00</updated><id>http://localhost:4001/2018/04/05/hyperlink-label</id><content type="html" xml:base="http://localhost:4001/2018/04/05/hyperlink-label.html">&lt;p&gt;Clickable Label is very popular in iOS, especially in Login, Register screen. You can easily see some text like this:&lt;/p&gt;

&lt;p&gt;By register, I agree to … &lt;strong&gt;Terms of Service&lt;/strong&gt; and &lt;strong&gt;Private Policy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is how I make this label.&lt;/p&gt;

&lt;h3 id=&quot;define-your-texts&quot;&gt;Define your texts&lt;/h3&gt;
&lt;p&gt;Make sure the text you need to make clickable is exacly same to the full text.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let termText = &quot;By register, I agree to ... Terms of Service and Private Policy&quot;
let term = &quot;Terms of Service&quot;
let policy = &quot;Private Policy&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;format-the-label&quot;&gt;Format the Label&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let termLabel = UILabel()
let formattedText = String.format(strings: [term, policy],
                                    boldFont: UIFont.boldSystemFont(ofSize: 15),
                                    boldColor: UIColor.blue,
                                    inString: termText,
                                    font: UIFont.systemFont(ofSize: 15),
                                    color: UIColor.black)
termLabel.attributedText = formattedText
termLabel.numberOfLines = 0
let tap = UITapGestureRecognizer(target: self, action: #selector(handleTermTapped))
termLabel.addGestureRecognizer(tap)
termLabel.isUserInteractionEnabled = true
termLabel.textAlignment = .center
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String.format&lt;/code&gt; is an extension from my code collection. This is the full function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension String {
    static func format(strings: [String],
                       boldFont: UIFont = UIFont.boldSystemFont(ofSize: 14),
                       boldColor: UIColor = UIColor.blue,
                       inString string: String,
                       font: UIFont = UIFont.systemFont(ofSize: 14),
                       color: UIColor = UIColor.black) -&amp;gt; NSAttributedString {
        let attributedString =
            NSMutableAttributedString(string: string,
                                      attributes: [
                                        NSAttributedStringKey.font: font,
                                        NSAttributedStringKey.foregroundColor: color])
        let boldFontAttribute = [NSAttributedStringKey.font: boldFont, NSAttributedStringKey.foregroundColor: boldColor]
        for bold in strings {
            attributedString.addAttributes(boldFontAttribute, range: (string as NSString).range(of: bold))
        }
        return attributedString
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;handle-label-tap-gesture&quot;&gt;Handle Label Tap Gesture&lt;/h3&gt;

&lt;p&gt;I get the tap location in the Label and check if this location belongs to term or policy text range.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@objc func handleTermTapped(gesture: UITapGestureRecognizer) {
    let termString = termText as NSString
    let termRange = termString.range(of: term)
    let policyRange = termString.range(of: policy)
    
    let tapLocation = gesture.location(in: termLabel)
    let index = termLabel.indexOfAttributedTextCharacterAtPoint(point: tapLocation)
    
    if checkRange(termRange, contain: index) == true {
        handleViewTermOfUse()
        return
    }
    
    if checkRange(policyRange, contain: index) {
        handleViewPrivacy()
        return
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;supported-code&quot;&gt;Supported code&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Check if a range contain an index
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func checkRange(_ range: NSRange, contain index: Int) -&amp;gt; Bool {
  return index &amp;gt; range.location &amp;amp;&amp;amp; index &amp;lt; range.location + range.length
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Get index from a point in UILabel
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension UILabel {
  func indexOfAttributedTextCharacterAtPoint(point: CGPoint) -&amp;gt; Int {
      assert(self.attributedText != nil, &quot;This method is developed for attributed string&quot;)
      let textStorage = NSTextStorage(attributedString: self.attributedText!)
      let layoutManager = NSLayoutManager()
      textStorage.addLayoutManager(layoutManager)
      let textContainer = NSTextContainer(size: self.frame.size)
      textContainer.lineFragmentPadding = 0
      textContainer.maximumNumberOfLines = self.numberOfLines
      textContainer.lineBreakMode = self.lineBreakMode
      layoutManager.addTextContainer(textContainer)
        
      let index = layoutManager.characterIndex(for: point, in: textContainer, fractionOfDistanceBetweenInsertionPoints: nil)
      return index
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;/h3&gt;

&lt;p&gt;And result is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fhyperlink-label%2Fterm_demo.gif?alt=media&amp;amp;token=9cd27012-8f3f-4d42-adfd-c6fd45df6857&quot; width=&quot;240px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Demo is &lt;a href=&quot;https://github.com/nguyentruongky/HyperlinkLabel&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Clickable Label is very popular in iOS, especially in Login, Register screen. You can easily see some text like this:</summary></entry><entry><title type="html">Thinking about Coinhako history screen</title><link href="http://localhost:4001/2018/03/29/coinhako-history-demo.html" rel="alternate" type="text/html" title="Thinking about Coinhako history screen" /><published>2018-03-29T00:00:00+07:00</published><updated>2018-03-29T00:00:00+07:00</updated><id>http://localhost:4001/2018/03/29/coinhako-history-demo</id><content type="html" xml:base="http://localhost:4001/2018/03/29/coinhako-history-demo.html">&lt;p&gt;Have just joined cryptocurrencies market and select &lt;a href=&quot;https://www.coinhako.com&quot;&gt;Coinhako&lt;/a&gt; as a wallet because of its simplicity. The UI is really simple for newcomers like me. But the UI make me feel excited, some screens are interesting to implement. If you’re new to crytocurrencies, you can try this app &lt;a href=&quot;https://itunes.apple.com/us/app/coinhako-wallet/id1137855704?mt=8&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I get design from designers, I think a lot about how to make it done. Have to pick good one. If pick wrong one, it takes lots of time to change. The history screen in this is one of screen I had to think a lot. Here what I thought and what I did.&lt;/p&gt;

&lt;p&gt;Screenshots from Coinhako app&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fmulti_screens_in_one%2Fmulti_screen_in_one_1.png?alt=media&amp;amp;token=3294c068-91f5-4f5b-89e5-8c6226e9ad85&quot; width=&quot;240px&quot; /&gt;
&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fmulti_screens_in_one%2Fmulti_screen_in_one_2.png?alt=media&amp;amp;token=8a2162c1-4c38-478b-ad21-8b272a63fd8a&quot; width=&quot;240px&quot; /&gt;
&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fmulti_screens_in_one%2Fmulti_screen_in_one_3.png?alt=media&amp;amp;token=cad07161-1c66-48eb-99ec-4e268e7198f7&quot; width=&quot;240px&quot; /&gt;
&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fmulti_screens_in_one%2Fmulti_screen_in_one_4.png?alt=media&amp;amp;token=425d0c31-48bd-4f61-8b8f-c48a368b647f&quot; width=&quot;240px&quot; /&gt;
&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fmulti_screens_in_one%2Fmulti_screen_in_one_5.png?alt=media&amp;amp;token=6b1818c3-e292-4f52-984b-371d9a8caf11&quot; width=&quot;240px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Display 2 lists of status: Pending transactions and Completed transactions. This can be done with a UITableView in a UIViewController.&lt;/li&gt;
  &lt;li&gt;There is filter, and filter result is a list of transaction, no matter what status. It looks like displayed in the same screen with 2 status lists before.&lt;/li&gt;
  &lt;li&gt;Every list has empty state.&lt;/li&gt;
  &lt;li&gt;Every list can load more if available.&lt;/li&gt;
  &lt;li&gt;Every list can reload when displayed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;my-thinking&quot;&gt;My thinking&lt;/h2&gt;
&lt;p&gt;First thinking is a UITableView in a UIViewController. There are 4 datasources, &lt;code class=&quot;highlighter-rouge&quot;&gt;pendingDatasource&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;completedDatasource&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filterDatasource&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mainDatasource&lt;/code&gt;. When user selects pending segment or completed segment or filter, app will update the correct datasource and &lt;code class=&quot;highlighter-rouge&quot;&gt;mainDatasource&lt;/code&gt; then reload UITableView. Empty state will be dislay if the selected datasource is empty. This can be the good solution. But I am concern about load more and reload. Very difficult to handle all of them to reload and load more.&lt;/p&gt;

&lt;p&gt;New thinking, make a custom view contain UITableView to display list, handle load data, reload, load more event, empty state inside the view. When user does any actions, add the view to UIViewController and remove the previous one. I will do this solution in my demo.&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fmulti_screens_in_one%2Fmulti_screen_in_one_demo.gif?alt=media&amp;amp;token=0efd1a87-910e-44b5-be56-31ac988b49e1&quot; width=&quot;320px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;create-project&quot;&gt;Create project&lt;/h3&gt;
&lt;p&gt;I am a big fan of Auto Layout Programatically, so that no Storyboard in my project. I added some libs for Auto Layout and some codebase.&lt;/p&gt;

&lt;p&gt;The demo has HistoryController and FilterController.&lt;/p&gt;

&lt;p&gt;HistoryController contains a UISegmentControl for status and a bar button to show filter. 
FilterController contains only UIButton to turn filter on/off.&lt;/p&gt;

&lt;p&gt;UI for controller is in &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;add-listview&quot;&gt;Add ListView&lt;/h3&gt;

&lt;p&gt;ListView is a base view for PendingView, CompletedView, FilterView. ListView contains a UITableView and conform UITableViewDelegate, UITableViewDataSource. ListView also handles load data or load more, status (empty, error, loading).&lt;/p&gt;

&lt;p&gt;This is just a simple demo, so I make a Datasource (fake data). In my regular projects, I will load data/load more by workers to handle request result and separate code for the View.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ListView: knView {
    let maxItemCount = 20
    
    let fakeData = Datasource()
    var currentPage = 0
    var canLoadMore = true 
    var datasource = [String]() { didSet { tableView.reloadData() }}
    
    lazy var tableView: UITableView = { [weak self] in
        let tb = UITableView()
        tb.translatesAutoresizingMaskIntoConstraints = false
        tb.separatorStyle = .none
        tb.showsVerticalScrollIndicator = false
        tb.dataSource = self
        tb.delegate = self
        tb.register(knTableCell.self, forCellReuseIdentifier: &quot;knTableCell&quot;)
        return tb
        }()
    
    override func setupView() {
        translatesAutoresizingMaskIntoConstraints = false
        addSubviews(views: tableView)
        tableView.fill(toView: self)
        backgroundColor = .white
    }
    
    func fetchMore() { }
    func fetchData() { }

    func checkLoadMoreAvailable(currentCount: Int) {
        canLoadMore = currentCount == maxItemCount
        currentPage += currentCount == maxItemCount ? 1 : 0
    }
}


extension ListView: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int {
        return datasource.count }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if indexPath.row == datasource.count - 1 {
            fetchMore()
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: &quot;knTableCell&quot;, for: indexPath) as! knTableCell
        cell.textLabel?.text = datasource[indexPath.row]
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -&amp;gt; CGFloat { return 66 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;add-pendingview-completedview-filterview&quot;&gt;Add PendingView, CompletedView, FilterView&lt;/h3&gt;
&lt;p&gt;Add more 3 views and override &lt;code class=&quot;highlighter-rouge&quot;&gt;fetchData()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fetchMore()&lt;/code&gt;. Example for PendingView&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class PendingView: ListView {
    override func fetchData() {
        let newData = fakeData.getPendingList(page: 0)
        checkLoadMoreAvailable(currentCount: newData.count)
        datasource = newData
    }
    
    override func fetchMore() {
        guard canLoadMore else { return }
        let newData = fakeData.getPendingList(page: currentPage)
        checkLoadMoreAvailable(currentCount: newData.count)
        datasource += newData
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;handle-logic&quot;&gt;Handle logic&lt;/h3&gt;
&lt;p&gt;In HistoryController, handle the add view and remove previous one by setting ListType.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func showList(_ listType: ListType) {
    switch listType {
        case .pending:
            if pendingView.datasource.count == 0 {
                pendingView.fetchData()
            }
            statusSegment.selectedSegmentIndex = 0
            view.addSubview(pendingView)
            pendingView.fill(toView: view, space: UIEdgeInsets(top: 16 * 2 + 44 + 84, left: 0, bottom: 0, right: 0))
            currentList?.removeFromParentView()
            currentList = pendingView
            
        case .completed:
            if completedView.datasource.count == 0 {
                completedView.fetchData()
            }
            statusSegment.selectedSegmentIndex = 1
            view.addSubview(completedView)
            completedView.fill(toView: view, space: UIEdgeInsets(top: 16 * 2 + 44 + 84, left: 0, bottom: 0, right: 0))
            currentList?.removeFromParentView()
            currentList = completedView
            
        case .filter:
            view.addSubview(filterView)
            filterView.fill(toView: view, space: UIEdgeInsets(top: 66, left: 0, bottom: 0, right: 0))
            currentList?.removeFromParentView()
            currentList = filterView
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the most complicated portion in this demo. Other minor codes you can see in the sample on &lt;a href=&quot;https://github.com/nguyentruongky/MultiScreensInOneDemo&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Have just joined cryptocurrencies market and select Coinhako as a wallet because of its simplicity. The UI is really simple for newcomers like me. But the UI make me feel excited, some screens are interesting to implement. If you’re new to crytocurrencies, you can try this app here.</summary></entry><entry><title type="html">Different way to do multi languages in iOS</title><link href="http://localhost:4001/2018/03/29/different-way-i18n.html" rel="alternate" type="text/html" title="Different way to do multi languages in iOS" /><published>2018-03-29T00:00:00+07:00</published><updated>2018-03-29T00:00:00+07:00</updated><id>http://localhost:4001/2018/03/29/different-way-i18n</id><content type="html" xml:base="http://localhost:4001/2018/03/29/different-way-i18n.html">&lt;p&gt;Google about multi languages in iOS, I find some step-by-step tuts to do multi languages. That’s a good way, I did that 2 years ago. It shows me to use string files for multi languages.&lt;/p&gt;

&lt;p&gt;This note I want to take note about another way I found in my recent projects. I use plist files to save languages. Do it now.&lt;/p&gt;

&lt;h3 id=&quot;steps&quot;&gt;Steps&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;New project. Design UI like this, connect outlets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fi18n_demo.png?alt=media&amp;amp;token=f1ee2869-5c17-4401-ab2a-124be93b4d7f&quot; width=&quot;350px&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Add 2 plist files, named Lang_en.plist, Lang_vi.plist&lt;/li&gt;
  &lt;li&gt;Add some codes for localization.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class knI18n {
    static let shared = knI18n()
    
    private let knCurrentLanguageKey = &quot;knCurrentLanguageKey&quot;
    private let fileNameBase = &quot;Lang_&quot;
    lazy var localizableDictionary: NSDictionary! = self.getLanguageFile()
    func getLanguageFile() -&amp;gt; NSDictionary {
        let language = currentLanguage ?? &quot;en&quot;
        if let path = Bundle.main.path(forResource: fileNameBase + language, ofType: &quot;plist&quot;) {
            return NSDictionary(contentsOfFile: path)!
        }
        fatalError(&quot;Localizable file NOT found&quot;)
    }
    
    func localize(string: String) -&amp;gt; String {
        guard let localizedString = localizableDictionary.value(forKeyPath: string) as? String else { return string }
        return localizedString
    }
    
    func setLanguage(_ language: String) {
        currentLanguage = language
        localizableDictionary = getLanguageFile()
    }
    
    private var currentLanguage: String? {
        get { return UserDefaults.standard.value(forKeyPath: knCurrentLanguageKey) as? String }
        set { UserDefaults.standard.setValue(newValue, forKeyPath: knCurrentLanguageKey) }
    }
}

extension String {
    var i18n: String {
        return knI18n.shared.localize(string: self)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hope code clean enough to understand. The main idea is to load the plist file into a dictionary and get the value for key I want to change language.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add some code into controller&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@objc func handleChangeToEn() {
    knI18n.shared.setLanguage(&quot;en&quot;)
    refreshUI()
}

@objc func handleChangeToVi() {
    knI18n.shared.setLanguage(&quot;vi&quot;)
    refreshUI()
}

func refreshUI() {
    languageLabel.text = &quot;lang&quot;.i18n
    helloLabel.text = &quot;hello&quot;.i18n
    vietnameseButton.setTitle(&quot;change_vi&quot;.i18n, for: .normal)
    englishButton.setTitle(&quot;change_en&quot;.i18n, for: .normal)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Run the app, and try.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Ffinish_demo_i18n.gif?alt=media&amp;amp;token=cfc52b0b-7b74-4195-b9b9-f8b4e6c76461&quot; width=&quot;320px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-advantages-in-this-way&quot;&gt;What is the advantages in this way?&lt;/h3&gt;

&lt;p&gt;First, I can easily add new text, without worries about key duplication. XCode will tell key exists, and I never to face to error on key duplication.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fkey_exist.png?alt=media&amp;amp;token=937931c6-4480-4891-8f57-8fdb98d0db45&quot; width=&quot;350&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Second, no need to worry about &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; and the end of text. Once, I missed a &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; and faced to error, took me much time to fix. XCode was not kind enough to tell me this problem 2 years ago.&lt;/p&gt;

&lt;p&gt;Third, very easy to add new languages, just new plist files with name start with &lt;code class=&quot;highlighter-rouge&quot;&gt;Lang_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Minor note: XCode can be very slow anytime, so, I like to shorten the name to &lt;code class=&quot;highlighter-rouge&quot;&gt;i18n&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;knI18n&lt;/code&gt; to easier to type without suggestion.&lt;/p&gt;

&lt;h3 id=&quot;but-still-have-disadvantages-in-this-way&quot;&gt;But still have disadvantages in this way&lt;/h3&gt;

&lt;p&gt;I can’t send these plist files to translator, difficult for them to open and do their work. These attached files can help.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GenerateText&lt;/code&gt; is used to export text from language file to text, then I can easily send to translators.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GeneratePlist&lt;/code&gt; is used to convert translated text file to plist. And can import directly to project.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;How to use?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Put &lt;code class=&quot;highlighter-rouge&quot;&gt;GenerateText&lt;/code&gt; app in the same place with plist file, run Terminal at that folder, type &lt;code class=&quot;highlighter-rouge&quot;&gt;./GenerateText&lt;/code&gt;. New file text is generated and ready to send to translators.&lt;/p&gt;

&lt;p&gt;Put translated file in the same folder with &lt;code class=&quot;highlighter-rouge&quot;&gt;GeneratePlist&lt;/code&gt; app, type &lt;code class=&quot;highlighter-rouge&quot;&gt;./GeneratePlist&lt;/code&gt; in Terminal to generate new plist file.&lt;/p&gt;

&lt;p&gt;My app can backup your plist file before generate new one. But should backup manual will be more secure.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Hope this solution can help iOS developer work with i18n easier. Download project at &lt;a href=&quot;https://github.com/nguyentruongky/i18n_Demo&quot;&gt;https://github.com/nguyentruongky/i18n_Demo&lt;/a&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Google about multi languages in iOS, I find some step-by-step tuts to do multi languages. That’s a good way, I did that 2 years ago. It shows me to use string files for multi languages.</summary></entry><entry><title type="html">UITableViewController vs UIViewController + UITableView</title><link href="http://localhost:4001/2017/10/12/UITableViewController-vs-UIViewController.html" rel="alternate" type="text/html" title="UITableViewController vs UIViewController + UITableView" /><published>2017-10-12T00:00:00+07:00</published><updated>2017-10-12T00:00:00+07:00</updated><id>http://localhost:4001/2017/10/12/UITableViewController-vs-UIViewController</id><content type="html" xml:base="http://localhost:4001/2017/10/12/UITableViewController-vs-UIViewController.html">&lt;p&gt;Have you ever used &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewController&lt;/code&gt;? Have you ever used &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController and UITableView&lt;/code&gt;? What are the differences between these two solutions? What are good practice for them? This note is a quick compare about UITableViewController and &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController + UITableView&lt;/code&gt;. I will call the &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController + UITableView&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;Free TableView&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;uitableviewcontroller&quot;&gt;UITableViewController&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewController&lt;/code&gt; is a UIViewController. Its view is a UITableView, can’t change constraints. You can’t add view into &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt;, without a cell.&lt;/p&gt;
&lt;h4 id=&quot;advantages&quot;&gt;Advantages&lt;/h4&gt;
&lt;p&gt;It’s good at handling text field become first responder. &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewController&lt;/code&gt; will automatically move contentOffset to the current active text field. 
Good practice for chat log screen, form screen. 
Accept static table view: very easy and fast to design form with Storyboard&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2FUITableViewController_demo.gif?alt=media&amp;amp;token=38ba3d36-a2e1-428d-9eb8-873811278776&quot; width=&quot;240px&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;/h4&gt;
&lt;p&gt;It’s bad for state view (empty state, loading state, error state). Can’t display state view by adding to view. You can do that by adding to tableHeaderView or tableFooterView, but you have to handle much things. 
It’s bad for sticked top or bottom view.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Ffooter_sticked.jpeg?alt=media&amp;amp;token=9aa2b05e-3e08-43ba-9ebc-a617f0dce5ce&quot; width=&quot;240px&quot; /&gt; &lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fheader_sticked.png?alt=media&amp;amp;token=33755b92-a998-4350-9f35-53623c0f6fce&quot; width=&quot;240px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Can’t inherit from BaseController. You have a BaseController with many setting inside, such as, stateView, loadData, setupUI, etc… and you can’t inherit that with &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewController&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;free-tableview&quot;&gt;Free TableView&lt;/h3&gt;
&lt;p&gt;Free TableView is a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; and add a &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt; into the view. You can easily set constraints for &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;advantages-1&quot;&gt;Advantages&lt;/h4&gt;
&lt;p&gt;Very flexible. You can show/hide the tableView, set padding for tableView. 
Good for state display. In the demo, I show an empty state is a green UIView, at the center of the screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Ftableview_empty_state.gif?alt=media&amp;amp;token=0d79ce30-5071-4c93-a68f-046518cbf833&quot; width=&quot;240px&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;disadvantages-1&quot;&gt;Disadvantages&lt;/h4&gt;
&lt;p&gt;Not accept static table view. I have a trick for this: use Dynamic table view, but datasource is a collection of &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableCell&lt;/code&gt;. 
But it will not automatically adjust when the textfield activate. We need lib to help us take care of it. I suggest this lib from Håkon Bogen (download at &lt;a href=&quot;https://github.com/haaakon/SingleLineKeyboardResize/blob/master/UIViewController%2BKeyboard.swift&quot;&gt;Github&lt;/a&gt;). Really good lib.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Ftableview_wrong_keyboard.gif?alt=media&amp;amp;token=242a50e8-db70-40f6-bab9-10bb5a303bdd&quot; width=&quot;240px&quot; /&gt; &lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Ftableview_right_keyboard.gif?alt=media&amp;amp;token=5576301e-bcc6-46dd-a6c1-4b1784a00c35&quot; width=&quot;240px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;explain-for-demo&quot;&gt;Explain for demo&lt;/h3&gt;
&lt;p&gt;I have a demo for this. Download &lt;a href=&quot;https://github.com/nguyentruongky/TableViewController-vs-FreeTableView&quot;&gt;here&lt;/a&gt;. Some code in demo I need to tell you.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;knController&lt;/code&gt; is UIViewController. I made my own controller to manage building UI by code.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;knCustomTableController&lt;/code&gt; is Free TableView&lt;/li&gt;
  &lt;li&gt;Some functions like &lt;code class=&quot;highlighter-rouge&quot;&gt;horizontal:toView:space&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fill:toView:space&lt;/code&gt; are my Auto Layout Libs, called &lt;a href=&quot;https://github.com/nguyentruongky/knConstraints&quot;&gt;knContrainsts&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Empty state in demo is just a green UIView. I don’t want to add more code to make it more complicated.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Free TableView&lt;/code&gt; has disadvantages but can be solved easily. This solution is much more flexible and easier to manage. But &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewController&lt;/code&gt; still has good practice which can’t replace by &lt;code class=&quot;highlighter-rouge&quot;&gt;Free TableView&lt;/code&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Have you ever used UITableViewController? Have you ever used UIViewController and UITableView? What are the differences between these two solutions? What are good practice for them? This note is a quick compare about UITableViewController and UIViewController + UITableView. I will call the UIViewController + UITableView is Free TableView</summary></entry><entry><title type="html">Make the Most of Your 24 Hours</title><link href="http://localhost:4001/2017/04/28/most-of-24-hours.html" rel="alternate" type="text/html" title="Make the Most of Your 24 Hours" /><published>2017-04-28T00:00:00+07:00</published><updated>2017-04-28T00:00:00+07:00</updated><id>http://localhost:4001/2017/04/28/most-of-24-hours</id><content type="html" xml:base="http://localhost:4001/2017/04/28/most-of-24-hours.html">&lt;h2 id=&quot;bitter-experience&quot;&gt;Bitter Experience&lt;/h2&gt;
&lt;p&gt;I started iOS as a 2-year-experience .NET developer. The salary range for a junior iOS dev is a little bit lower than the amount for a 2-year-experience develop get. I wanted to make myself stronger, earn more experience. I had a misconception of working and learning. I thought, freelance projects will help me strengthen my knowledge and experience. So I tried to get as more as possible freelance projects. And my nightmare started from here.&lt;/p&gt;

&lt;p&gt;I had no time to spend with my family, no time to work on personal improvement, no time to go out with friends, no time at all. All of my time was used up on my freelance work from coding new features, fixing bugs and much more. I was killing myself working odd hours and missing out on quality time with my family and friends.&lt;/p&gt;

&lt;p&gt;I made a mess, uncountable technical debts, bugs, with the project. I was angry with everyone and myself. And the company project was affected. I brought more bugs there, dozens of stupid bugs, critical bugs.&lt;/p&gt;

&lt;p&gt;Finally, after lots of stress situations, I found a way to get myself out of these nightmares.&lt;/p&gt;

&lt;h2 id=&quot;why-necessary-for-you&quot;&gt;Why necessary for you?&lt;/h2&gt;
&lt;p&gt;You’re developer, and you understand clearly about the pressure in development. I’m sure you want to get some freelance projects to earn more money. So, you should try my solution to manage your time effectively.&lt;/p&gt;

&lt;p&gt;You’re developer, and you have to work OT. Too many tasks you have and you have no enough time for work. No time for family, no time for your life, no time at all. My solution can help you get out of your situation.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;This solution is about how to change the way I work, how to manage time effectively. It’s absolutely right for me, and helps me out of the shit situations, boost my career, make my life better. Is it good to try yourself?&lt;/p&gt;

&lt;p&gt;This solution has 2 parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Life skills: something you need to change in your life, how you work, how you enjoy your life…&lt;/li&gt;
  &lt;li&gt;Tech skills: 4 tips for iOS developers to work faster, better, and save time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;life-skills---switch-up-working-hours&quot;&gt;Life Skills - Switch Up Working Hours&lt;/h3&gt;

&lt;p&gt;You have to spend at least 8 hours a day for working at your office. The manager says, “We have no time, we have to work OT”. Yes, it’s a extremely bad solution. Your brain, your body is drained. And now, you force it work more hard. Do you really think you can work effectively after 8 hours working? No, you don’t. You know, your colleagues know, but the manager doesn’t know.&lt;/p&gt;

&lt;p&gt;It’s too hard to decline working OT, but you should do. You have to do unless you make more bugs and everything is worse.&lt;/p&gt;

&lt;p&gt;One time, I had to work until 8.30 pm, without dinner, just some instance noodle. Went home, went to bed and 11.30pm, got a call.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“What the hell are you doing? Something is wrong with the promotion”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OK, turned my Macbook on and worked like a dead guy.&lt;/p&gt;

&lt;p&gt;Many times like that, and the project had shit quality. I can’t believe I can do but, but I did, no choice.&lt;/p&gt;

&lt;h4 id=&quot;what-is-the-better-solution&quot;&gt;What is the better solution?&lt;/h4&gt;

&lt;p&gt;The firs thing in my solution, is to switch up working hours. I decline all OT and try to work better, work more in my ideal time to finish more tasks or fix more bugs.&lt;/p&gt;

&lt;p&gt;The ideal time for working, for me, is 2am after 3 to 4 hours of sleeping, maybe different from you. This time is ideal because everything is quiet and there are absolutely no distractions. No phone calls, no email, no one bothers you. For me, this is the best time to get my creative juices flowing.&lt;/p&gt;

&lt;p&gt;It’s exactly same to freelance projects. You can achieve better results than work after office time.&lt;/p&gt;

&lt;p&gt;It’s hard to start at all, but try it yourself and experience amazing results.&lt;/p&gt;

&lt;h3 id=&quot;life-skills---keep-up-health&quot;&gt;Life Skills - Keep Up Health&lt;/h3&gt;

&lt;p&gt;Most importantly, a healthy body is the key to reach success. I have to work 8 hours everyday in an office and an additional 4-6 hours on freelance projects. If you do the math, my body has to work 1.5 times more than usual. Crazy, right? For most people, their body and mind will become exhausted very quickly with a schedule like this. In order for me to prevent myself from becoming ill, I make a conscious effort to include additional nutrition in my meals with more fruits, protein, etc.&lt;/p&gt;

&lt;p&gt;In additional to a healthy diet, it’s important to stay active.I try to incorporate a little bit of exercise into my daily activities. For example, I use the stairs instead of the elevator, I try to walk faster, clean the floor manually, and more. Now, I know these types of activities won’t help me become an athlete, but every little bit helps to keep my health up.&lt;/p&gt;

&lt;p&gt;You can make more evil bugs when you’re not healthy. And you waste double time to fix what you did when you’re not healthy. So, keep up your health and make good things for your code.&lt;/p&gt;

&lt;h3 id=&quot;life-skills---change-your-mindset&quot;&gt;Life Skills - Change Your Mindset&lt;/h3&gt;

&lt;p&gt;Freelance projects are very good for expanding your experience. You have many projects to fill into your CV. You can earn more money. It’s great. But they’re not good to your knowledge. Freelance projects are useful when you have strong experience and want to strengthen them. But it’s a bad choice for learning because of pressure.&lt;/p&gt;

&lt;p&gt;When you’re in a freelance projects, you have many pressure about time limit, money, client attitude… And you just want to make it done, not want to understand how it work and how to make it better. It’s harmful for you. You think you have experience with it, CoreData for instance, and you apply for new projects with CoreData require. You run into a big bugs and take lots of time to understand to fix that.&lt;/p&gt;

&lt;p&gt;Side projects are better choice. You can research new technologies, try new hot things in new iOS, SiriKit, HealthKit for instance. Don’t forget to publish some side projects. They can help you to show off for your clients or your interviewer.&lt;/p&gt;

&lt;p&gt;You also practice or strengthen your weakness in iOS with side projects. With these projects, you learn a lot and be confident to apply new projects.&lt;/p&gt;

&lt;p&gt;Don’t think about money first, think about yourself, Make yourself better and money comes.&lt;/p&gt;

&lt;h3 id=&quot;tech-skills---code-snippets&quot;&gt;Tech skills - Code Snippets&lt;/h3&gt;

&lt;p&gt;Code Snippets is your template codes. You don’t want to type all the code or copy it from somewhere. Just type some first characters and select it from suggestion list. For instance, I usually type “button”, and XCode will give me this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nguyentruongky/Photos_storage/master/save_coding_time_ios/Button_Snippet.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Easy, right? You don’t want to type boring code anymore.&lt;/p&gt;

&lt;p&gt;Don’t forget use &amp;lt;# and #&amp;gt; with the placeholder text in the middle. Go ahead—try typing that into Xcode, and watch as the text between the octothorp tags magically transforms right in front of your eyes.&lt;/p&gt;

&lt;p&gt;You can try my snippets at &lt;a href=&quot;https://github.com/nguyentruongky/iOS_snippets&quot;&gt;&lt;/a&gt; by copy and paste to &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/Developer/Xcode/UserData/CodeSnippets/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Small things but very useful.&lt;/p&gt;

&lt;h3 id=&quot;tech-skills---knowledge-base&quot;&gt;Tech skills - Knowledge base&lt;/h3&gt;

&lt;p&gt;It works like an external library, nearly same to Pods but in free way.&lt;/p&gt;

&lt;p&gt;Situation like this. You finished a cool animation in company project. It’s really cool and you want to use it in your current freelance project. You copy this code to the freelance project, change something and let it work like a charm. But, you find something can be better in this code. You make changes, and want this change be applied in the company project. You copy this code again. Imagine you have more 2 projects, use this animation. It’s a nightmare.&lt;/p&gt;

&lt;p&gt;Knowledge base is good choice for you. Create your own knowledge base in Github, clone to your projects. Add new features, change some if needed. Push to Github and pull it from other projects. All your projects can get the latest update easily. Cool, right?&lt;/p&gt;

&lt;h4 id=&quot;some-notices-you-should-know&quot;&gt;Some notices you should know&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Clone your knowledge base to every project to avoid some unpredictable situations. Some changes in this project can make consequence to others projects, and it takes you lots of time to find out the cause.&lt;/li&gt;
  &lt;li&gt;Add your knowledge base to .gitignore. Without this step, you will commit your changes into Github with an unrelated commit message. Or you can make some unexpected commit and your knowledge base become a mess.&lt;/li&gt;
  &lt;li&gt;Run test for your code and make sure it works good before commit.&lt;/li&gt;
  &lt;li&gt;Should use &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;to manage your base.
    &lt;h4 id=&quot;why-dont-i-create-a-pods&quot;&gt;Why don’t I create a Pods?&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because CocoaPods need to release on Github. But these pieces of code change continuously, new code, new update, remove redundant code.&lt;/p&gt;

&lt;h3 id=&quot;tech-skills---auto-layout-programmatically&quot;&gt;Tech skills - Auto Layout programmatically&lt;/h3&gt;
&lt;p&gt;This is a popular war for many iOS developers. Storyboard fans think this is stupid thing. Programmatically guys fight for their belief.&lt;/p&gt;

&lt;p&gt;This is opinion from a developer can’t live without Storyboard, and now he abandons it. It’s me :)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Auto Layout programmatically saves your time and your life.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;how-can-it-help-to-save-time&quot;&gt;How can it help to save time?&lt;/h4&gt;

&lt;p&gt;My situation is a good example. I designed a very good UI, and connected outlet, started logic coding, finished that feature. One day, I had to refactor code and found some improvement. Some &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; had gestures, should be changed to &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;. No problem, made changes. What did I do?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Find the &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; need change&lt;/li&gt;
  &lt;li&gt;Delete one by one.&lt;/li&gt;
  &lt;li&gt;Add new &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Connect new outlets&lt;/li&gt;
  &lt;li&gt;Setup Auto Layout constraints. (This is most painful step, dozens of constraints need setup)&lt;/li&gt;
  &lt;li&gt;Find and change many things in code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And when I changed to Auto Layout programmatically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Find the &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; need change&lt;/li&gt;
  &lt;li&gt;Change &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Find and change many things in code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Easier a lot, right? Especially, no change in setting up constraints.&lt;/p&gt;

&lt;p&gt;Another advantage is to customize controls with Auto Layout programmatically. You can make any custom controls with programmatically, but you can’t do that with Storyboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nguyentruongky/Photos_storage/master/Auto_Layout_Programmatically/Custom_Control.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you use Storyboard (I mean Xib file), you can make a view, and copy 2 files, &lt;code class=&quot;highlighter-rouge&quot;&gt;NewTextField.xib&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;NewTextField.swift&lt;/code&gt;to your knowledge base. And you want to change it name to &lt;code class=&quot;highlighter-rouge&quot;&gt;MyAwesomeTextField&lt;/code&gt;, you have to change 4 times, the 2 files’ name, class’ name, and the subclass’ name in xib. Never happen in Programmatically.&lt;/p&gt;

&lt;h4 id=&quot;some-libraries-you-can-try&quot;&gt;Some libraries you can try&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/SnapKit/SnapKit&quot;&gt;SnapKit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/freshOS/Stevia&quot;&gt;Stevia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/roberthein/TinyConstraints&quot;&gt;TinyConstraints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And my favorite library is &lt;a href=&quot;https://github.com/nguyentruongky/knConstraints&quot;&gt;knConstraints&lt;/a&gt;, a project learned style from TinyConstraints, developed with a new syntax and more advantages.&lt;/p&gt;

&lt;h3 id=&quot;tech-skills---vip-architecture&quot;&gt;Tech skills - VIP architecture&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fclean_swift.png?alt=media&amp;amp;token=ba4d79bc-9ea2-49f7-af54-c8def001c631&quot; /&gt;&lt;/p&gt;

&lt;p&gt;VIP Architecture is a complex topic. You should view the talk about it at https://github.com/swift-vietnam/iOS-Awesome-Starter-Kit&lt;/p&gt;

&lt;p&gt;In my post, I only talk about how to use it quickly.&lt;/p&gt;

&lt;p&gt;My example code shows you how to select a photo for profile image. You can do it easily in another way. But in this way, you can easier manage your code and reuse it anywhere.&lt;/p&gt;

&lt;p&gt;Move on step by step&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In your controller, define new variable &lt;code class=&quot;highlighter-rouge&quot;&gt;var output : SampleControllerOutput?&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;New file and add below code:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// (1) - Define actions controller needs in protocol SampleControllerOutput

protocol SampleControllerOutput: class {
    /* action from controller */
    func getProfile()
}

// (2) - Define actions to respond to result in protocol 'SampleInteractorOutput'. For instance: requestSuccess, updateView...

protocol SampleInteractorOutput: class {
    func getProfileSuccess(profile: UserProfile)        
    func getProfileFail(err: Error)
}

// (3) - Conform actions from 'SampleControllerOutput' in 'extension SampleInteractor'

extension SampleInteractor: SampleControllerOutput {
    func getProfile() {
        GGetProfileWorker(id: id,
                         successResponse: output?.fetchProfileSuccess,
                         failResponse: output?.fetchProfileFail)
            .execute()
    }
}

// (4) - Conform actions from 'SampleInteractorOutput'

extension SamplePresenter: SampleInteractorOutput {
    func getProfileFail(err: Error) {
        output?.showGetProfileFailError(err: err)
    }
    func getProfileSuccess(profile: UserProfile) {
        output?.showUserProfile(profile: profile)
    }
}

// (5) - Define actions to update directly to UI to 'SamplePresenterOutput'

protocol SamplePresenterOutput: class {
    func showUserProfile(profile: UserProfile)
    func showGetProfileFailError(err: Error)
}

// (6) - Update UI

extension SampleController: SamplePresenterOutput {
    func showGetProfileFailError(err: Error) { }
    
    func showUserProfile(profile: UserProfile) {
        // update view
    }
}

/* (7) - It's set up. Don't need to care about it. */

class SampleInteractor {
    var output: SampleInteractorOutput?
}

class SamplePresenter {
    weak var output: SamplePresenterOutput?
}

//MARK: Configuration
class SampleConfiguration /* called in viewDidLoad */ {
    static let shared = SampleConfiguration()
    func configure(viewController: SampleController) {
        
        // Presenter
        let presenter = SamplePresenter()
        presenter.output = viewController
        
        // Interactor
        let interactor = SampleInteractor()
        interactor.output = presenter
        
        // View controller
        viewController.output = interactor
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(1) - You define actions your controller need to do. For example: getProfile, updateProfile, viewDetail…&lt;/p&gt;

&lt;p&gt;(2) - Define what happen when the actions from controller finish. For example: getProfileSuccess, getProfileFail…&lt;/p&gt;

&lt;p&gt;(3) - This is the execute space. Conform the actions you defined for controller before, and let worker execute the action.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How does the worker look like?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct GetUserProfile {
    private let api = &quot;/workshops/&quot;
    var id: Int
    var successResponse: ((_ something: UserProfile) -&amp;gt; Void)? = nil
    var failResponse: ((_ error: Error) -&amp;gt; Void)? = nil
    func execute() {
        // connect to server
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(4) - Response to result will be here. You should change the model data to new data, which can easily set to your view. For example, change Date to String, so that you just set to your view, no need to convert Date to String in your controller.&lt;/p&gt;

&lt;p&gt;(5), (6) - Actions to update to controller.&lt;/p&gt;

&lt;p&gt;(7) - These code is ready to use. It’s always same for other controllers. You just need to change the prefix name, &lt;code class=&quot;highlighter-rouge&quot;&gt;Sample&lt;/code&gt; to your feature name.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How to use?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In your controller, &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt;, call &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleConfiguration.shared.config&lt;/code&gt;. And call &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt; to do your actions.&lt;/p&gt;

&lt;p&gt;This solution saves much time for me. I hope it can help you. Save time, work better and enjoy your life.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Bitter Experience I started iOS as a 2-year-experience .NET developer. The salary range for a junior iOS dev is a little bit lower than the amount for a 2-year-experience develop get. I wanted to make myself stronger, earn more experience. I had a misconception of working and learning. I thought, freelance projects will help me strengthen my knowledge and experience. So I tried to get as more as possible freelance projects. And my nightmare started from here.</summary></entry><entry><title type="html">Auto Layout with Storyboard and Programmatically</title><link href="http://localhost:4001/2017/04/25/auto-layout.html" rel="alternate" type="text/html" title="Auto Layout with Storyboard and Programmatically" /><published>2017-04-25T00:00:00+07:00</published><updated>2017-04-25T00:00:00+07:00</updated><id>http://localhost:4001/2017/04/25/auto-layout</id><content type="html" xml:base="http://localhost:4001/2017/04/25/auto-layout.html">&lt;p&gt;I started iOS development as a .NET developer. My first impression, Storyboard is really really interesting. 80% UI of my apps is built in Storyboard. I can’t imagine how I can develop iOS without Storyboard.&lt;/p&gt;

&lt;p&gt;There are many discussions about Auto Layout with Storyboard or Programmatically is better. But no one wins. Everyone has own reason and belief.&lt;/p&gt;

&lt;p&gt;This post is my personal opinion. It’s written by a developer can’t live without Storyboard, and now he abandons it.&lt;/p&gt;

&lt;p&gt;3 reasons why he changed to Auto Layout by programmatically.&lt;/p&gt;

&lt;h2 id=&quot;why-do-i-abandon-storyboard&quot;&gt;Why do I abandon Storyboard?&lt;/h2&gt;

&lt;h3 id=&quot;1-too-many-steps-to-changes&quot;&gt;1. Too many steps to changes&lt;/h3&gt;
&lt;p&gt;I designed a very good UI, and connected outlet, started logic coding, finished that feature. One day, I had to refactor code and found some improvement. Some &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; had gestures, should be changed to &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;. No problem, made changes. What did I do?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Found the &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; need change&lt;/li&gt;
    &lt;li&gt;Delete one by one.&lt;/li&gt;
    &lt;li&gt;Add new &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Connect new outlets&lt;/li&gt;
    &lt;li&gt;Setup Auto Layout constraints. (This is most painful step, dozens of constraints need setup)&lt;/li&gt;
    &lt;li&gt;Find and change many things in code&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;And when I changed to Auto Layout programmatically:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Found the &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; need change&lt;/li&gt;
    &lt;li&gt;Change &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Find and change many things in code&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Easier a lot, right? Especially, no change in setting up constraints.&lt;/p&gt;

&lt;h3 id=&quot;2-open-storyboard-is-a-pain-in-the-ass&quot;&gt;2. Open Storyboard is a pain in the ass&lt;/h3&gt;
&lt;p&gt;My first project had a huge Storyboard, all-in-one. More than &lt;strong&gt;30 Controllers&lt;/strong&gt; were in &lt;strong&gt;1 Storyboard file&lt;/strong&gt;. It’s a nightmare. Anytime I opened it, change the &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;’s textColor, and committed. 99% had conflicts. Fix conflicts in XML is another nightmare.&lt;/p&gt;

&lt;p&gt;Thanks God, some experienced developers tell about split it up. A Storyboard should contain 3 to 5 Controllers, not more. It should be splitted up as features, for instance, &lt;code class=&quot;highlighter-rouge&quot;&gt;Membership&lt;/code&gt; Storyboard contains &lt;code class=&quot;highlighter-rouge&quot;&gt;Landing&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Register&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Login&lt;/code&gt; Controllers, or &lt;code class=&quot;highlighter-rouge&quot;&gt;Password&lt;/code&gt; Controller contains &lt;code class=&quot;highlighter-rouge&quot;&gt;ForgotPassword&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Confirmation&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NewPassword&lt;/code&gt; Controllers. It’s a big improvement and save a lot of iOS developer’s lives.&lt;/p&gt;

&lt;p&gt;It’s better but not the best choice. Conflicts usually occur with Storyboard, and can’t avoid. 
Besides that, constraints list is a mess, really mess and easy to make you mad.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nguyentruongky/Photos_storage/master/Auto_Layout_Programmatically/Constraint_list.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can debate about select a control, and select the constraint you want instead of find in the list. Believe me, many times you can’t do that, and we soon get mad with it.&lt;/p&gt;

&lt;h3 id=&quot;3-dynamically-customize-control-with-auto-layout-programmatically&quot;&gt;3. Dynamically customize control with Auto Layout programmatically&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nguyentruongky/Photos_storage/master/Auto_Layout_Programmatically/Custom_Control.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What would you do with this control in Storyboard? You can make a custom view with 1 &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; for title, 1 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextField&lt;/code&gt; for text input, and 1 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; for underline, 1 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt; for right button.&lt;/p&gt;

&lt;p&gt;How to use it? Drag a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; to Storyboard, choose subclass. Remember, it’s a UIView. You have to access to the view instance, textField and change the properties.&lt;/p&gt;

&lt;p&gt;But with Auto Layout programmatically, it’s a  &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextField&lt;/code&gt;. You can change textColor,  font,  backgroundColor easily. Again, It’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextField&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can see how I implement this custom &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextField&lt;/code&gt; at &lt;a href=&quot;https://github.com/nguyentruongky/knCollection/blob/develop/knCollection/Control/knGistTextField.swift&quot;&gt;knGistTextField&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;reasons-prevent-you-from-using-auto-layout-programmatically&quot;&gt;Reasons prevent you from using Auto Layout programmatically&lt;/h2&gt;

&lt;h3 id=&quot;too-many-code-in-a-file&quot;&gt;Too many code in a file&lt;/h3&gt;

&lt;p&gt;Yes, I have to admit that. There are 600 - 700 lines of code in my file. But it’s easy to solve this problem with &lt;strong&gt;Extension&lt;/strong&gt;. 
Why don’t we define and setup constraints in the main file, (&lt;code class=&quot;highlighter-rouge&quot;&gt;LoginController.swift&lt;/code&gt;, for instance), and move all handler, logic into new file, &lt;code class=&quot;highlighter-rouge&quot;&gt;LoginControllerHandler.swift&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;write-the-same-codes-many-times&quot;&gt;Write the same codes many times&lt;/h3&gt;

&lt;p&gt;Define a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt; with Auto Layout programmatically&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let button: UIButton = {
    let title = &quot;Sample&quot;
    let image = &quot;Sample&quot;
    let color = UIColor.black
    
    let button = UIButton()
    button.translatesAutoresizingMaskIntoConstraints = false
    button.setTitle(title, for: .normal)
    button.setTitleColor(color, for: .normal)
    button.setImage(UIImage(named: image), for: .normal)
    return button
}()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Every time I need a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;, do I have to find and copy this code? No, code snippet can help you.&lt;/p&gt;

&lt;p&gt;Find out how it helps &lt;a href=&quot;http://nshipster.com/xcode-snippets/&quot;&gt;here&lt;/a&gt;.
I define above button with &lt;code class=&quot;highlighter-rouge&quot;&gt;knButton&lt;/code&gt; key in my XCode. It’s easier that find and drag a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt; and then format it in Storyboard, right?&lt;/p&gt;

&lt;h3 id=&quot;code-is-too-long-and-unreadable&quot;&gt;Code is too long and unreadable&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// (1): can't change anything 
let underline = UIView()
underline.translatesAutoresizingMaskIntoConstraints = false
addSubview(underline)

// (2): Constraints setup
underline.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -8).isActive = true
underline.rightAnchor.constraint(equalTo: rightAnchor).isActive = true
underline.leftAnchor.constraint(equalTo: leftAnchor).isActive = true
underline.heightAnchor.constraint(equalToConstant: 1).isActive = true

// Format control
underline.backgroundColor = UIColor.lightGray
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The (1) is same to all controls in Auto Layout programmatically, you have to keep this format for all controls. You can make it better with this code (if you want)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension UIView {
    func addToView(view: UIView) {
        translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(self)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1) can be changed to&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let underline = UIView()
underline.addToView(view)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The (2), they’re default code from Apple, why don’t we make it more readable and beautiful?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;underline.bottom(toView: view, space: -8)
underline.horizontal(toView: view)
underline.height(1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is it beautiful enough? It comes from my own Auto Layout library. You can find it at &lt;a href=&quot;https://github.com/nguyentruongky/knConstraints&quot;&gt;https://github.com/nguyentruongky/knConstraints&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-can-i-do-with-auto-layout-programmatically&quot;&gt;What can I do with Auto Layout programmatically?&lt;/h2&gt;

&lt;p&gt;If you wan to try a life without Storyboard, why don’t you try these following instructions?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Setup your own code snippets&lt;/li&gt;
  &lt;li&gt;Try my Auto Layout library &lt;a href=&quot;https://github.com/nguyentruongky/knConstraints&quot;&gt;&lt;strong&gt;knConstraints&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Develop some simple custom views, with Auto Layout programmatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-can-i-help&quot;&gt;How can I help?&lt;/h2&gt;

&lt;p&gt;Please feel free to touch to me by leaving comments below or Skype: nguyentruongky3390.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">I started iOS development as a .NET developer. My first impression, Storyboard is really really interesting. 80% UI of my apps is built in Storyboard. I can’t imagine how I can develop iOS without Storyboard.</summary></entry><entry><title type="html">Use UITableViewController to solve very long screen</title><link href="http://localhost:4001/2017/04/18/long-screen.html" rel="alternate" type="text/html" title="Use UITableViewController to solve very long screen" /><published>2017-04-18T00:00:00+07:00</published><updated>2017-04-18T00:00:00+07:00</updated><id>http://localhost:4001/2017/04/18/long-screen</id><content type="html" xml:base="http://localhost:4001/2017/04/18/long-screen.html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nguyentruongky/Photos_storage/master/UITableViewController_static/Long_screen.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Do you have any solutions for long long screen like this? I’m sure have. This kind of screen is very popular in item detail (e-commercial app), room view (booking app)… I have to implement this screen in my class detail from an education app. This is how I did that.&lt;/p&gt;

&lt;h2 id=&quot;my-problem&quot;&gt;My problem&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;The screen is too long, and too many controls are in every section.&lt;/li&gt;
  &lt;li&gt;Some sections can be missing, for instance, promotion code section is only available for specially class.&lt;/li&gt;
  &lt;li&gt;Some sections contain very complex controls, for instance, UICollectionView the editor’s picks in the above photo.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;First I thought about the UIStackView. It can hide or show view easily. But hard to control the section’s size and have to manage scrolling.&lt;/p&gt;

&lt;p&gt;I find my best solution, UITableViewController, static UITableView.&lt;/p&gt;

&lt;h2 id=&quot;the-idea&quot;&gt;The idea&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A section is a cell in the TableView.&lt;/li&gt;
  &lt;li&gt;I make some custom views for complex section, like an embedded UICollectionView.&lt;/li&gt;
  &lt;li&gt;Other simple sections, like Summary, Promotion, Shipping can be define controls inside the controller.&lt;/li&gt;
  &lt;li&gt;Develop some functions to dynamically generate cells. Don’t define variables for cells.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sample-code&quot;&gt;Sample code&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func makeAvailibilityCell() -&amp;gt; knTableCell {
    let cell = knTableCell()

    let containerView = UIView()
    containerView.translatesAutoresizingMaskIntoConstraints = false
    cell.addSubview(containerView)
    containerView.fill(toView: cell)
    
    let titleLabel = makeHeaderLabel(text: &quot;availability&quot;.classLocalized) // (1)
    
    let seeButton = ogeSupporter.createGradientBorderButton() // (2)
    seeButton.setTitle(&quot;seeAvailability&quot;.classLocalized, for: .normal)
    
    containerView.addSubview(titleLabel)
    containerView.addSubview(availabilityLabel) // (3)
    containerView.addSubview(seeButton)
    
    // (4)
    seeButton.width(160)
    seeButton.right(toView: containerView, space: -30)
    seeButton.centerY(toView: titleLabel)
    
    titleLabel.left(toView: containerView, space: 30)
    titleLabel.width(screenWidth - 60)
    
    availabilityLabel.horizontal(toView: titleLabel)
    
    containerView.addConstraints(withFormat: &quot;V:|-15-[v0]-10-[v1]|&quot;,
                                 views: titleLabel, availabilityLabel)
    
    return cell
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1) (2) - Just define a label/button. Nothing is important here. These controls are not changed text/UI, should be defined inside the functions to reduce the number of reference controls in the controllers&lt;/p&gt;

&lt;p&gt;(3) - This is the content of this section. Data changes up to different items. I need to keep this reference to update data when request completed.&lt;/p&gt;

&lt;p&gt;(4) - Set up the UI with auto layout.&lt;/p&gt;

&lt;p&gt;**Important: ** The space between 2 sections should be define on 1 cell. Look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;Promotion code&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Is that a gift?&lt;/code&gt; in the photo. The padding between them should belong to &lt;code class=&quot;highlighter-rouge&quot;&gt;Is that a gift?&lt;/code&gt; cell.&lt;/p&gt;

&lt;p&gt;It means, the &lt;code class=&quot;highlighter-rouge&quot;&gt;bottomAnchor&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Apply button&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;Promotion code&lt;/code&gt; to the cell is 0. And the &lt;code class=&quot;highlighter-rouge&quot;&gt;topAnchor&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Is that a gift? label&lt;/code&gt; is about 54. It’s very useful in missing section. The space among sections still are good enough.&lt;/p&gt;

&lt;h4 id=&quot;how-to-use&quot;&gt;How to use&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cells.append(makeAboutSellerCell()) 
cells.append(makeAddressCell())
         
if promotion.isAvailable == true {
     cells.append(makePromotionCell())
}
tableView.reloadTable()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It’s easy, right? It saves much time for me. If designer wants to change anything, go to exactly make cell function, change the UI.&lt;/p&gt;

&lt;p&gt;Enjoy coding.&lt;/p&gt;

&lt;p&gt;I use my auto layout library in this project. You can find it here: &lt;a href=&quot;https://github.com/nguyentruongky/knConstraints&quot;&gt;https://github.com/nguyentruongky/knConstraints&lt;/a&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html"></summary></entry><entry><title type="html">How to draw a gradient border button?</title><link href="http://localhost:4001/2017/04/13/gradient-border-button.html" rel="alternate" type="text/html" title="How to draw a gradient border button?" /><published>2017-04-13T00:00:00+07:00</published><updated>2017-04-13T00:00:00+07:00</updated><id>http://localhost:4001/2017/04/13/gradient-border-button</id><content type="html" xml:base="http://localhost:4001/2017/04/13/gradient-border-button.html">&lt;h2 id=&quot;my-problem&quot;&gt;My Problem&lt;/h2&gt;

&lt;p&gt;Last week, my partner showed me his design for our application. Everything is great, easily implemented with some custom controls. But wait, something is not in my knowledge.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/nguyentruongky/89020a5f495420b260952f2ff19c4147/raw/df4fc4447088c33ed934e8f4fb56cdc6da1b6a55/res_Gradient_border_button.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A button with gradient border. Never try it before. Up to now, I just created gradient background views 2 times in previous projects. Googled and found some good results.&lt;/p&gt;

&lt;h2 id=&quot;other-solutions&quot;&gt;Other solutions&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let button = UIButton(frame: CGRect(x: 100, y: 100, width: 200, height: 100))
let gradient = CAGradientLayer()
gradient.frame =  CGRect(origin: .zero, size: button.frame.size)
gradient.colors = [UIColor.blue.cgColor, UIColor.green.cgColor]
let shape = CAShapeLayer()
shape.lineWidth = 2
shape.path = UIBezierPath(rect: button.bounds).cgPath
shape.strokeColor = UIColor.black.cgColor
shape.fillColor = UIColor.clear.cgColor
gradient.mask = shape
button.layer.addSublayer(gradient)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Awesome, it’s perfect.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/nguyentruongky/89020a5f495420b260952f2ff19c4147/raw/df4fc4447088c33ed934e8f4fb56cdc6da1b6a55/res_Gradient_border_rectangle.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rectangles with rounded corners are everywhere! (Steve Jobs)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tried to make my button rounded corner. And…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/nguyentruongky/89020a5f495420b260952f2ff19c4147/raw/df4fc4447088c33ed934e8f4fb56cdc6da1b6a55/res_Wrong_round_corner_gradient_rectangle.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oops. It didn’t work as what I need. Did some more search and found another great one from Ian Hirschfeld here &lt;a href=&quot;https://medium.com/swift-programming/how-to-create-an-angle-gradient-border-in-swift-f4856dde4c90&quot;&gt;https://medium.com/swift-programming/how-to-create-an-angle-gradient-border-in-swift-f4856dde4c90&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;my-solution&quot;&gt;My solution&lt;/h2&gt;

&lt;p&gt;It works like a charm, but it’s not my favorite solution. I need a Swifty project, not a combination with Objective-C. So don’t I try to make something simpler and easier for me and others. Finally, I did it.&lt;/p&gt;

&lt;h3 id=&quot;the-idea&quot;&gt;The idea&lt;/h3&gt;

&lt;p&gt;Simple idea, create a button with gradient background, fill it with a solid color view, and the padding to the button bounds is the border width.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Talk is cheap. Show me the code. (Linus Torvalds)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func setupView() {    
    let gradientLayer = CAGradientLayer()
    gradientLayer.frame = bounds
    gradientLayer.colors = colors.map({ return $0.cgColor })
    gradientLayer.startPoint = startPoint
    gradientLayer.endPoint = endPoint
    layer.insertSublayer(gradientLayer, at: 0) // * important
    
    let backgroundView = UIView()
    backgroundView.translatesAutoresizingMaskIntoConstraints = false
    insertSubview(backgroundView, at: 1) // * (1)
    backgroundView.backgroundColor = backgroundColor // (2)
    backgroundView.fill(toView: self, space: UIEdgeInsets(space: borderWidth)) // (3)
    createRoundCorner(cornerRadius)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1) - The most important thing here is the order of the gradient layer and background view. The title label will be overlapped and when we use &lt;code class=&quot;highlighter-rouge&quot;&gt;addSublayer&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;addSubview&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(2) - backgroundColor: the view property from UIKit.&lt;/p&gt;

&lt;p&gt;(3) - borderWidth is new property, we will use it every time re-setupView.&lt;/p&gt;

&lt;p&gt;Now is time to create the rounded corner.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func createRoundCorner(_ radius: CGFloat) {
    cornerRadius = radius
    super.createRoundCorner(radius)
    backgroundView.createRoundCorner(radius - borderWidth)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Every time we set the radius or backgroundColor, &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt; called. So that, the &lt;code class=&quot;highlighter-rouge&quot;&gt;gradientLayer&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;backgroundView&lt;/code&gt; are added many times. Keep an instance and remove it every time view setup.&lt;/p&gt;

&lt;p&gt;But, no gradient border appears. The border width still zero. We need to give a non-zero value to &lt;code class=&quot;highlighter-rouge&quot;&gt;borderWidth&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt; again.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func createBorder(_ width: CGFloat) {
    borderWidth = width
    setupView()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;See the result&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/nguyentruongky/89020a5f495420b260952f2ff19c4147/raw/df4fc4447088c33ed934e8f4fb56cdc6da1b6a55/res_Final_button.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;completed-code&quot;&gt;Completed code&lt;/h3&gt;

&lt;p&gt;Have a look at my completed code for this library at &lt;a href=&quot;https://github.com/nguyentruongky/knGradientBorderButton&quot;&gt;https://github.com/nguyentruongky/knGradientBorderButton&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I use my auto layout library in this project. You can find it here: &lt;a href=&quot;https://github.com/nguyentruongky/knConstraints&quot;&gt;https://github.com/nguyentruongky/knConstraints&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;suggestions-or-feedback&quot;&gt;Suggestions or feedback?&lt;/h2&gt;

&lt;p&gt;Feel free to comment, suggest, create pull request or open issue.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">My Problem</summary></entry></feed>