<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-03-28T11:33:34+07:00</updated><id>http://localhost:4000/</id><title type="html">Clean Blog</title><subtitle>My personal notes, codes, reviews, ideas</subtitle><author><name>Ky Nguyen</name></author><entry><title type="html">Top Skills iOS Developers Need Today</title><link href="http://localhost:4000/2017/03/08/top-skills-ios.html" rel="alternate" type="text/html" title="Top Skills iOS Developers Need Today" /><published>2017-03-08T00:00:00+07:00</published><updated>2017-03-08T00:00:00+07:00</updated><id>http://localhost:4000/2017/03/08/top-skills-ios</id><content type="html" xml:base="http://localhost:4000/2017/03/08/top-skills-ios.html">&lt;p&gt;We all know that iOS development never stops. There are hundred of skills you need to become a skilled iOS developer in the tech industry today. Let’s have a look at some skills are expected of iOS developers today in this ever changing and fast-paced industry.&lt;/p&gt;

&lt;h2 id=&quot;1-swift&quot;&gt;1. Swift&lt;/h2&gt;

&lt;p&gt;Swift is a great place to start for all iOS developers. I started learning iOS from C#, and I found out that it was a smooth transition for me. It took me just a short amount of time to work on my first iOS application with my company.&lt;/p&gt;

&lt;p&gt;Swift grows quickly and some of the biggest technology companies have migrated to Swift. Most of the iOS developer job descriptions out there require Swift as a top skill.&lt;/p&gt;

&lt;p&gt;However, one problem with Swift is that it grows too fast and it changes too many things in each updated version. On the other hand, the one good thing about this is that Apple tells you how to make changes for your code accordingly.&lt;/p&gt;

&lt;h2 id=&quot;2-programmatically-auto-layout&quot;&gt;2. Programmatically Auto Layout&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://i2.wp.com/pangara.com/wp-content/uploads/2017/03/auto_layout_programmatically.png?w=1280&amp;amp;ssl=1&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my opinion, Auto Layout is an extremely wonderful UI builder system for iOS developers. You can try Auto Layout in two ways: Interface Builder and Programmatically.&lt;/p&gt;

&lt;p&gt;I tried Auto Layout with Interface Builder and I fell in love with it. I became the best developer in my company using Auto Layout and I was requested to specifically build UI for all future projects.&lt;/p&gt;

&lt;p&gt;After a long time of using Interface Builder, I received a great tutorial from Brian Voong, a skilled iOS app developer. I abandoned Interface Builder right after the tutorial and continued with Auto Layout programmatically.&lt;/p&gt;

&lt;p&gt;Auto Layout programmatically allows me to use my imagination, code re-usability, and it dynamically changes. I have an ability to imagine exactly what UI will look like after 1 year of using Auto Layout programmatically.&lt;/p&gt;

&lt;h2 id=&quot;3-animation&quot;&gt;3. Animation&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://i2.wp.com/pangara.com/wp-content/uploads/2017/03/Animation.gif?resize=318%2C574&amp;amp;ssl=1&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The best iOS applications have gorgeous animations. Without animation, your app looks like a robot and you run the risk of losing users. Animation allows your app to come alive and fascinate its users. This is truly the future of tech and being skilled in animation will only make you more valuable to clients.&lt;/p&gt;

&lt;p&gt;Now, what is the best way to start Animation? I would suggest you first watch a variety of YouTube animation videos, purchase this book from Ray Wenderlich, try them out for yourself, understand how code animates the objects, and transform your apps. Remember, practice makes perfect!&lt;/p&gt;

&lt;h2 id=&quot;4-3rd-party-libraries&quot;&gt;4. 3rd-Party Libraries&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/pangara.com/wp-content/uploads/2017/03/3rd_party_libs.png?resize=1024%2C807&amp;amp;ssl=1&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are millions of talented iOS developers out there who create amazing code everyday. Instead of developing a new custom alert view with images and animations, you can use some awesome codes from cocoacontrols website and make your app make it to the Appstore even faster.&lt;/p&gt;

&lt;p&gt;There are many ways to use 3rd-party libraries in your projects, but I suggest you try one of these solutions I’ve used: Cocoapods and Carthage. For general projects, I still prefer Cocoapods. To get a better idea of which solution is more suitable for you, this blog post might be able to help.&lt;/p&gt;

&lt;h2 id=&quot;5-version-control&quot;&gt;5. Version Control&lt;/h2&gt;

&lt;p&gt;Version control is one skill that can’t be missing from any iOS developer. There are two popular ways to work with version control: a UI application or command lines. I always suggest my developers use command lines instead of an application. UI applications do everything for you so that you can’t understand what is going on with your version control. Using command lines helps you to understand clearly what happens with your command and how to combine commands together to solve a conflict.&lt;/p&gt;

&lt;h2 id=&quot;6-framework-digging&quot;&gt;6. Framework Digging&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://i1.wp.com/pangara.com/wp-content/uploads/2017/03/framework_digging.png?resize=1024%2C836&amp;amp;ssl=1&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nowadays, iOS developers, especially from Vietnam, try framework or library to solve their problems without understanding what is exactly happening to their code. I think this a very bad habit. There are several advantages when it comes to digging into frameworks or libraries.&lt;/p&gt;

&lt;p&gt;Digging into frameworks helps you to better understand the author’s purpose and to prevent unexpected issues.&lt;/p&gt;

&lt;p&gt;Now, there are many libraries can help you solve a feature, but what is the best library to use for your project? You can figure this out when you dig into the source codes. By doing this, you will find out the most suitable and the one with the best performance.&lt;/p&gt;

&lt;p&gt;It’s important to remember that you you can learn a lot from other iOS developers. The best way I improve my code is to read other code. I learn a lot from other libraries.&lt;/p&gt;

&lt;h1&gt;#&lt;/h1&gt;

&lt;p&gt;I’ve learned all of these skills throughout my iOS development. I hope these experiences can help other iOS developers continue to further their career.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">We all know that iOS development never stops. There are hundred of skills you need to become a skilled iOS developer in the tech industry today. Let’s have a look at some skills are expected of iOS developers today in this ever changing and fast-paced industry.</summary></entry><entry><title type="html">4 Tips on How to Become a Global IT Freelancer</title><link href="http://localhost:4000/2017/02/02/it-freelancer.html" rel="alternate" type="text/html" title="4 Tips on How to Become a Global IT Freelancer" /><published>2017-02-02T00:00:00+07:00</published><updated>2017-02-02T00:00:00+07:00</updated><id>http://localhost:4000/2017/02/02/it-freelancer</id><content type="html" xml:base="http://localhost:4000/2017/02/02/it-freelancer.html">&lt;p&gt;Personally, working eight hours a day, five days a week in an office is boring. I love having the freedom to work anytime and anywhere. I have learned many things by having these so-called ‘free days.’ And it all comes with working as an IT freelancer.&lt;/p&gt;

&lt;p&gt;Working a nine to five in various positions in application development, such as .NET, iOS, Nodejs, and more was great experience for me but my dream of becoming a full time freelancer never stopped growing. In Vietnam, becoming an IT freelancer is not necessarily the best choice for developers. Due to company’s low budgets for domestic projects these is all too low for the actual cost of living in the country. This is why I decided to become a global IT freelancer. You may wonder what is the difference between an IT freelancer and a global IT freelancer. Well, you guessed it. My work extends far beyond the borders of Vietnam. I’m no longer limited to just working in Vietnam. The whole world is at my fingertips!&lt;/p&gt;

&lt;p&gt;Upon first learning about working as a global IT freelance, many people may think this is a simple job. But they don’t realise that it is actually can be more difficult working as a full time freelancer. Here are a few tips on what I had to do to get to where I am today as a global freelancer.&lt;/p&gt;

&lt;h2 id=&quot;english&quot;&gt;English&lt;/h2&gt;

&lt;p&gt;You won’t make it outside your country without English, especially when it comes to the IT world. All documents are in English, all relevant l forums and groups are in English, most of your clients will use English, and millions of online freelance jobs in this IT worlds are in English. With good English communication skills, your first step into the world of freedom. It’s important to note that you’re not required to be a master or an expert in English. IT freelance careers don’t ask you to write essays in English. You’ll need strong English when it comes to communicating.&lt;/p&gt;

&lt;h2 id=&quot;strong-portfolio&quot;&gt;Strong Portfolio&lt;/h2&gt;

&lt;p&gt;When I first started to step out into the freelancer world, I thought I could do everything. I was fully confident in applying and bidding on every project I came across. But for some reason, no one was reaching out to me. I focused on voicing my experience and technical knowledge but I didn’t have a strong portfolio to back it up. Clients who viewed my portfolio didn’t see a lot of truth in what I was telling them about my skill set.&lt;/p&gt;

&lt;p&gt;A strong tech portfolio is not only necessary as an IT freelancer, but also in all online freelance jobs no matter what industry you’re working in. For most clients, your portfolio may make or break your chances of landing the job.&lt;/p&gt;

&lt;p&gt;It’s important to build up your website and include relevant blog posts, apps or projects you’ve worked on to build up your freelancer profile and credibility.If they have a good idea of your background and work experience, they will be more likely to hire you for the job.&lt;/p&gt;

&lt;h2 id=&quot;understand-your-clients-needs&quot;&gt;Understand Your Client’s Needs&lt;/h2&gt;

&lt;h4 id=&quot;you-cant-sell-a-comb-to-someone-with-no-hair&quot;&gt;&lt;em&gt;You can’t sell a comb to someone with no hair.&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;It’s important you understand what your clients want. For instance, while searching for IT freelancer jobs, you will learn that many available projects involve working with social networks, dating apps, streaming, chatting, financial, and more. These are hot topics right now in the freelancer industry. Build some projects in these areas to showcase your understanding and expertise of these products. This will make you very valuable to potential clients. Not only will you gain experience from building these projects but you will also have some demos to add to your portfolio.&lt;/p&gt;

&lt;h2 id=&quot;build-your-network&quot;&gt;Build Your Network&lt;/h2&gt;

&lt;p&gt;The best way for newbies to find job opportunities in the freelance world is to build up network starting with the people you know. It helps to utilise contacts you’ve made with previous projects. Reach out to them and let them know you’re looking for additional work. I found my first project from my Android friend for iOS position in his project. There are hundreds of  groups and forums specialising in specific tech projects thousands of experts to bounce ideas off of and showcase your skills. Use these groups to  learn more about what skills you may be missing in the industry, share what you’re good at and gain advice from your peers. The more you share, the bigger your network grows and more opportunities will come your way.&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;One takeaway point from this whole experience is that the more preparation and experience I had, the more successful I became at landing new clients.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Personally, working eight hours a day, five days a week in an office is boring. I love having the freedom to work anytime and anywhere. I have learned many things by having these so-called ‘free days.’ And it all comes with working as an IT freelancer.</summary></entry><entry><title type="html">3 Tips on How to Effectively Manage Your Time</title><link href="http://localhost:4000/2017/01/10/mange-your-time.html" rel="alternate" type="text/html" title="3 Tips on How to Effectively Manage Your Time" /><published>2017-01-10T00:00:00+07:00</published><updated>2017-01-10T00:00:00+07:00</updated><id>http://localhost:4000/2017/01/10/mange-your-time</id><content type="html" xml:base="http://localhost:4000/2017/01/10/mange-your-time.html">&lt;p&gt;One of the luxuries of working as a freelancer is having the ability to create your own schedule, work when you want, and at your own pace. Some see it as a blessing and some see it as a curse. If you’re new to the fast-growing freelancer industry, this might be a tough adjustment. Especially if you’re coming from a strict 9-to-5 work schedule.&lt;/p&gt;

&lt;h4 id=&quot;make-the-most-of-your-24-hours&quot;&gt;Make the Most of Your 24 Hours&lt;/h4&gt;

&lt;p&gt;Have you ever wished you had more than 24 hours in a day? I sure have. There came a point in my life when I had a really hard time with  time management and I wasn’t about to find a way to get out of this funk. I had no time to spend with my family, no time to work on personal improvement, no time to go out with friends, no time at all. All of my time was used up on my freelance work from coding new features, fixing bugs and much more. I was killing myself working odd hours and missing out on quality time with my family and friends.&lt;/p&gt;

&lt;p&gt;I spent all of my efforts learning  how to manage my time more effectively. Finally, I found a light at the end of the tunnel. I hope these tips will help you learn how to manage your time more effectively and become a freelance rockstar.&lt;/p&gt;

&lt;h2 id=&quot;switch-up-your-working-hours&quot;&gt;Switch Up Your Working Hours&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2FWorking_Hours.jpg?alt=media&amp;amp;token=975b7404-cdfc-4df8-a3c0-bd27c1a5beeb&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first step I took to implement effective time management was to change up my work hours. Everyday I spent 8 hours in the office and I spent an additional 4-6 hours after dinner to work on my freelance projects. But this system did not give me time for my freelance activities because I spent all of my energy at work. I was physically and mentally drained and there was no way I could efficiently finish my freelance work. This is one of the main reasons why working over-time is not a good idea for any type of project.&lt;/p&gt;

&lt;p&gt;It’s important to recognise what times of the day you are the most productive and what times you are not. After dinner, I want to spend time with my family, play games with my kids, read a book, or simply, take part in a stimulating conversation where I’m not talking about work or another project. It’s important to use this after-work time to shut off and spend some time with your loved ones or simply in an activity that doesn’t require you to think so much.&lt;/p&gt;

&lt;h4 id=&quot;what-time-do-of-the-day-do-you-work-most-efficiently&quot;&gt;What time do of the day do you work most efficiently?&lt;/h4&gt;

&lt;p&gt;For me, I usually start working at 2 AM after 3 to 4 hours of sleep. This time is ideal for me because everything is quiet and there are absolutely no distractions. No phone calls, no email, no one bothers you. For me, this is the best time to get my creative juices flowing. I use this period to do some researches and to work on my side projects. I’ve found that this is the most effective way for me to manage my time and to receive the best results out of my work. I am able to contribute to more online communities, take some online and bring myself to a new experience level. And of course as a result, I am able to earn more money from my freelance projects.&lt;/p&gt;

&lt;h2 id=&quot;keep-up-your-health&quot;&gt;Keep Up Your Health&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2FHealth.jpg?alt=media&amp;amp;token=ca264177-c28c-4a5e-b66a-ee12e9b5e10c&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Most importantly, a healthy body is the key to reach success. I have to work 8 hours everyday in an office and an additional 4-6 hours on freelance projects. If you do the math, my body has to work 1.5 times more than usual. Crazy, right? For most people, their body and mind will become exhausted very quickly with a schedule like this. In order for me to prevent myself from becoming ill, I make a conscious effort to include additional nutrition in my meals with more fruits, protein, etc.&lt;/p&gt;

&lt;p&gt;In additional to a healthy diet, it’s important to stay active.I try to incorporate a little bit of  exercise into my daily activities. For example, I use the stairs instead of the elevator, I try to walk faster, clean the floor manually, and more. Now, I know these types of activities won’t help me become an athlete, but every little bit helps to keep my health up.&lt;/p&gt;

&lt;h2 id=&quot;change-your-mindset&quot;&gt;Change Your Mindset&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fbackground-of-success-ideas_1284-1184.jpg?alt=media&amp;amp;token=56fdb401-87c4-4afc-adb8-260860ff95e7&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I had a misconception of working and learning and what it took to manage your time as a freelancer and a full-time employee. I was working on more freelance projects in the hopes of expanding my knowledge and my experience. In 2015, I took on so many freelance projects and it was a big mistake.&lt;/p&gt;

&lt;p&gt;When we work on a freelance project, we have a lot of  pressure to uphold the quality of code, time, and money. We have to develop new features, fix bugs, while continuously releasing and developing more new features in a very limited amount of time. And what was the result? All I was trying to was  learn how to finish the project as fast a possible. As a result of this, the quality of my work suffered. I wasn’t growing or learning from my freelance projects, and I wasn’t managing my time effectively.&lt;/p&gt;

&lt;p&gt;It’s important to learn the new technology or framework, and to become strong and familiar with it before starting a new project. As a tech freelancer, this will help you go far. Learn the technology in depth, apply it to project, and experience it. Not only will this help you earn money but it will also help you manage your time better.&lt;/p&gt;

&lt;h4 id=&quot;free-time-is-your-friend&quot;&gt;Free time is your friend.&lt;/h4&gt;

&lt;p&gt;After one or two projects (around 2 -3 months), you should set aside some free time to learn and research. Build your library of knowledge so you can apply these skills to future projects. This will boost your career.&lt;/p&gt;

&lt;p&gt;From the very first time I implemented these tips, I have earned more about 1.5 to 2 times more money than before. I still have time for family, friends, learning new skills and building my technical knowledge. It’s all a balance act. Once you’ve learned how to manage your time and mastered that, everything else will fall into place.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">One of the luxuries of working as a freelancer is having the ability to create your own schedule, work when you want, and at your own pace. Some see it as a blessing and some see it as a curse. If you’re new to the fast-growing freelancer industry, this might be a tough adjustment. Especially if you’re coming from a strict 9-to-5 work schedule.</summary></entry><entry><title type="html">Activate code view</title><link href="http://localhost:4000/2016/05/25/code-view.html" rel="alternate" type="text/html" title="Activate code view" /><published>2016-05-25T00:00:00+07:00</published><updated>2016-05-25T00:00:00+07:00</updated><id>http://localhost:4000/2016/05/25/code-view</id><content type="html" xml:base="http://localhost:4000/2016/05/25/code-view.html">&lt;h4 id=&quot;purpose&quot;&gt;Purpose&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fcode_view.gif?alt=media&amp;amp;token=994d2ae9-1c38-456b-ad68-7f711805548e&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;requirement&quot;&gt;Requirement&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Dynamic number of character, maybe 6 or 8, maximum is 12.&lt;/li&gt;
  &lt;li&gt;Active the current character underline.&lt;/li&gt;
  &lt;li&gt;Auto active/validate when enter enough character.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;idea&quot;&gt;Idea&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Create a custom view named &lt;code class=&quot;highlighter-rouge&quot;&gt;CharacterView&lt;/code&gt; to display a code character with underline.&lt;/li&gt;
  &lt;li&gt;Create an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;CharacterView&lt;/code&gt; with the number of character base on demand.&lt;/li&gt;
  &lt;li&gt;Calculate and decrease the font size, the distance between 2 views to make sure all characters will be displayed at the center of the screen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s do it.&lt;/p&gt;

&lt;h4 id=&quot;character-view&quot;&gt;Character View&lt;/h4&gt;

&lt;p&gt;The character view includes 2 elements: 1 label for code and 1 view for underline.
Setup the code label and underline view&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private func setupCode() {
    codeLabel = UILabel(frame: CGRect(x: 0, y: 0, width: frame.width, height: frame.height))
    codeLabel.font = UIFont.systemFontOfSize(defaultFontSize)
    codeLabel.textAlignment = NSTextAlignment.Center
    self.addSubview(codeLabel)
}

private func setupUnderline() {
    underlineView = UIView(frame: CGRect(
        x: codeLabel.frame.origin.x,
        y: codeLabel.frame.origin.y + codeLabel.frame.height + 4,
        width: codeLabel.frame.width,
        height: codeLabel.frame.width / 10))
    underlineView.backgroundColor = Color.inactiveColor
    self.addSubview(underlineView)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are some errors here.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;defaultFontSize&lt;/code&gt; is a global variable, it’ll be changed base on the number of characters.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Color.inactiveColor&lt;/code&gt; is a static variable, you can change any color you want.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The character view has active, inactive states. These methods to do that.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func activate() { 
    changeStateWithColor(Color.activeColor) 
}
func deactivate() { 
    changeStateWithColor(Color.inactiveColor) 
}
private func changeStateWithColor(color: UIColor) { 
    codeLabel.textColor = color; - 
    underlineView.backgroundColor = color; 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And another method to change to string in code label.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func changeCodeWithString(string: String) { 
    codeLabel.text = string 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;code-view&quot;&gt;Code View&lt;/h4&gt;

&lt;p&gt;The code view will have some variables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;characterViews : [CharacterView]&lt;/code&gt;: An array of character views.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;horizontalSpacing: CGFloat&lt;/code&gt;: the spacing between 2 characters.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;codeField : UITextField&lt;/code&gt;: A hidden textfield, the code will be enter directly here and parse to character view.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;validateCode: ((String) -&amp;gt; ())?&lt;/code&gt;: a method will be executed when the code enter completely.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Initialize the view&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;required init?(coder aDecoder: NSCoder) { super.init(coder: aDecoder) }

override init(frame: CGRect) { super.init(frame: frame) }

convenience init(frame: CGRect, numberOfCharacter: Int) {
    self.init(frame: frame)
    setupCodeField()
    let value = calculateSizeForScreenBaseOnWidth(frame.width, numberOfCharacter: numberOfCharacter)
    let horizontalSpacing: CGFloat = value.spacing
    let baseSize = value.baseSize
    var labelX = calculateFirstLabelXBaseOnLabelWidth(baseSize.width,
                                                      viewWidth: frame.width,
                                                      numberOfCharacter: numberOfCharacter,
                                                      horizontalSpacing: horizontalSpacing)

    for _ in 0 ..&amp;lt; numberOfCharacter {
        self.addSubview(createCharacterViewWithSize(baseSize, atX: labelX))
        labelX += horizontalSpacing + baseSize.width
    }

    activeCodeAtIndex(0)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have to setup the hidden textfield. Don’t forget conform UITextFieldDelegate&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private func setupCodeField() {
    codeField.delegate = self
    self.addSubview(codeField)
    codeField.becomeFirstResponder()
    codeField.autocorrectionType = UITextAutocorrectionType.No
    codeField.autocapitalizationType = UITextAutocapitalizationType.None
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have to calculate the character size and font size base on the code view and number of character. For example: with 6-character-code, the font size can be 40+pt and the horizontal spacing is 16. But with 12-character-code, we can’t do that. The font size has to be decreased. This is a recursion method to find the suitable size.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func calculateSizeForScreenBaseOnWidth(viewWidth: CGFloat, numberOfCharacter: Int) -&amp;gt; (chracterSize: CGSize, spacing: CGFloat) {
    let baseSize = calculateSizeBaseOnFontSize(defaultFontSize)
    if viewWidth / CGFloat(numberOfCharacter) &amp;gt; baseSize.width + horizontalSpacing { return (baseSize, horizontalSpacing) }

    horizontalSpacing -=  horizontalSpacing &amp;gt; 8 ? 2 : 0
    defaultFontSize -= 4
    return calculateSizeForScreenBaseOnWidth(viewWidth, numberOfCharacter: numberOfCharacter)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This method returns a tuple with the character view size and the horizontal spacing between 2 character views.
Next, we have to calculate the x coordinate for the first character view.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func calculateFirstLabelXBaseOnLabelWidth(width: CGFloat,
                                          viewWidth: CGFloat,
                                          numberOfCharacter: Int,
                                          horizontalSpacing spacing: CGFloat) -&amp;gt; CGFloat {
    var labelX: CGFloat = width * CGFloat(numberOfCharacter)
    labelX += spacing * CGFloat(numberOfCharacter - 1)
    labelX = (viewWidth - labelX) / 2
    return labelX
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the most important method is the textfield delegate.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String) -&amp;gt; Bool {
    let codeLength = textField.text!.characters.count
    // delete character
    guard string.isEmpty == false &amp;amp;&amp;amp; range.length != 1 else {
        characterViews[codeLength - 1].changeCodeWithString(string)
        activeCodeAtIndex(codeLength - 1)
        deactivateCodeAtIndex(codeLength)
        return true
    }

    // enter new character
    guard codeLength &amp;lt; characterViews.count else { return false }
    enterCodeAtIndex(codeLength, withString: string)

    // validate code
    if codeLength + 1 == characterViews.count {
        let code = (textField.text! as NSString).stringByReplacingCharactersInRange(range, withString: string)
        print(&quot;validate code \(code)&quot;)
        if let validateCode = validateCode {
            validateCode(code)
        }
    }
    return true
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have to handle the delete key, when input new character, when fill all characters and execute &lt;code class=&quot;highlighter-rouge&quot;&gt;validateCode&lt;/code&gt; method.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Delete key: clear text, activate the current character and deactivate the previous character view. Make sure your character index will not out of index. View detail in the sample project.&lt;/li&gt;
  &lt;li&gt;Add new character: add text to current character, active next character.&lt;/li&gt;
  &lt;li&gt;Auto execute the method: check the count of character, use &lt;code class=&quot;highlighter-rouge&quot;&gt;stringByReplacingCharactersInRange&lt;/code&gt; to create new text and execute the method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;improvement&quot;&gt;Improvement&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;The code doesn’t work good on iPhone 6+, the font size is a little small.&lt;/li&gt;
  &lt;li&gt;The recursion code makes the performance down a lot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some detail can’t be written here, please see more at my github: &lt;a href=&quot;https://github.com/nguyentruongky/ActiveCode&quot;&gt;https://github.com/nguyentruongky/ActiveCode&lt;/a&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Purpose</summary></entry><entry><title type="html">Dynamically load view controller into another</title><link href="http://localhost:4000/2016/01/29/embed-controller.html" rel="alternate" type="text/html" title="Dynamically load view controller into another" /><published>2016-01-29T00:00:00+07:00</published><updated>2016-01-29T00:00:00+07:00</updated><id>http://localhost:4000/2016/01/29/embed-controller</id><content type="html" xml:base="http://localhost:4000/2016/01/29/embed-controller.html">&lt;p&gt;I saw a question on &lt;a href=&quot;http://stackoverflow.com/questions/35011539/how-to-make-view-scroll-like-instagrams-profile-vc-with-segmentedcontroller/35079835#35079835&quot;&gt;stackoverflow&lt;/a&gt;. He ran into a problem when use ContainerView to embed other view controller. I’ll share what I did.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create new project.&lt;/li&gt;
  &lt;li&gt;Design what you want. I add a label, a segmented control and a container view to embed child controller.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fcontainer_view.png?alt=media&amp;amp;token=1a69995c-9f5f-4226-a67c-b7bbd3bbce83&quot; alt=&quot;design&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Select all controls and choose menu Editor\Embed In\View. Name it: Content View.&lt;/li&gt;
  &lt;li&gt;Select Content View and embed into ScrollView.&lt;/li&gt;
  &lt;li&gt;Set constraint for ScrollView: leading, trailing, top, bottom to super view equal 0.&lt;/li&gt;
  &lt;li&gt;Set constraint for Content View: leading, trailing, top, bottom to ScrollView equal to 0, vertical and horizontal alignment.&lt;/li&gt;
  &lt;li&gt;Connect outlets and action to your controller.&lt;/li&gt;
  &lt;li&gt;Add your new controllers. In my demo, I added 2 TableViewController, 1 for displaying images (ImageController), 1 for loading text (TextController).&lt;/li&gt;
  &lt;li&gt;Back to your main view controller, add some code.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var dynamicHeight: CGFloat = 0    
@IBOutlet weak var scrollView: UIScrollView!  
@IBOutlet weak var pageContainer: UIView!
@IBAction func selectPage(sender: AnyObject) {
	// remove child controllers before add others
	for controller in childViewControllers {  
		controller.removeFromParentViewController()
	}  
	for view in pageContainer.subviews {  
		view.removeFromSuperview()
	}
	let segment = sender as! UISegmentedControl
	if segment.selectedSegmentIndex == 0 {  
		createImageController()
	} else { 
		createTextController()
	}  
	updateScrollContentSize()
}
    
func updateScrollContentSize() {
	// 150 is your other view height. 
	scrollView.contentSize = CGSize(width: view.frame.size.width, height: dynamicHeight + 150)
}
    
func createTextController() {    
	let textController = UIStoryboard(name: &quot;Main&quot;, bundle: nil).instantiateViewControllerWithIdentifier(&quot;TextController&quot;) as! TextController
	dynamicHeight = textController.getTableContentHeight()
	textController.tableView.scrollEnabled = false  
	self.addChildViewController(textController)
	pageContainer.addSubview(textController.view)
	textController.view.frame = CGRectMake(0, 0, pageContainer.frame.size.width, dynamicHeight)
}

func createImageController() {    
	let imageController = UIStoryboard(name: &quot;Main&quot;, bundle: nil).instantiateViewControllerWithIdentifier(&quot;ImageShowController&quot;) as! ImageShowController
	dynamicHeight = imageController.getTableContentHeight()
	imageController.tableView.scrollEnabled = false  
	self.addChildViewController(imageController)
	pageContainer.addSubview(imageController.view)
	imageController.view.frame = CGRectMake(0, 0, pageContainer.frame.size.width, dynamicHeight * 2)
}
    
override func viewDidAppear(animated: Bool) {    
	super.viewDidAppear(true)
	createImageController()
	updateScrollContentSize()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Xcode tells you about the error. Fix it now. Open your controller you want to embed and add some code.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func getTableContentHeight() -&amp;gt; CGFloat {    
	// calculate the total height of your controller. 
	return CGFloat(vietnamTravelLocations.count) * 44
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s done, run your project and see the result.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Container view is very convenient, But don’t exploit it, especially when your embed controller change the height many times. Your app will be lag, unstable and bring a bad experience to your user.&lt;/p&gt;

&lt;p&gt;You can download my demo at &lt;a href=&quot;https://github.com/nguyentruongky/DemoContainerViewDynamicLoading&quot;&gt;my github&lt;/a&gt;. Hope this can help.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">I saw a question on stackoverflow. He ran into a problem when use ContainerView to embed other view controller. I’ll share what I did.</summary></entry><entry><title type="html">Airbnb Home screen sample</title><link href="http://localhost:4000/2016/01/27/Airbnb-home.html" rel="alternate" type="text/html" title="Airbnb Home screen sample" /><published>2016-01-27T00:00:00+07:00</published><updated>2016-01-27T00:00:00+07:00</updated><id>http://localhost:4000/2016/01/27/Airbnb-home</id><content type="html" xml:base="http://localhost:4000/2016/01/27/Airbnb-home.html">&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fdemo.gif?alt=media&amp;amp;token=cad709ea-eb96-498c-8e0d-5af864263ef5&quot; alt=&quot;demo.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see it anywhere. It’s very popular in home screen, gallery screen. See how to do that.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create new project.&lt;/li&gt;
  &lt;li&gt;Remove ViewController.swift and the view controller in Main storyboard.&lt;/li&gt;
  &lt;li&gt;Add TableViewController to storyboard. Don’t forget check &lt;code class=&quot;highlighter-rouge&quot;&gt;Is Initial View Controller&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Name the Table View Cell and Identifier &lt;code class=&quot;highlighter-rouge&quot;&gt;HeaderCell&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Set HeaderCell height to 400&lt;/li&gt;
  &lt;li&gt;Design your cell look like this&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fheadercelldesign.png?alt=media&amp;amp;token=a2de60ef-625a-4864-bb73-d25f86d7ef54&quot; alt=&quot;headerCellDesign.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add new file &lt;code class=&quot;highlighter-rouge&quot;&gt;HeaderCell.swift&lt;/code&gt; and connect with our HeaderCell. Remember, &lt;code class=&quot;highlighter-rouge&quot;&gt;HeaderCell.swift&lt;/code&gt; is subclass of UITableViewCell&lt;/li&gt;
  &lt;li&gt;Clear all codes in file and connect outlets.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fconnectoutletheadercell.png?alt=media&amp;amp;token=ccc8ff44-0995-4699-a395-06d0af605458&quot; alt=&quot;connectOutletHeaderCell.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write a method to make the search button as a circle. Create a new file name &lt;code class=&quot;highlighter-rouge&quot;&gt;UIExtension.swift&lt;/code&gt;. You see how it’s useful later.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension UIView {    
func createBorder(color: UIColor = .white, width: CGFloat = 2) {
    self.layer.borderColor = color.CGColor
    self.layer.borderWidth = width
}
    
func createRoundCorner(radius: CGFloat = 4) {
    self.layer.cornerRadius = radius
    self.clipsToBounds = true
}
    
func createRoundCorner() {
    createRoundCorner(4)
}
    
func createBorderCorner() {
    createBorder()
    createRoundCorner()
}
    
func createCircleShape() {
    createRoundCorner(self.frame.size.width / 2)
}
}    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;If you don’t know about Extension yet, read more &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Extensions.html&quot;&gt;here&lt;/a&gt;. It’s awesome.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Back to HeaderCell, add &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView()&lt;/code&gt; method.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func setupView() {
searchButton.createCircleShape()
}    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Add a subclass of UITableViewController file name &lt;code class=&quot;highlighter-rouge&quot;&gt;HomescreenViewController.swift&lt;/code&gt;, connect it to your Table View Controller in IB and clear all codes in files.&lt;/li&gt;
  &lt;li&gt;Add some code
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class HomescreenTableViewController: UITableViewController {    
// It's the header of the sections. The first empty section header is use for header.
let sections = [&quot;&quot;, &quot;Recently View&quot;, &quot;Favourite&quot;, &quot;Suggestion&quot;]  

override func numberOfSectionsInTableView(tableView: UITableView) -&amp;gt; Int { return 1 }
    
override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int {
    return sections.count }
	
override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&amp;gt; UITableViewCell {
    let cell = tableView.dequeueReusableCellWithIdentifier(&quot;HeaderCell&quot;, forIndexPath: indexPath) as! HeaderCell
    cell.setupView()
    return cell
}
    
override func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -&amp;gt; CGFloat { return 400 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Run app and you see header cell.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fhomescreenheadercomplete.png?alt=media&amp;amp;token=fcc1ec80-71cf-4224-982c-9cef26b3f5f0&quot; alt=&quot;homescreenHeaderComplete&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now is the main design of the screen. Add new Table View Cell, name and Reuse identifier is &lt;code class=&quot;highlighter-rouge&quot;&gt;PlaceCategory&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Change cell height to 400.&lt;/li&gt;
  &lt;li&gt;Add a Collection View to your cell, set delegate and datasource to your &lt;code class=&quot;highlighter-rouge&quot;&gt;PlaceCategory&lt;/code&gt; cell.&lt;/li&gt;
  &lt;li&gt;Select the Collection View and set cell size to width: 300, height: 350. Set scroll direction to Horizontal.&lt;/li&gt;
  &lt;li&gt;Select the Collection View Cell and set reuse identifier is &lt;code class=&quot;highlighter-rouge&quot;&gt;PlaceCell&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Design the PlaceCell like the UI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://truongky.files.wordpress.com/2016/01/placecategory.png&quot; alt=&quot;placeCategory&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add new file (subclass of UITableViewCell), name &lt;code class=&quot;highlighter-rouge&quot;&gt;PlaceCategoryCell.swift&lt;/code&gt;. Connect it to your PlaceCategoryCell and connect outlets to your file.&lt;/li&gt;
  &lt;li&gt;Add new file (subclass of UICollectionViewCell), name &lt;code class=&quot;highlighter-rouge&quot;&gt;PlaceCollectionViewCell&lt;/code&gt;. Connect it to your PlaceCell. Connect outlets to your file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fplacecollectionviewcell_connectoutlet.png?alt=media&amp;amp;token=244b013a-577a-4439-9474-2d49fd256aee&quot; alt=&quot;placeCollectionViewCell_connectOutlet&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView()&lt;/code&gt; method to your code
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func setupView() {  
avatarImageView.createCircleShape()
}    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Back to &lt;code class=&quot;highlighter-rouge&quot;&gt;PlaceCategoryCell.swift&lt;/code&gt; and add some codes.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Model
class PlaceModel : NSObject {    
	var placeName = &quot;&quot;
	var shortDescription = &quot;&quot;
	var price: Int64 = 0
	var currency = &quot;&quot;
	var unit = &quot;&quot;
	var thumbnailImage: UIImage?
	var avatarImage: UIImage?
	var didWish = false
}
    
class PlaceCategoryTableViewCell: UITableViewCell, UICollectionViewDelegateFlowLayout, UICollectionViewDataSource {
	@IBOutlet weak var sectionLabel: UILabel!
	var placeList = [PlaceModel]()
	
	func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -&amp;gt; Int { return placeList.count }

	func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -&amp;gt; UICollectionViewCell {
		let cell = collectionView.dequeueReusableCellWithReuseIdentifier(&quot;PlaceCell&quot;, forIndexPath: indexPath) as! PlaceCollectionViewCell
		cell.setupView()
		let place = placeList[indexPath.row]
		cell.thumbnailImageView.image = place.thumbnailImage
		cell.avatarImageView.image = place.avatarImage
		cell.priceLabel.text = String(place.price)
		cell.currencyLabel.text = place.currency
		cell.unitLabel.text = place.unit
		cell.placeNameLabel.text = place.placeName
		cell.placeDescriptionLabel.text = place.shortDescription
		return cell
	}
    
	func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath) -&amp;gt; CGSize {
		return CGSize(width: 300, height: 350) }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;It’s almost done. Your UI setup is ready to display data. We create some sample data to show now.&lt;/li&gt;
  &lt;li&gt;Create new file &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleData.swift&lt;/code&gt; and add some codes
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class SampleData {
static let places = [&quot;Ha Noi&quot;, &quot;Hai Phong&quot;, &quot;Trang An&quot;, &quot;Hoi An&quot;, &quot;Ho Chi Minh&quot;, &quot;Bien Hoa&quot;, &quot;My Tho&quot;, &quot;Can Tho&quot;, &quot;Tay Ninh&quot;, &quot;Con Dao&quot;]
static let avatars = [&quot;Avatar1&quot;, &quot;Avatar2&quot;, &quot;Avatar3&quot;, &quot;Avatar4&quot;, &quot;Avatar5&quot;, &quot;Avatar6&quot;, &quot;Avatar7&quot;, &quot;Avatar8&quot;, &quot;Avatar9&quot;, &quot;Avatar10&quot;]
static let thumbnails = [&quot;Place1&quot;, &quot;Place2&quot;,  &quot;Place3&quot;,  &quot;Place4&quot;,  &quot;Place5&quot;,  &quot;Place6&quot;,  &quot;Place7&quot;,  &quot;Place8&quot;,  &quot;Place9&quot;,  &quot;Place10&quot;]
static let prices: [Int64] = [5000000, 15000000, 18000000,  2000000, 25000000, 15000000, 9000000, 1000000, 12000000, 6000000]  
static let shortDescriptions = [&quot;New BedRm by C.Park&quot;,
        &quot;Cozy &amp;amp; Private Floor of Brownstone&quot;,
        &quot;AMAZING MANHATTAN SKYLIN&quot;,
        &quot;Studio Apartment with King Bed&quot;,
        &quot;Beautiful Midtown East&quot;,
        &quot;Brooklyn Style - With a Balcony!!!&quot;,
        &quot;Cozy Bedroom in Apartment&quot;,
        &quot;Loft with Manhattan skyline view!&quot;,
        &quot;Hell's Kitchen 1-Bdr. Apt. Share&quot;,
        &quot;Green Room&quot;]
    
static func generateFavouriteList() -&amp;gt; [PlaceModel] {
    var favouriteList = [PlaceModel]()
    for _ in 0..&amp;lt;10 {
        let randomIndex = randomInt(10)
        let place = PlaceModel()
        place.placeName = places[randomIndex]
        place.avatarImage = UIImage(named: avatars[randomIndex])
        place.thumbnailImage = UIImage(named: thumbnails[randomIndex])
        place.unit = &quot;PER NIGHT&quot;
        place.currency = &quot;VND&quot;
        place.price = prices[randomIndex]
        place.shortDescription = shortDescriptions[randomIndex]
        favouriteList.append(place)
    }
    return favouriteList
}
    
static func generateRecentlyList() -&amp;gt; [PlaceModel] {
    var recentlyList = [PlaceModel]()    
    for _ in 0..&amp;lt;10 {
        let randomIndex = randomInt(10)
        let place = PlaceModel()
        place.placeName = places[randomIndex]
        place.avatarImage = UIImage(named: avatars[randomIndex])
        place.thumbnailImage = UIImage(named: thumbnails[randomIndex])
        place.unit = &quot;PER NIGHT&quot;
        place.currency = &quot;VND&quot;
        place.price = prices[randomIndex]
        place.shortDescription = shortDescriptions[randomIndex]
        recentlyList.append(place)
    }
    return recentlyList;
}
    
static func generateSuggestionList() -&amp;gt; [PlaceModel] {    
    var suggestionList = [PlaceModel]()
    for _ in 0..&amp;lt;10 {
        let randomIndex = randomInt(10)
        let place = PlaceModel()
        place.placeName = places[randomIndex]
        place.avatarImage = UIImage(named: avatars[randomIndex])
        place.thumbnailImage = UIImage(named: thumbnails[randomIndex])
        place.unit = &quot;PER NIGHT&quot;
        place.currency = &quot;VND&quot;
        place.price = prices[randomIndex]
        place.shortDescription = shortDescriptions[randomIndex]
        suggestionList.append(place)
    }
    return suggestionList
}
    
static func randomInt(max: UInt32) -&amp;gt; Int { return Int(arc4random_uniform(max)) }
}    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Please make sure you add 10 avatar images (Avatar1.png, Avatar2.png…, Avatar10.png) and 10 place images (Place1.png, Place2.png…, Place10.png)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run and enjoy.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;The main purpose is to show how nest a Collection View in a Table View. The Airbnb home has many things to do. 
You can download my project &lt;a href=&quot;https://github.com/nguyentruongky/AirbnbHomescreenSample&quot;&gt;at my github&lt;/a&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html"></summary></entry><entry><title type="html">Contact Picker</title><link href="http://localhost:4000/2016/01/19/Contact-picker.html" rel="alternate" type="text/html" title="Contact Picker" /><published>2016-01-19T00:00:00+07:00</published><updated>2016-01-19T00:00:00+07:00</updated><id>http://localhost:4000/2016/01/19/Contact%20picker</id><content type="html" xml:base="http://localhost:4000/2016/01/19/Contact-picker.html">&lt;p&gt;I have a feature in my app: pick a phone number. I code this feature in Objective C and now I want to parse to Swift. The feature requires to load all phone numbers from all contacts, search contacts, contacts are grouped into first character of the name. Here what I did&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Ffullcontact.png?alt=media&amp;amp;token=0225e273-c25a-46f1-a053-2a29ce26aed2&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fsearch_contact.png?alt=media&amp;amp;token=63aa4ae0-4149-4ecf-a649-059940d17210&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I use intention in this function so that this picker can be use anywhere easily. Read more about intention at my posts: &lt;a href=&quot;https://truongky.wordpress.com/2016/01/19/1000-lines-of-code-good-work-cont/&quot;&gt;1000+ lines of code, good work?“ (Cont)&lt;/a&gt; and &lt;a href=&quot;https://truongky.wordpress.com/2016/01/12/pageviewcontroller-how-can-i-reuse-it/&quot;&gt;PageViewController: How can I reuse it?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s begin.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create new project.&lt;/li&gt;
  &lt;li&gt;Design what you want. Two controls must have: a UITableView and a UISearchBar.&lt;/li&gt;
  &lt;li&gt;Add a UITableViewCell and name it &lt;code class=&quot;highlighter-rouge&quot;&gt;contactCell&lt;/code&gt; with style is &lt;code class=&quot;highlighter-rouge&quot;&gt;Subtitle&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add a new file &lt;code class=&quot;highlighter-rouge&quot;&gt;ContactPickerIntention.swift&lt;/code&gt; and implement NSObject class. It’s our intention.&lt;/li&gt;
  &lt;li&gt;Add a NSObject in IB and change its subclass is &lt;code class=&quot;highlighter-rouge&quot;&gt;ContactPickerIntention.swift&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Connect controls to the intention. I named them &lt;code class=&quot;highlighter-rouge&quot;&gt;searchBar&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Connect the intention to ViewController.&lt;/li&gt;
  &lt;li&gt;The intention has to conform some delegate and datasource.
    &lt;ul&gt;
      &lt;li&gt;UISearchBarDelegate&lt;/li&gt;
      &lt;li&gt;UITableViewDelegate&lt;/li&gt;
      &lt;li&gt;UITableViewDataSource&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You have to ask permission to access to contact.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ABAddressBookRequestAccessWithCompletion(addressBook) { granted, error in
	// warn the user that because they just denied permission, this functionality won't work
	// also let them know that they have to fix this in settings
	if granted == false { return }
	// load contact 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Load all contacts&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let allContacts = ABAddressBookCopyArrayOfAllPeople(addressBook).takeRetainedValue() as Array
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All contacts are here. Run a loop and load every contact, find the phone number and consider this contact with every number is a contact item.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private func getNameFromContact(currentContact: ABRecordRef) -&amp;gt; String {
	let firstName = ABRecordCopyValue(currentContact, kABPersonFirstNameProperty)
	let lastName = ABRecordCopyValue(currentContact, kABPersonLastNameProperty)
	var currentName = &quot;&quot;
	if firstName == nil &amp;amp;&amp;amp; lastName == nil { // prevent anonymous contact
            currentName = &quot;&quot;
	} else {
		currentName = ABRecordCopyCompositeName(currentContact).takeRetainedValue() as String
	}
	return currentName
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ABRecordCopyCompositeName&lt;/code&gt; function can get the contact’s full name for you, but if there is a contact without first name or last name, your app crashes. Take care some anonymous friends with this func.&lt;/p&gt;

&lt;p&gt;Get the phone numbers.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private func getPhoneNumbersFromContact(currentContact: ABRecordRef) -&amp;gt; [String]? {
    var phoneNumberList = [String]()
    let phones:ABMultiValueRef = ABRecordCopyValue(currentContact, kABPersonPhoneProperty).takeRetainedValue()
    for var j: CFIndex = 0; j &amp;lt; ABMultiValueGetCount(phones); j++ {
        let mobileLabel = ABMultiValueCopyLabelAtIndex(phones, j).takeRetainedValue()
        if mobileLabel == kABPersonPhoneMobileLabel ||
            mobileLabel == kABHomeLabel ||
            mobileLabel == kABPersonPhoneMainLabel ||
            mobileLabel == kABPersonPhoneIPhoneLabel ||
            mobileLabel == kABOtherLabel ||
            mobileLabel == kABWorkLabel {
                let phone = ABMultiValueCopyValueAtIndex(phones, j).takeRetainedValue() as! String
                phoneNumberList.append(phone)
        }
    }
    return phoneNumberList
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are a few phone number types such as Mobile, Home, Work. And those types are marked with the Label. We have to get the phones multi value and find the phone number conform to the labels.&lt;/p&gt;

&lt;p&gt;I created struct &lt;code class=&quot;highlighter-rouge&quot;&gt;Contact&lt;/code&gt; to keep the name and the phone number. And a dictionary with key is the first character of the name and the value is an array of Contact to store all contacts.&lt;/p&gt;

&lt;p&gt;If you want to get email, try this func&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func getEmail(currentContact: ABRecordRef) -&amp;gt; String {
    let email:ABMultiValueRef = ABRecordCopyValue(currentContact, kABPersonEmailProperty).takeRetainedValue()
    var emailString = &quot;&quot;
    if ABMultiValueGetCount(email) &amp;gt; 0 {
        emailString = ABMultiValueCopyValueAtIndex(email, 0).takeRetainedValue() as! String
    }
    return emailString
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can download my complete project at &lt;a href=&quot;https://github.com/nguyentruongky/ContactPicker&quot;&gt;my github&lt;/a&gt;
You can use this intention anywhere you want with simple actions, copy the file and use it in ViewController.
ViewController&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;contactPickerIntention.getAllContacts()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This project just demonstrate how I did my feature. And you can do a lot with this, add delegate to pass data from picker to ViewController, show alert and open setting when access denied and user want to accept it.
Intention is extremely easy and powerful. Understand it clearly, your code grows to a higher level.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">I have a feature in my app: pick a phone number. I code this feature in Objective C and now I want to parse to Swift. The feature requires to load all phone numbers from all contacts, search contacts, contacts are grouped into first character of the name. Here what I did</summary></entry><entry><title type="html">1000+ lines of code, good work? (Cont)</title><link href="http://localhost:4000/2016/01/19/1000_lines_of_code_2.html" rel="alternate" type="text/html" title="1000+ lines of code, good work? (Cont)" /><published>2016-01-19T00:00:00+07:00</published><updated>2016-01-19T00:00:00+07:00</updated><id>http://localhost:4000/2016/01/19/1000_lines_of_code_2</id><content type="html" xml:base="http://localhost:4000/2016/01/19/1000_lines_of_code_2.html">&lt;p&gt;Continue the 1000-line-of-code nightmare (my previous note &lt;a href=&quot;https://truongky.wordpress.com/2016/01/14/1000-lines-of-code-good-work/&quot;&gt;here&lt;/a&gt;). dDue to the post at &lt;a href=&quot;http://bendyworks.com/single-responsibility-principle-ios/&quot;&gt;bendyworks.com&lt;/a&gt;, I found another solution for this problem. INTENTION. What is intention? For me, intention is something does only one thing. In an aspect, intention is similar with extension, but it’s better for reusing. You can think it’s a component.&lt;/p&gt;

&lt;p&gt;I’ll show you how to use intention to create an image slideshow with UIScrollView.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create new project&lt;/li&gt;
  &lt;li&gt;Add a UIScrollView and a UIPageControl.&lt;/li&gt;
  &lt;li&gt;Add new file, name &lt;code class=&quot;highlighter-rouge&quot;&gt;ImageSlideShowIntention.swift&lt;/code&gt;, implement NSObject&lt;/li&gt;
  &lt;li&gt;Add a NSObject into IB and its subclass is &lt;code class=&quot;highlighter-rouge&quot;&gt;ImageSlideShowIntention.swift&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Connect UIScrollView and UIPageControl to object &lt;code class=&quot;highlighter-rouge&quot;&gt;ImageSlideShowIntention.swift&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Set UIScrollView delegate is our intention&lt;/li&gt;
  &lt;li&gt;Connect intention to the main ViewController.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Fconnect_object.png?alt=media&amp;amp;token=49facbec-76c2-49ea-91dd-c32ac10f3bf0&quot; alt=&quot;connect_object&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add some code to our intention&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func loadImagesToSlideShow(images:[String]) {
	for var i = 0; i &amp;lt; images.count; i++ {
            let imageSlide = formatSlide(images[i], slideIndex: i)
            scrollView.addSubview(imageSlide)
	}
	formatPageControl(images.count)
	formatScrollView(images.count)
}

private func formatSlide(imagesName: String, slideIndex: Int) -&amp;gt; UIImageView {
	let imageSource = UIImage(named: imagesName)
	let imageView = UIImageView(image: imageSource)
	imageView.contentMode = .ScaleAspectFit
	imageView.clipsToBounds = true    
	var frame = scrollView.frame
	frame.origin.x = CGFloat(slideIndex) * scrollView.frame.width
	imageView.frame = frame
	return imageView
}

private func formatPageControl(pageCount: Int) {
	indicatorPageControl.backgroundColor = UIColor.blackColor()
	indicatorPageControl.numberOfPages = pageCount
}

private func formatScrollView(pageCount: Int) {
	scrollView.contentSize = CGSizeMake(scrollView.frame.width * CGFloat(pageCount), scrollView.frame.height)
}

func scrollViewDidScroll(scrollView: UIScrollView) {
	let pageWidth = scrollView.frame.size.width
	let page = Int(floor((scrollView.contentOffset.x * 2.0 + pageWidth) / (pageWidth * 2.0)))
	indicatorPageControl.currentPage = page
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add some code to ViewController. Your ViewController looks like this:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@IBOutlet var slideShowIntention: ImageSlideShowIntention!
override func viewDidLoad() {
super.viewDidLoad()
let imageNames = [&quot;son_doong_1&quot;, &quot;son_doong_2&quot;]
slideShowIntention.loadImagesToSlideShow(imageNames)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Anywhere you want to use an images slide show like this, copy the intention file, connect to your ViewController, pass an images name array and let it go.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This article used to demonstrate what is intention. This solution can be used with the small image source. With a large image source, I suggest you take a look at my previous post at &lt;a href=&quot;https://truongky.wordpress.com/2016/01/12/pageviewcontroller-how-can-i-reuse-it/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can download my complete project at &lt;a href=&quot;https://github.com/nguyentruongky/ImageSlideShow_IntentionDemo&quot;&gt;my github&lt;/a&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Continue the 1000-line-of-code nightmare (my previous note here). dDue to the post at bendyworks.com, I found another solution for this problem. INTENTION. What is intention? For me, intention is something does only one thing. In an aspect, intention is similar with extension, but it’s better for reusing. You can think it’s a component.</summary></entry><entry><title type="html">1000+ lines of code, good work?</title><link href="http://localhost:4000/2016/01/14/1000_lines_of_code_1.html" rel="alternate" type="text/html" title="1000+ lines of code, good work?" /><published>2016-01-14T00:00:00+07:00</published><updated>2016-01-14T00:00:00+07:00</updated><id>http://localhost:4000/2016/01/14/1000_lines_of_code_1</id><content type="html" xml:base="http://localhost:4000/2016/01/14/1000_lines_of_code_1.html">&lt;p&gt;Have you ever write a file with more 500 lines of code? I think the answer is YES. Me too, even more 1000 lines. How can you maintain your code? And what do you think when fix a bug, add a function with a 1000-line-of-code file?&lt;br /&gt;
I’m sure your feeling same to mine. It’s horrible to find something there.&lt;/p&gt;

&lt;p&gt;Take a look at this photo and list what we have to do.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Flogin_screen.png?alt=media&amp;amp;token=0c019309-0523-43ec-9f90-f0fe75d16606&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Design a view contain email and password TextField with a round corner.&lt;/li&gt;
  &lt;li&gt;Design button &lt;code class=&quot;highlighter-rouge&quot;&gt;Sign In&lt;/code&gt; with a round corner.&lt;/li&gt;
  &lt;li&gt;Add logo&lt;/li&gt;
  &lt;li&gt;Add 2 buttons below.&lt;/li&gt;
  &lt;li&gt;Toggle enabled button &lt;code class=&quot;highlighter-rouge&quot;&gt;Sign In&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Validate email and password.&lt;/li&gt;
  &lt;li&gt;Connect to service to login.&lt;/li&gt;
  &lt;li&gt;Handle error from service.&lt;/li&gt;
  &lt;li&gt;Handle error with not available internet.&lt;/li&gt;
  &lt;li&gt;Save log in result into local.&lt;/li&gt;
  &lt;li&gt;Show forgot password screen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With a simple log in screen, there are 10+ small tasks to do. I don’t want to mention to log in and sign up in the same screen. And the view controller will contain a lot of codes. It’s horrible.&lt;/p&gt;

&lt;p&gt;Thank God, Extension is here. Extension in Swift is awesome. If you don’t know about Extension, read more &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Extensions.html&quot;&gt;here&lt;/a&gt;.
I split up to 3 extension files:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;FormattingUIExtension: contain with UI code, animation, effect. I call &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView()&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt; to format the UI. I usually do that: set title, run animation, set text color, background, implement delegate in &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;DataValidationExtension: validate email, password, enabled or disabled button, keyboard when input data changed.&lt;/li&gt;
  &lt;li&gt;ServiceCommunicationExtension:
    &lt;ul&gt;
      &lt;li&gt;Connect to service to login.&lt;/li&gt;
      &lt;li&gt;Handle error from service.&lt;/li&gt;
      &lt;li&gt;Handle error with not available internet.&lt;/li&gt;
      &lt;li&gt;Save log in result into local.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And this is my ViewController.swift.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://truongky.files.wordpress.com/2016/01/viewcontroller.png&quot; alt=&quot;viewController&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now I want to add animation, find &lt;code class=&quot;highlighter-rouge&quot;&gt;FormattingUIExtension.swift&lt;/code&gt; and code, service changes, do it in &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceCommunicationExtension.swift&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;You can download my complete project &lt;a href=&quot;https://github.com/nguyentruongky/LogInExtensionSample_Start&quot;&gt;here&lt;/a&gt;.
Don’t add everything in view controller, split it up, manage it easily and forgot the 1000-line-of-code nightmare.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This article is not a tutorial, it’s only a note for friends and myself.&lt;/strong&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Have you ever write a file with more 500 lines of code? I think the answer is YES. Me too, even more 1000 lines. How can you maintain your code? And what do you think when fix a bug, add a function with a 1000-line-of-code file? I’m sure your feeling same to mine. It’s horrible to find something there.</summary></entry><entry><title type="html">PageViewController</title><link href="http://localhost:4000/2016/01/12/PageViewController.html" rel="alternate" type="text/html" title="PageViewController" /><published>2016-01-12T00:00:00+07:00</published><updated>2016-01-12T00:00:00+07:00</updated><id>http://localhost:4000/2016/01/12/PageViewController</id><content type="html" xml:base="http://localhost:4000/2016/01/12/PageViewController.html">&lt;p&gt;I always get tired of rewriting (or copying) code from my previous projects every single time I use UIPageViewController. Finally, I found a way to reuse it anywhere by copying a file then write some small codes.&lt;br /&gt;
Try it now.&lt;br /&gt;
Follow &lt;a href=&quot;http://swiftiostutorials.com/ios-tutorial-using-uipageviewcontroller-create-content-slider-objective-cswift/&quot;&gt;this article&lt;/a&gt; to understand UIPageViewController.&lt;/p&gt;

&lt;p&gt;OK, let’s do some smart thing. Use your current project.&lt;/p&gt;

&lt;p&gt;Create new file name &lt;code class=&quot;highlighter-rouge&quot;&gt;MyPageViewController.swift&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;MyPageViewController&lt;/code&gt; will conform to &lt;code class=&quot;highlighter-rouge&quot;&gt;UIPageViewControllerDataSource&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create an integer variable name &lt;code class=&quot;highlighter-rouge&quot;&gt;contentCount&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var contentCount = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Write a function to setup this controller&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func setupController(numberOfContent: Int) {
    contentCount = numberOfContent

    // 1
    let pageController = UIPageViewController(transitionStyle: UIPageViewControllerTransitionStyle.Scroll, navigationOrientation: UIPageViewControllerNavigationOrientation.Horizontal, options: nil)
    pageController.dataSource = self
    
    // 2
    if contentCount &amp;gt; 0 {
        let firstController = getItemController(0)!
        let startingViewControllers: NSArray = [firstController]
        pageController.setViewControllers(startingViewControllers as? [UIViewController], direction: UIPageViewControllerNavigationDirection.Forward, animated: false, completion: nil)
    }

    // 3
    addChildViewController(pageController)
    self.view.addSubview(pageController.view)
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1): initialize a UIPageViewController. This is what show your content.&lt;/p&gt;

&lt;p&gt;(2): setup the first page for controller&lt;/p&gt;

&lt;p&gt;(3): add UIPageController to &lt;code class=&quot;highlighter-rouge&quot;&gt;MyPageViewController&lt;/code&gt; subview.&lt;/p&gt;

&lt;p&gt;Go ahead, implement &lt;code class=&quot;highlighter-rouge&quot;&gt;UIPageViewControllerDataSource&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func pageViewController(pageViewController: UIPageViewController, viewControllerBeforeViewController viewController: UIViewController) -&amp;gt; UIViewController? {
    let itemController = viewController as! PageItemController
    if itemController.itemIndex &amp;gt; 0 {
        return getItemController(itemController.itemIndex - 1)
    }
    return nil
}

func pageViewController(pageViewController: UIPageViewController, viewControllerAfterViewController viewController: UIViewController) -&amp;gt; UIViewController? {
    let itemController = viewController as! PageItemController
    if itemController.itemIndex + 1 &amp;lt; contentCount {
        return getItemController(itemController.itemIndex+1)
    }
    return nil
}

private func getItemController(itemIndex: Int) -&amp;gt; PageItemController? {
    if itemIndex &amp;lt; contentCount {
        return delegate?.getPageItemAtIndex(itemIndex) as? PageItemController
    }
    return nil
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These method are defined in UIPageViewControllerDataSource and you have to implement it. You understand them after the tutorial on swiftiostutorials.com&lt;/p&gt;

&lt;p&gt;You can see &lt;code class=&quot;highlighter-rouge&quot;&gt;PageItemController&lt;/code&gt;. This is your Page Item Controller. If you don’t want to change the base class, you can name your page item controller &lt;code class=&quot;highlighter-rouge&quot;&gt;PageItemController&lt;/code&gt;. If not, you have to change &lt;code class=&quot;highlighter-rouge&quot;&gt;PageItemController&lt;/code&gt; to another name.&lt;/p&gt;

&lt;p&gt;XCode will ask you “What the hell is delegate?”. So, what the hell is delegate?&lt;/p&gt;

&lt;p&gt;Find out what it is &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/DelegatesandDataSources/DelegatesandDataSources.html&quot;&gt;here&lt;/a&gt;. Now imagine that you are a shopkeeper but you can not ship products to your customer. Delivery man will help you. Delegate is a virtual delivery man. Delegate is a virtual delivery man. In your current controller (MyPageViewController), you can’t do &lt;code class=&quot;highlighter-rouge&quot;&gt;getPageItemAtIndex&lt;/code&gt;, so you tell the delegate do that for you.&lt;/p&gt;

&lt;p&gt;Define delegate now.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protocol PageViewDelegate {
    func getPageItemAtIndex(index: Int) -&amp;gt; UIViewController
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Write this code out of the class scope. I usually write it under import functions.&lt;/p&gt;

&lt;p&gt;And use delegate in MyPageViewController&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var delegate: PageViewDelegate?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s almost done here. You have to implement PageViewDelegate in your main controller. However, I want to show you the complete code for this base class. Go ahead.&lt;/p&gt;

&lt;p&gt;Add new variable to determine should we show indicator dots.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var didShowPageControl = false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add these code at the end of &lt;code class=&quot;highlighter-rouge&quot;&gt;setupController&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if didShowPageControl == true {
    setupPageControl()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add new methods&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private func setupPageControl() {
    let appearance = UIPageControl.appearance()
    appearance.pageIndicatorTintColor = UIColor.grayColor()
    appearance.currentPageIndicatorTintColor = UIColor.whiteColor()
    appearance.backgroundColor = UIColor.darkGrayColor()
}

func presentationCountForPageViewController(pageViewController: UIPageViewController) -&amp;gt; Int {
    if didShowPageControl == false { return 0 }
    return contentCount
}

func presentationIndexForPageViewController(pageViewController: UIPageViewController) -&amp;gt; Int {
    return 0 }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ve done. You can copy it to anywhere you want and use it easily.&lt;/p&gt;

&lt;p&gt;Design your beautiful page item to show on UIPageViewController. Here we will use the PageItemController you created in the swiftiostutorials’s tutorial.&lt;/p&gt;

&lt;p&gt;And in your main view controller, remove all codes in class ViewController then write some new codes. Your class looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ViewController: UIViewController, PageViewDelegate {
    // Initialize it right away here
    private let contentImages = [&quot;nature_pic_1.png&quot;,
                                 &quot;nature_pic_2.png&quot;,
                                 &quot;nature_pic_3.png&quot;,
                                 &quot;nature_pic_4.png&quot;];
    override func viewDidLoad() {
        super.viewDidLoad()
        let pageController = MyPageViewController()
        pageController.delegate = self
        pageController.setupController(contentImages.count)

        addChildViewController(pageController)
        self.view.addSubview(pageController.view)
    }

    func getPageItemAtIndex(index: Int) -&amp;gt; UIViewController {
        let pageItemController = UIStoryboard(name: &quot;Main&quot;, bundle: nil).instantiateViewControllerWithIdentifier(&quot;ItemController&quot;) as! PageItemController
        pageItemController.itemIndex = index
        pageItemController.imageName = contentImages[index]
        return pageItemController
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see your &lt;code class=&quot;highlighter-rouge&quot;&gt;PageViewDelegate&lt;/code&gt; you defined here.&lt;/p&gt;

&lt;p&gt;What you have to do is, define an array of images, initilize a MyPageController instance and implement delegate.&lt;/p&gt;

&lt;p&gt;Take a look at &lt;code class=&quot;highlighter-rouge&quot;&gt;getPageItemAtIndex&lt;/code&gt;. What you want to show in PageItemController, you will code here. For example: you can add new label to show the item’s description, define it and pass data here.&lt;/p&gt;

&lt;p&gt;Run app and enjoy your code.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Now we don’t have to write the repeat code anymore. Copy this file and use it anywhere.&lt;/p&gt;

&lt;p&gt;You can download the complete project &lt;a href=&quot;https://github.com/nguyentruongky/KPageViewController&quot;&gt;at my github&lt;/a&gt;.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">I always get tired of rewriting (or copying) code from my previous projects every single time I use UIPageViewController. Finally, I found a way to reuse it anywhere by copying a file then write some small codes. Try it now. Follow this article to understand UIPageViewController.</summary></entry></feed>