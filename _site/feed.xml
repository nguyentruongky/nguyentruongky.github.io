<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-04-05T02:39:15+07:00</updated><id>http://localhost:4000/</id><title type="html">&amp;lt; Code for life /&amp;gt;</title><subtitle>If you don't build your dream someone will hire you to help build theirs. - Tony A. Gaskins Jr.</subtitle><author><name>Ky Nguyen</name></author><entry><title type="html">Speed up compile time with script dependency</title><link href="http://localhost:4000/2020/04/02/graphql-script.html" rel="alternate" type="text/html" title="Speed up compile time with script dependency" /><published>2020-04-02T00:00:00+07:00</published><updated>2020-04-02T00:00:00+07:00</updated><id>http://localhost:4000/2020/04/02/graphql-script</id><content type="html" xml:base="http://localhost:4000/2020/04/02/graphql-script.html">&lt;p&gt;Large projects have lots of scripts and take few minutes or even dozens of minutes to build. Mine takes 4-5 minutes for every compile time. It’s really inconvenience when implement UI, change spacing or colors. I have to change that.&lt;/p&gt;

&lt;h1 id=&quot;online-instructions&quot;&gt;Online Instructions&lt;/h1&gt;
&lt;p&gt;I followed some instructions to speed it up. You can find it with ease.&lt;/p&gt;

&lt;h1 id=&quot;reduce-not-important-scripts&quot;&gt;Reduce not important scripts&lt;/h1&gt;
&lt;p&gt;Open your &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phrase&lt;/code&gt; and check your scripts. I had 4 running scripts, generating GraphQL API, 2 Pods related scripts, Sentry scripts (upload .dSYM).&lt;/p&gt;

&lt;p&gt;I notice generating GraphQL API and Sentry scripts here. Why do you need it run everytime we compile?&lt;/p&gt;

&lt;h3 id=&quot;get-rid-of-graphql-script&quot;&gt;Get rid of GraphQL script&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;How often do we change GraphQL schemas?&lt;/strong&gt;
Only when implement new features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is where I started. 
Remove GraphQL script and add it into a bash script file. Run script when you need to recompile schema. Here is my script:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# (1)
apollo schema:download --endpoint=server_endpoint path_to_schema_file/schema.json
# (2)
SCHEMA_PATH=$PWD&quot;/project_name&quot;
# (3)
$PWD/Pods/Apollo/scripts/run-bundled-codegen.sh codegen:generate --target=swift --includes='./**/*.graphql' --localSchemaFile=&quot;$SCHEMA_PATH/Services/GraphQL/schema.json&quot; $SCHEMA_PATH/Services/GraphQL/API.swift
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(1): Download latest schema from your server. &lt;code class=&quot;highlighter-rouge&quot;&gt;server_endpoint&lt;/code&gt; is your server path. Usually it’s like this &lt;code class=&quot;highlighter-rouge&quot;&gt;https://api.company_name.com/graphql&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(2): $PWD: get your current directory and point it to your project&lt;/p&gt;

&lt;p&gt;(3): Now generate file. Please make sure you change &lt;code class=&quot;highlighter-rouge&quot;&gt;$SCHEMA_PATH/Services/GraphQL/schema.json&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$SCHEMA_PATH/Services/GraphQL/API.swift&lt;/code&gt; to yours.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;
You have to run &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod u+r+x downloadSchema.sh&lt;/code&gt; at the first time run the bash file.
Then run, &lt;code class=&quot;highlighter-rouge&quot;&gt;./downloadSchema.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Later, just run download script. 
That’s it. I save minutes with this.&lt;/p&gt;

&lt;h3 id=&quot;remove-uploading-script&quot;&gt;Remove uploading script&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;How often do we need to upload .dSYM?&lt;/strong&gt;
Only when release new version&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ask yourself, do you really want to do this? Some extra work is needed when release to upload .dSYM to Sentry (crashed report service I used). But for me, it’s worth to do.&lt;/p&gt;

&lt;p&gt;Some extra work:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Release&lt;/li&gt;
  &lt;li&gt;Download dSYM from AppstoreConnect when finish processing&lt;/li&gt;
  &lt;li&gt;Upload manually&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If it doesn’t matter with you, please try this script. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;sentry-cli upload-dif --org company_name --project project_name --log-level=debug appDsyms.zip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I added it into my &lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt;as an alias, so after download, just run alias and done.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This is my experience, maybe it doesn’t work in your project. Please feel free to discuss &lt;a href=&quot;https://github.com/nguyentruongky/nguyentruongky.github.io/issues/2&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Enjoy coding.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Large projects have lots of scripts and take few minutes or even dozens of minutes to build. Mine takes 4-5 minutes for every compile time. It’s really inconvenience when implement UI, change spacing or colors. I have to change that.</summary></entry><entry><title type="html">Should I use Segue to navigate controllers?</title><link href="http://localhost:4000/2020/03/31/segue.html" rel="alternate" type="text/html" title="Should I use Segue to navigate controllers?" /><published>2020-03-31T00:00:00+07:00</published><updated>2020-03-31T00:00:00+07:00</updated><id>http://localhost:4000/2020/03/31/segue</id><content type="html" xml:base="http://localhost:4000/2020/03/31/segue.html">&lt;p&gt;Many tutorials, iOS books for beginners teach us use Segue. That’s good start. But is it good for you and your projects? From my experience, it’s totally not good. Here the reasons.&lt;/p&gt;
&lt;h1 id=&quot;1-its-slow&quot;&gt;1. It’s slow&lt;/h1&gt;
&lt;p&gt;Storyboard is slow, especially you add many controllers in a Storyboard, that’s a disaster. I wrote something about Storyboard &lt;a href=&quot;https://www.codementor.io/@nguyentruongky/auto-layout-with-storyboard-and-programmatically-r1zuvtzbk&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;2-its-messy&quot;&gt;2. It’s messy&lt;/h1&gt;
&lt;p&gt;When you have 4 or 5 controllers, yes, not too bad. When you have 10 controllers, and screen A can show screen B, C, D, screen B can show D and E, screen E can show A and C. It’s a big pain in the ass.&lt;/p&gt;

&lt;h1 id=&quot;3-you-cant-reuse-your-code&quot;&gt;3. You can’t reuse your code&lt;/h1&gt;
&lt;p&gt;You have to open the storyboards, drag and drop segues many times. When you setup other segues, you have to set &lt;code class=&quot;highlighter-rouge&quot;&gt;modalPresentationStyle&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;In other way, you can easily copy and paste the code.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let vc = DailyBonusController()
vc.modalPresentationStyle = .fullScreen
present(vc, animated: true)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Simple? You can change to any controllers you want, instead of drag and drop to a controller, which located 3 or 4 screens from your current controller.&lt;/p&gt;

&lt;h1 id=&quot;4-typo-mistakes&quot;&gt;4. Typo mistakes&lt;/h1&gt;
&lt;p&gt;Segue identifier is a String, and you can easily have typo mistakes there. If your screens have many destinations, you have to if … else to select what destination to process correct flow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;
If you have to use Segue, try to name identifier like “Show” + your_controller_name. By this way, you don’t have to remember too many things anymore and prevent typo mistakes.&lt;/p&gt;

&lt;h1 id=&quot;5-sending-data&quot;&gt;5. Sending data&lt;/h1&gt;
&lt;p&gt;When you use Segue, you send data to next screen in &lt;code class=&quot;highlighter-rouge&quot;&gt;prepareForSegue&lt;/code&gt;. 
Think this case, you have a UITableView or UICollectionView, selecting row/item shows detail screen. Here is how it works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use segue&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Save the selected IndexPath to a local variable.&lt;/li&gt;
  &lt;li&gt;Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;prepareForSegue&lt;/code&gt; and go to correct if case.&lt;/li&gt;
  &lt;li&gt;Unwrap selected indexpath.&lt;/li&gt;
  &lt;li&gt;Send data to your destination.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Don’t use segue&lt;/strong&gt; 
In &lt;code class=&quot;highlighter-rouge&quot;&gt;didSelectRow&lt;/code&gt; or somewhere you want to show.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Init the destination&lt;/li&gt;
  &lt;li&gt;Send data&lt;/li&gt;
  &lt;li&gt;Navigate.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And you can reuse this way in other places, just copy.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Just some reasons you shouldn’t use segue. Hope this can help you find a better way in your code. Please feel free to share your idea &lt;a href=&quot;https://github.com/nguyentruongky/nguyentruongky.github.io/issues/3&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Enjoy coding.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cover image is from: &lt;a href=&quot;https://stackoverflow.com/questions/16085735/using-storyboards-to-navigate-a-complex-set-of-views-unwind-segue-is-not-enough&quot;&gt;stackoverflow.com&lt;/a&gt;.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Many tutorials, iOS books for beginners teach us use Segue. That’s good start. But is it good for you and your projects? From my experience, it’s totally not good. Here the reasons. 1. It’s slow Storyboard is slow, especially you add many controllers in a Storyboard, that’s a disaster. I wrote something about Storyboard here. 2. It’s messy When you have 4 or 5 controllers, yes, not too bad. When you have 10 controllers, and screen A can show screen B, C, D, screen B can show D and E, screen E can show A and C. It’s a big pain in the ass.</summary></entry><entry><title type="html">UI Implementation - Confirmation popup</title><link href="http://localhost:4000/2018/10/17/UI-Popup-extend.html" rel="alternate" type="text/html" title="UI Implementation - Confirmation popup" /><published>2018-10-17T00:00:00+07:00</published><updated>2018-10-17T00:00:00+07:00</updated><id>http://localhost:4000/2018/10/17/UI-Popup-extend</id><content type="html" xml:base="http://localhost:4000/2018/10/17/UI-Popup-extend.html">&lt;p&gt;In &lt;a href=&quot;/2018/10/10/UI-popup.html&quot;&gt;previous post&lt;/a&gt;, I shared you how to show an animated popup, and explained how to customize your popup. In this post, I share how I use the popup in my projects with confirmation and information alert.&lt;/p&gt;

&lt;h2 id=&quot;confirmation-popup&quot;&gt;Confirmation popup&lt;/h2&gt;

&lt;p&gt;An information popup is used to alert user about some important information, like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2F2018-10%2F2018-10-17-popup-1.PNG?alt=media&amp;amp;token=82348803-b152-4106-b781-7deb9abcb5d2&quot; width=&quot;40%&quot; /&gt;
&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2F2018-10%2F2018-10-09-popup-1.png?alt=media&amp;amp;token=17e3fb44-5ff7-4d2d-89c0-af4c06062ee2&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A confirmation alert is very useful to warn user about next action, for instance, confirm to remove a photo, confirm a withdrawal request… In this post, I will extend the &lt;code class=&quot;highlighter-rouge&quot;&gt;knPopup&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;knConfirmation&lt;/code&gt; to display a confirmation popup.&lt;/p&gt;

&lt;p&gt;The idea is same to the &lt;a href=&quot;/2018/10/10/UI-popup.html&quot;&gt;previous post&lt;/a&gt;, you can customize any UI you want in &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;define-new-controls&quot;&gt;Define new controls&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    class knConfirmation: knPopup {
        private let iconImgView = UIMaker.makeImageView()
        let titleLabel = UIMaker.makeLabel(font: UIFont.boldSystemFont(ofSize: 18),
                                        color: UIColor.darkGray, numberOfLines: 2,
                                        alignment: .center)
        let contentLabel = UIMaker.makeLabel(font: UIFont.systemFont(ofSize: 15),
                                        color: UIColor.lightGray, numberOfLines: 0,
                                        alignment: .center)
        private let stack = UIMaker.makeStackView()
        private let cancelButton = UIMaker.makeButton(titleColor: .darkGray,
                                            font: UIFont.systemFont(ofSize: 15),
                                            cornerRadius: 27,
                                            borderWidth: 1,
                                            borderColor: .darkGray)
        private let buttonStack = UIMaker.makeStackView(axis: .horizontal, distributon: UIStackView.Distribution.fill, alignment: UIStackView.Alignment.fill, space: 16)
        
        required init?(coder aDecoder: NSCoder) {
            super.init(coder: aDecoder)
            setupView()
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A confirmation popup needs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 icon (optional)&lt;/li&gt;
  &lt;li&gt;2 labels: title (optional), content&lt;/li&gt;
  &lt;li&gt;2 buttons: 1 for accept action, 1 for reject action (optional). We have &lt;code class=&quot;highlighter-rouge&quot;&gt;okButton&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;knPopup&lt;/code&gt;, just need one more for reject action&lt;/li&gt;
  &lt;li&gt;2 stack views: 1 to contain 2 buttons, 1 to contain all controls&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;layout-the-view&quot;&gt;Layout the view&lt;/h3&gt;

&lt;p&gt;Same to &lt;a href=&quot;/2018/10/10/UI-popup.html&quot;&gt;previous post&lt;/a&gt;, we will setup auto layout for all controls by code in &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt; function&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    override func setupView() {
        // (1)
        buttonStack.addViews(cancelButton, okButton)
        cancelButton.size(toView: okButton)
        okButton.vertical(toView: buttonStack)
        cancelButton.centerY(toView: okButton)
        
        // (2)
        let spaceView = UIMaker.makeView()
        spaceView.height(12)

        stack.addViews(iconImgView, titleLabel, contentLabel, spaceView, buttonStack)
        iconImgView.square(edge: 56)
        iconImgView.centerX(toView: stack)
        titleLabel.horizontal(toView: stack, space: 16)
        contentLabel.horizontal(toView: stack, space: 16)
        buttonStack.horizontal(toView: stack, space: 16)
        
        // (3)
        container.addSubview(stack)
        stack.fill(toView: container, space: UIEdgeInsets(top: 16, bottom: 16))
        
        okButton.addTarget(self, action: #selector(didSelectOK), for: .touchUpInside)
        cancelButton.addTarget(self, action: #selector(dismiss), for: .touchUpInside)
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1): &lt;code class=&quot;highlighter-rouge&quot;&gt;buttonStack&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIStackView&lt;/code&gt;, so we can’t &lt;code class=&quot;highlighter-rouge&quot;&gt;addSubviews&lt;/code&gt; as usual, but have to &lt;code class=&quot;highlighter-rouge&quot;&gt;addArrangedSubview&lt;/code&gt;. I extend to new function &lt;code class=&quot;highlighter-rouge&quot;&gt;addViews&lt;/code&gt; to shorten the name. :) 
&lt;code class=&quot;highlighter-rouge&quot;&gt;buttonStack&lt;/code&gt; contains the button, so when you don’t need cancel button, you can remove it from &lt;code class=&quot;highlighter-rouge&quot;&gt;buttonStack&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;okButton&lt;/code&gt; automatically fill the &lt;code class=&quot;highlighter-rouge&quot;&gt;superView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That’s why I choose UIStackView for this UI.&lt;/p&gt;

&lt;p&gt;(2): In stackView, you can’t change specific space between 2 views, so I did this trick. Insert a space view with a height I want.&lt;/p&gt;

&lt;p&gt;(3): We need to add &lt;code class=&quot;highlighter-rouge&quot;&gt;stack&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt; is setup to animate when appear/disappear. So we don’t need to care about animation anymore.&lt;/p&gt;

&lt;h3 id=&quot;dynamically-display-what-you-want&quot;&gt;Dynamically display what you want&lt;/h3&gt;

&lt;p&gt;Some popups, you need to show an icon to make it be colorful. Others don’t need title and cancel button. We will dynamicall init what we want.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    init(icon: UIImage? = nil, title: String? = nil, content: String, okTitle: String? = nil, cancelTitle: String? = nil) {
        super.init(frame: .zero)
        set(icon: icon, title: title, content: content, okTitle: okTitle, cancelTitle: cancelTitle)
    }
    
    private func set(icon: UIImage? = nil, title: String? = nil, content: String, okTitle: String? = nil, cancelTitle: String? = nil) {
        if icon == nil {
            iconImgView.removeFromSuperview()
        } else {
            iconImgView.image = icon
        }
        
        if title == nil {
            titleLabel.removeFromSuperview()
        } else {
            titleLabel.text = title
        }
        
        contentLabel.text = content
        if okTitle != nil {
            okButton.setTitle(okTitle, for: .normal)
        }
        
        if cancelTitle == nil {
            cancelButton.removeFromSuperview()
        } else {
            cancelButton.setTitle(cancelTitle, for: .normal)
        }
    }
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Just pass &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; or remove that param from the &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; function. What param is nil, the related control will be removed from UI.&lt;/p&gt;

&lt;h3 id=&quot;run-the-app&quot;&gt;Run the app&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2F2018-10%2F2018-10-17-popup-3.png?alt=media&amp;amp;token=30d703b0-8215-4604-b400-785e96fcce92&quot; width=&quot;40%&quot; /&gt;
&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2F2018-10%2F2018-10-17-popup-4.png?alt=media&amp;amp;token=6a08ca01-b74f-4356-995d-9c535bb0450b&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;live-sample&quot;&gt;Live sample&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2F2018-10%2F2018-10-17-popup-2.png?alt=media&amp;amp;token=8ef6dbcf-cc14-407e-afee-d71a9cd68240&quot; width=&quot;40%&quot; /&gt;
&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2F2018-10%2F2018-10-17-popup-5.jpeg?alt=media&amp;amp;token=7efaec5f-406c-4c08-a74c-b2380ef55aaf&quot; width=&quot;40%&quot; /&gt;
&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2F2018-10%2F2018-10-17-popup-6.jpeg?alt=media&amp;amp;token=d7741048-4ffb-4912-a2fd-59273828bb6e&quot; width=&quot;40%&quot; /&gt;
&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2F2018-10%2F2018-10-17-popup-1.PNG?alt=media&amp;amp;token=82348803-b152-4106-b781-7deb9abcb5d2&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Hope this popup can help you save your time and efforts to display a popup. Customize what you want and share it to me via this &lt;a href=&quot;https://github.com/nguyentruongky/knPopup&quot;&gt;repository&lt;/a&gt;.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">In previous post, I shared you how to show an animated popup, and explained how to customize your popup. In this post, I share how I use the popup in my projects with confirmation and information alert.</summary></entry><entry><title type="html">UI Implementation - Popup</title><link href="http://localhost:4000/2018/10/10/UI-popup.html" rel="alternate" type="text/html" title="UI Implementation - Popup" /><published>2018-10-10T00:00:00+07:00</published><updated>2018-10-10T00:00:00+07:00</updated><id>http://localhost:4000/2018/10/10/UI-popup</id><content type="html" xml:base="http://localhost:4000/2018/10/10/UI-popup.html">&lt;p&gt;Popup is not the best choice to notify users. It takes the users’ attention, and need action to remove popup. But sometimes, popup is a good selection. It displays on the same view, not change eyesight.&lt;/p&gt;

&lt;p&gt;Today, I will implement a popup, inspired by the design of &lt;a href=&quot;https://dribbble.com/shots/2391749-Referral-Window&quot;&gt;Joseph Liu&lt;/a&gt;. Change something to make it simpler for the first post. :D&lt;/p&gt;

&lt;h2 id=&quot;prepare-project&quot;&gt;Prepare project&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2F2018-10%2F2018-10-09-popup-1.png?alt=media&amp;amp;token=17e3fb44-5ff7-4d2d-89c0-af4c06062ee2&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create new &lt;code class=&quot;highlighter-rouge&quot;&gt;Single View App&lt;/code&gt; project&lt;/li&gt;
  &lt;li&gt;Add new file &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferralPopup.swift&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;define-components&quot;&gt;Define components&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    class ReferralPopup: knView {
        let blackView: UIButton = {
            let button = UIButton()
            button.translatesAutoresizingMaskIntoConstraints = false
            button.backgroundColor = UIColor.black.withAlphaComponent(0.5)
            return button
        }()
        let container: UIView = {
            let v = UIView()
            v.translatesAutoresizingMaskIntoConstraints = false
            v.backgroundColor = .white
            v.createRoundCorner(7)
            return v
        }()
        let okButton: UIButton = {
            let button = UIButton()
            button.translatesAutoresizingMaskIntoConstraints = false
            let color = UIColor.color(r: 241, g: 66, b: 70)
            button.backgroundColor = color
            button.setTitle(&quot;COPY &amp;amp; CONTINUE&quot;, for: .normal)
            button.backgroundColor = UIColor.color(r: 71, g: 204, b: 54)
            button.height(54)
            button.createRoundCorner(27)
            return button
        }()
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;blackView&lt;/code&gt; is the transparent background cover the whole screen. We will dismiss the popup when it clicked. You can use UIView and add UIGestureRecognizer also.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt; is the white background container. It’s the main view for popup.&lt;/p&gt;

&lt;h2 id=&quot;layout-the-container&quot;&gt;Layout the container&lt;/h2&gt;

&lt;p&gt;The most important part is how to layout the container&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    override func setupView() {
        let color = UIColor.color(r: 241, g: 66, b: 70)
        
        let instruction = &quot;GET YOUR FREE $10 CREDITS&quot;
        let label = UIMaker.makeLabel(text: instruction,
                                      font: UIFont.boldSystemFont(ofSize: 15),
                                      color: .white,
                                      alignment: .center)
        
        let circle = UIMaker.makeView(background: color)
        let logo = UIMaker.makeImageView(image: UIImage(named: &quot;swift&quot;), contentMode: .scaleAspectFit)
        logo.backgroundColor = .white
        
        let codeTitle = UIMaker.makeLabel(text: &quot;REFERRAL CODE&quot;,
                                          font: UIFont.boldSystemFont(ofSize: 12),
                                          color: UIColor.color(r: 155, g: 165, b: 172),
                                          alignment: .center)
        let codeLabel = UIMaker.makeLabel(text: &quot;KYNGUYEN&quot;,
                                          font: UIFont.boldSystemFont(ofSize: 40),
                                          color: UIColor.color(r: 242, g: 64, b: 65),
                                          alignment: .center)
        
        
        container.addSubviews(views: circle, label, okButton, logo, codeTitle, codeLabel)
        
        // (1)
        label.top(toView: container, space: 24)
        label.horizontal(toView: container, space: 24)
        
        // (2)
        let edge: CGFloat = UIScreen.main.bounds.width * 2
        circle.square(edge: edge)
        circle.createRoundCorner(edge / 2)
        circle.centerX(toView: container)
        circle.bottom(toAnchor: logo.centerYAnchor)
        
        // (3)
        let logoEdge: CGFloat = 66
        logo.square(edge: logoEdge)
        logo.centerX(toView: circle)
        logo.verticalSpacing(toView: label, space: 40)
        logo.createRoundCorner(logoEdge / 2)
        logo.createBorder(1, color: color)
        
        // (4)
        codeTitle.centerX(toView: container)
        codeTitle.verticalSpacing(toView: logo, space: 24)
        
        // (5)
        codeLabel.centerX(toView: container)
        codeLabel.verticalSpacing(toView: codeTitle, space: 8)
        
        // (6)
        okButton.verticalSpacing(toView: codeLabel, space: 24)
        okButton.bottom(toView: container, space: -24)
        okButton.horizontal(toView: container, space: 36)
        okButton.createRoundCorner(28)
        
        okButton.addTarget(self, action: #selector(dismiss), for: .touchUpInside)
        blackView.addTarget(self, action: #selector(dismiss), for: .touchUpInside)
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The sketch is like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2F2018-10%2F09-popup-frame_explaination.png?alt=media&amp;amp;token=e03f6b90-c6de-4dc0-a78b-2faf586ade15&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(1): &lt;code class=&quot;highlighter-rouge&quot;&gt;label&lt;/code&gt; is the instruction label, created by my helper &lt;code class=&quot;highlighter-rouge&quot;&gt;UIMaker&lt;/code&gt;. It is sticked to the &lt;code class=&quot;highlighter-rouge&quot;&gt;container's topAnchor&lt;/code&gt; with 24px spacing. It should be sticked to &lt;code class=&quot;highlighter-rouge&quot;&gt;left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;right&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;textAlignment&lt;/code&gt; is center to prevent long text can break the UI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt;: layout the &lt;code class=&quot;highlighter-rouge&quot;&gt;view1's topAnchor&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;view2's topAnchor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;horizontal&lt;/code&gt;: layout the &lt;code class=&quot;highlighter-rouge&quot;&gt;view1's leftAnchor&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;view2's leftAnchor&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;view1's rightAnchor&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;view2's rightAnchor&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(2): &lt;code class=&quot;highlighter-rouge&quot;&gt;circle&lt;/code&gt; is the top curve. You can use an image instead. The circle has &lt;code class=&quot;highlighter-rouge&quot;&gt;width&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt; equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;UIScreen.main.bounds.width * 2&lt;/code&gt;. It is bigger than the view so we can put its lower edge overlay on the &lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Layout &lt;code class=&quot;highlighter-rouge&quot;&gt;circle&lt;/code&gt; horizonal center to the view, so the circle looks balance. You can try align to left or right to see differences.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;circle&lt;/code&gt;’s bottom edge will align to the &lt;code class=&quot;highlighter-rouge&quot;&gt;logo&lt;/code&gt; center. A little bit difficult to understand. The &lt;code class=&quot;highlighter-rouge&quot;&gt;logo&lt;/code&gt; is sticked to the top, and &lt;code class=&quot;highlighter-rouge&quot;&gt;circle&lt;/code&gt; is sticked to the &lt;code class=&quot;highlighter-rouge&quot;&gt;logo&lt;/code&gt;. I set the &lt;code class=&quot;highlighter-rouge&quot;&gt;circle&lt;/code&gt; sticked to the &lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt;’s top, but the view can’t auto layout. This way, &lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt; can easy auto layout, we don’t need to care the &lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt;’s height.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;square(value: CGFloat)&lt;/code&gt;: set the &lt;code class=&quot;highlighter-rouge&quot;&gt;view's width&lt;/code&gt; equals to &lt;code class=&quot;highlighter-rouge&quot;&gt;view's height&lt;/code&gt; and equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;centerX&lt;/code&gt;: stick &lt;code class=&quot;highlighter-rouge&quot;&gt;view1's centerXAnchor&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;view2's centerXAnchor&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bottom&lt;/code&gt;: layout &lt;code class=&quot;highlighter-rouge&quot;&gt;view1's bottomAnchor&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;view2's bottomAnchor&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(3): &lt;code class=&quot;highlighter-rouge&quot;&gt;logo&lt;/code&gt; has &lt;code class=&quot;highlighter-rouge&quot;&gt;verticalSpacing&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;label&lt;/code&gt; and has 40px spacing. It means the &lt;code class=&quot;highlighter-rouge&quot;&gt;logo&lt;/code&gt;’s top and the &lt;code class=&quot;highlighter-rouge&quot;&gt;label&lt;/code&gt;’s bottom has 40px spacing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;verticalSpacing&lt;/code&gt;: layout &lt;code class=&quot;highlighter-rouge&quot;&gt;view1's topAnchor&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;view2's bottomAnchor&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(4), (5): same to &lt;code class=&quot;highlighter-rouge&quot;&gt;codeTitle&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;codeLabel&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;verticalSpacing&lt;/code&gt; will make a space between them.&lt;/p&gt;

&lt;p&gt;(6): &lt;code class=&quot;highlighter-rouge&quot;&gt;okButton&lt;/code&gt; has &lt;code class=&quot;highlighter-rouge&quot;&gt;verticalSpacing&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bottom&lt;/code&gt;. So keep in mind, the view can automatically calculate the height of the view.&lt;/p&gt;

&lt;h2 id=&quot;display-the-popup&quot;&gt;Display the popup&lt;/h2&gt;

&lt;p&gt;The popup is ready to display. Let’s display it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    func show(in view: UIView) {
        addSubviews(views: blackView, container)
        blackView.fill(toView: self)
        container.centerY(toView: self)
        container.horizontal(toView: self, space: 24)
        
        blackView.alpha = 0
        UIView.animate(withDuration: 0.1, animations:
            { [weak self] in self?.blackView.alpha = 1 })
        container.zoomIn(true)
        
        view.addSubviews(views: self)
        fill(toView: view)
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will display the popup inside the controller’s view. Rememeber 3 views: &lt;code class=&quot;highlighter-rouge&quot;&gt;blackView&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;. We will add &lt;code class=&quot;highlighter-rouge&quot;&gt;blackView&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;. And we add &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;containerView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;view.zoomIn(true)&lt;/code&gt; will show the popup with a slight zoom animation.&lt;/p&gt;

&lt;h2 id=&quot;dismiss-the-popup&quot;&gt;Dismiss the popup&lt;/h2&gt;

&lt;p&gt;Quite hard here for dismiss animation. The popup zooms in a little bit and zooms out to disappear.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    @objc func dismiss() {
        let initialValue: CGFloat = 1
        let middleValue: CGFloat = 1.025
        let endValue: CGFloat = 0.001
        func fadeOutContainer() {
            UIView.animate(withDuration: 0.2, animations:
                { [weak self] in self?.container.alpha = 0 })
        }
        func zoomInContainer() {
            UIView.animate(withDuration: 0.05,
                           animations: { [weak self] in self?.container.scale(value: middleValue) })
        }
        func zoomOutContainer() {
            UIView.animate(withDuration: 0.3, delay: 0.05, options: .curveEaseIn,
                           animations:
                { [weak self] in
                    self?.container.scale(value: endValue)
                    self?.blackView.alpha = 0
                }, completion: { [weak self] _ in self?.removeFromSuperview() })
        }
        
        container.transform = container.transform.scaledBy(x: initialValue , y: initialValue)
        fadeOutContainer()
        zoomInContainer()
        zoomOutContainer()
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;time-to-run&quot;&gt;Time to run&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Add a button to &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt; and show the popup in the button event&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    @objc func showReferralPopup() {
        ReferralPopup().show(in: view)
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is how it looks after coding.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2F2018-10%2F2018-10-09-popup.gif?alt=media&amp;amp;token=53559318-3d67-47f0-a794-1f0bdc13b37d&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;do-it-better&quot;&gt;Do it better&lt;/h2&gt;

&lt;p&gt;You can add new class &lt;code class=&quot;highlighter-rouge&quot;&gt;Popup&lt;/code&gt; and move components, full &lt;code class=&quot;highlighter-rouge&quot;&gt;show&lt;/code&gt; function, full &lt;code class=&quot;highlighter-rouge&quot;&gt;dismiss&lt;/code&gt; function and empty &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Popup&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferralPopup&lt;/code&gt; is inherited from &lt;code class=&quot;highlighter-rouge&quot;&gt;Popup&lt;/code&gt;. You can add new popup easily just set inherit from &lt;code class=&quot;highlighter-rouge&quot;&gt;Popup&lt;/code&gt; and layout your new view in its &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Full code can pull from &lt;a href=&quot;https://github.com/nguyentruongky/knPopup&quot;&gt;my Github&lt;/a&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Popup is not the best choice to notify users. It takes the users’ attention, and need action to remove popup. But sometimes, popup is a good selection. It displays on the same view, not change eyesight.</summary></entry><entry><title type="html">Series UI Implementation</title><link href="http://localhost:4000/2018/10/05/UI-implementation-series.html" rel="alternate" type="text/html" title="Series UI Implementation" /><published>2018-10-05T00:00:00+07:00</published><updated>2018-10-05T00:00:00+07:00</updated><id>http://localhost:4000/2018/10/05/UI-implementation-series</id><content type="html" xml:base="http://localhost:4000/2018/10/05/UI-implementation-series.html">&lt;p&gt;Hey, I am back with a series: &lt;strong&gt;UI Implementation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I didn’t write any blogs for long time because of my startup. It is launched and dead in silence. But learnt lot of new things for my career path.&lt;/p&gt;

&lt;p&gt;Any iOS apps need very good UI/UX to attract users. Users will remove bad UI/UX app immediately they try it on the first time or second times (very patient users). UI design is very beautiful with Sketch/Photoshop/Illustrator. But with Xcode, not exactly beautiful like this. We have some different screen sizes, with notch and without notch.&lt;/p&gt;

&lt;p&gt;In this series, hopefully I can write good posts to show you how we can do the best UI for our apps. To do this, I abandoned Storyboard and use Swift programmatically. Use my code base to make development easier. Will share you on every projects.&lt;/p&gt;

&lt;p&gt;I will right back with first post.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2018/10/05/UI-popup.html&quot; target=&quot;_blank&quot;&gt;Popup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Cover photo: Awesome design by &lt;a href=&quot;https://dribbble.com/shots/4222725-iOS-App-Concept&quot;&gt;Surja Sen Das Raj &lt;/a&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Hey, I am back with a series: UI Implementation.</summary></entry><entry><title type="html">Tasks iOs - Create task</title><link href="http://localhost:4000/2018/05/17/tasks-create-task.html" rel="alternate" type="text/html" title="Tasks iOs - Create task" /><published>2018-05-17T00:00:00+07:00</published><updated>2018-05-17T00:00:00+07:00</updated><id>http://localhost:4000/2018/05/17/tasks-create-task</id><content type="html" xml:base="http://localhost:4000/2018/05/17/tasks-create-task.html">&lt;p&gt;Keep moving in Google Tasks series today with Create Task. In this note, I will show you how to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Display a list of task&lt;/li&gt;
  &lt;li&gt;Add new tasks&lt;/li&gt;
  &lt;li&gt;Make some animations&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;add-uitableview-to-controller&quot;&gt;Add UITableView to controller&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Open file &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController.swift&lt;/code&gt; and change &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt; class to &lt;code class=&quot;highlighter-rouge&quot;&gt;tkTasksListController&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Change file &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController.swift&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;TaskList.swift&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt; and clear all content of class &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;. Paste these code to it&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    var window: UIWindow?
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&amp;gt; Bool {
        setupApp()
        return true
    }
    
    func setupApp() {
        window = UIWindow(frame: UIScreen.main.bounds)
        // (1)
        window!.rootViewController = tkTasksListController()
        window!.backgroundColor = UIColor.white
        window?.makeKeyAndVisible()
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I am a fan of auto layout by code, so I usually use this way to show the controller instead of Storyboard. You can replace &lt;code class=&quot;highlighter-rouge&quot;&gt;takTaskListController&lt;/code&gt; to any controller you want.&lt;/p&gt;

&lt;p&gt;I will wrap the rootViewController to a UINavigationController, but not now.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Keep moving, open file &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;, and change data of line &lt;code class=&quot;highlighter-rouge&quot;&gt;Main storyboard file base name&lt;/code&gt; to empty&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run the app. App works well. We can safely remove &lt;code class=&quot;highlighter-rouge&quot;&gt;Main.storyboard&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Back to class &lt;code class=&quot;highlighter-rouge&quot;&gt;tkTasksListController&lt;/code&gt;. We change a little bit. Class now look like this&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    class tkTasksListController: knCustomTableController {
        var datasource = [tkTask]()

        override func setupView() {
            // (1)
            view.addSubviews(views: titleLabel, tableView, stateView, functionView)
            
            tableView.horizontal(toView: view)
            tableView.verticalSpacing(toView: titleLabel, space: 24)
            tableView.bottom(toAnchor: functionView.topAnchor, space: -24)
            ...
        }
        ...
    }

    extension tkTasksListController {
        // (2)
        override func tableView(_ tableView: UITableView,
                            numberOfRowsInSection section: Int) -&amp;gt; Int {
            return datasource.count }
        
        // (3)
        override func tableView(_ tableView: UITableView,
                                heightForRowAt indexPath: IndexPath) -&amp;gt; CGFloat {
            return UITableViewAutomaticDimension }
        
        // (4)
        override func tableView(_ tableView: UITableView,
                                cellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell {
            let cell = tableView.dequeueReusableCell(withIdentifier: &quot;tkTaskCell&quot;,
                                                    for: indexPath) as! tkTaskCell
            cell.data = datasource[indexPath.row]
            return cell
        }
    }

    // (5)
    override func registerCells() {
        tableView.register(tkTaskCell.self, forCellReuseIdentifier: &quot;tkTaskCell&quot;)
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1): Add &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView&lt;/code&gt; to view and set auto layout for it. &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView&lt;/code&gt; is stretched from the bottom of &lt;code class=&quot;highlighter-rouge&quot;&gt;titleLabel&lt;/code&gt; to the top of &lt;code class=&quot;highlighter-rouge&quot;&gt;functionView&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(2), (3), (4): is tableView DataSource. It’s basic for &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt;, you know it very well, I think.&lt;/p&gt;

&lt;p&gt;(5): We need to register the cell to reuse, without this step, &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt; doesn’t know your cell and throw an exception.&lt;/p&gt;

&lt;h3 id=&quot;design-cell&quot;&gt;Design Cell&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt; needs &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableCell&lt;/code&gt;. Help it with new file name &lt;code class=&quot;highlighter-rouge&quot;&gt;TaskCell.swift&lt;/code&gt; with content below&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    import UIKit

    // (1)
    class tkTask {
        var name: String?
        var finish = false
        
        init() {}
        init(name: String) {
            self.name = name
        }
    }

    // (2)
    class tkTaskCell: knTableCell {
        var data: tkTask? {
            didSet {
                guard let data = data else { return }
                nameLabel.text = data.name
            }
        }
        
        let doneButton = knUIMaker.makeButton()
        let nameLabel = knUIMaker.makeLabel(font: .systemFont(ofSize: 16),
                                            color: .black,
                                            numberOfLines: 0)
        
        override func setupView() {
            let line = knUIMaker.makeLine(color: UIColor.color(value: 230), height: 1)
            addSubviews(views: doneButton, nameLabel, line)
            
            doneButton.left(toView: self, space: 24)
            doneButton.centerY(toView: nameLabel)
            
            nameLabel.vertical(toView: self, space: 24)
            nameLabel.leftHorizontalSpacing(toView: doneButton, space: -24)
            nameLabel.right(toView: self, space: -24)
            
            line.horizontal(toView: self)
            line.bottom(toView: self)
            
            doneButton.createBorder(2, color: UIColor.color(value: 110))
            doneButton.square(edge: 24)
            doneButton.createRoundCorner(12)
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1): We need a model to keep the task content, this model is not as simple as this, it will expand to bigger soon. Keep it simple first.&lt;/p&gt;

&lt;p&gt;(2): Same to model, the cell is designed in the simplest way first.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now we can run the app. But I am sure, you can’t see the &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView&lt;/code&gt;. Add &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView.backgroundColor = .green&lt;/code&gt; to the last of &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt; method. App will be like this&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Ftodo%2Ftask_tableview.png?alt=media&amp;amp;token=b309df22-4e15-4b05-850b-7e23ac9618db&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Problem found. We will hide the &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView&lt;/code&gt; show the &lt;code class=&quot;highlighter-rouge&quot;&gt;stateView&lt;/code&gt; when there is no task. We can solve it by replace&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    var datasource = [tkTask]()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    
    var datasource = [tkTask]() { didSet {
        tableView.reloadData()
        let isEmpty = datasource.count &amp;gt; 0
        stateView.isHidden = isEmpty
        tableView.isHidden = !isEmpty
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add dummy data&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    override func fetchData() {
        datasource = [
            tkTask(name: &quot;Hehe&quot;),
            tkTask(name: &quot;Aloha&quot;),
        ]
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Run and see. Don’t forget to remove &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView.backgroundColor = .green&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt; method.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Ftodo%2Ftask_tableview_data.png?alt=media&amp;amp;token=34ddc947-a628-4ce2-b8c5-08b453004571&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;add-new-task&quot;&gt;Add new task&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Add these 2 lines to the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt; method&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    newTaskView.saveButton.addTarget(self, action: #selector(addNewTask))
    newTaskView.textField.delegate = self

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can select save button or tap return key on the keyboard to save task.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    // (1)
    @objc func addNewTask() {
        datasource.insert(tkTask(name: newTaskView.textField.text!), at: 0)
        newTaskView.textField.text = &quot;&quot;
        hideCreateTaskView()
    }

    // (2)
    extension tkTasksListController: UITextFieldDelegate {
        func textFieldShouldReturn(_ textField: UITextField) -&amp;gt; Bool {
            addNewTask()
            return true
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1): We will add new task directly to datasource, and &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView&lt;/code&gt; will reload to display new data. Same to the Google Task, we need to clear the textfield content and hide the &lt;code class=&quot;highlighter-rouge&quot;&gt;newTaskView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(2): Action for event return key pressed.&lt;/p&gt;

&lt;p&gt;The textfield is automatically correct my text, but I am using Vietnamese to test, so it makes me annoy. I turn if off in &lt;code class=&quot;highlighter-rouge&quot;&gt;tkCreateTaskView&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt; method.&lt;/p&gt;

&lt;h3 id=&quot;animate-to-show-more-options&quot;&gt;Animate to show more options&lt;/h3&gt;

&lt;p&gt;App is not as simple as text. App needs animation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Ftodo%2Ftask_animate_show_task_option.gif?alt=media&amp;amp;token=4bb7773c-7ecb-441c-828f-dd1f8cf3f916&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Very simple animation. We can see 4 things we need to do.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Zoom animation for &lt;code class=&quot;highlighter-rouge&quot;&gt;addButton&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Rotate &lt;code class=&quot;highlighter-rouge&quot;&gt;addButton&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Change &lt;code class=&quot;highlighter-rouge&quot;&gt;addButton&lt;/code&gt; color&lt;/li&gt;
  &lt;li&gt;Animate &lt;code class=&quot;highlighter-rouge&quot;&gt;detailButton&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;calendarButton&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Do step by step.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Press &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + shift + O&lt;/code&gt; to quick open file &lt;code class=&quot;highlighter-rouge&quot;&gt;knUIButton.swift&lt;/code&gt;. This is my extensions for UIButton. We need to add 2 extensions here.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    extension UIButton {
        func animateZooming() {
            // (1)
            guard let parentView = superview,
                  let edge = imageView?.frame.size.height else { return }
            let circo = UIView(frame: CGRect(x: 0, y: 0, width: edge, height: edge))
            circo.backgroundColor = UIColor.lightGray.withAlphaComponent(0.1)
            
            parentView.addSubviews(views: circo)
            circo.center = center
            circo.createRoundCorner(edge / 2)

            // (2)
            let level: CGFloat = 2.5
            UIView.animate(withDuration: 0.3, animations: {
                circo.transform = CGAffineTransform(scaleX: level, y: level)
            }, completion: { _ in
                circo.removeFromSuperview()
            })
        }
        
        // (3)
        func animateRotation(angle: CGFloat) {
            UIView.animate(withDuration: 0.3, animations: { [weak self] in
                guard let `self` = self else { return }
                self.transform = self.transform.rotated(by: angle)
            })
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Method &lt;code class=&quot;highlighter-rouge&quot;&gt;animateZooming&lt;/code&gt; only used for &lt;code class=&quot;highlighter-rouge&quot;&gt;addButton&lt;/code&gt; or other buttons with same size at this moment. Why? Because the level (2) is specific for it. We will make it flexible for other buttons later if needed. We can do this yourself. Just try and find a good number for you.&lt;/p&gt;

&lt;p&gt;(1): The idea is to add a view to the superView of button and animate this view. Nothing affects to button. There are many ways to make this animation, but I choose the easiest one.&lt;/p&gt;

&lt;p&gt;(2): Just simple rotate the whole button with an angle.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open file &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateTaskView.swift&lt;/code&gt; to add new buttons and animation&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    let detailButton = knUIMaker.makeButton(image: UIImage(named: &quot;detail&quot;))
    let calendarButton = knUIMaker.makeButton(image: UIImage(named: &quot;event&quot;))

    override func setupView() {
        addSubviews(views: textField, addButton, saveButton, detailButton, calendarButton)
        ...
        detailButton.fill(toView: addButton)
        calendarButton.fill(toView: addButton)

        detailButton.alpha = 0
        calendarButton.alpha = 0
        ...

        addButton.addTarget(self, action: #selector(showTaskOption))
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Setup layout for new 2 buttons, and hide them by changing their opacity to 0, we will animate to display them.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    var taskOptionShown = false
    @objc func showTaskOption() {

        addButton.animateZooming()
        if taskOptionShown == false {
            changeAddButtonColor(UIColor.color(r: 96, g: 99, b: 104))
            addButton.animateRotation(angle: CGFloat.pi / 4)
            animateDetailButton(visible: true)
            animateCalendarButton(visible: true)
        }
        else {
            changeAddButtonColor(UIColor.color(r: 71, g: 136, b: 241))
            addButton.animateRotation(angle: -CGFloat.pi / 4)
            animateDetailButton(visible: false)
            animateCalendarButton(visible: false)
        }
        
        taskOptionShown = !taskOptionShown
    }

    func changeAddButtonColor(_ color: UIColor) {
        addButton.tintColor = color
    }
    
    func animateDetailButton(visible: Bool) {
        let xPos = detailButton.center.x + 8 * (visible ? 1 : -1)
        let alpha: CGFloat = visible ? 1 : 0
        UIView.animate(withDuration: 0.25, animations: { [weak self] in
            guard let detailButton = self?.detailButton else { return }
            detailButton.transform = CGAffineTransform(translationX: xPos, y: 0)
            detailButton.alpha = alpha
        })
    }
    
    func animateCalendarButton(visible: Bool) {
        let xPos = detailButton.center.x + 64 * (visible ? 1 : -1)
        let alpha: CGFloat = visible ? 1 : 0
        UIView.animate(withDuration: 0.25, animations: { [weak self] in
            guard let calendarButton = self?.calendarButton else { return }
            calendarButton.transform = CGAffineTransform(translationX: xPos, y: 0)
            calendarButton.alpha = alpha
        })
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have a flag &lt;code class=&quot;highlighter-rouge&quot;&gt;taskOptionShown&lt;/code&gt; to mark whether buttons displayed.&lt;/p&gt;

&lt;p&gt;As I said before, we have 4 things to do in this animation, these are 4 things.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    addButton.animateZooming()
    changeAddButtonColor
    addButton.animateRotation
    animateDetailButton + animateCalendarButton

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Zoom animation in the gif image is too fast. You can run and see in your project.&lt;/p&gt;

&lt;p&gt;Run the app and you can see the animation but the addButton color is not changed. We need extra step.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    let addButton = knUIMaker.makeButton(image: UIImage(named: &quot;add_fill&quot;)?.changeColor())

    override func setupView() {
        ...
        addButton.tintColor = UIColor.color(r: 71, g: 136, b: 241)
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We need to make the image for imageView inside the button available to be changed color and set default color for it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Ftodo%2Ftask_demo_part_2.gif?alt=media&amp;amp;token=f7ad3b36-69bc-4285-a533-b9bc4fef7dd6&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That’s enough for today. Keep reading, I’ll come back soon.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Keep moving in Google Tasks series today with Create Task. In this note, I will show you how to</summary></entry><entry><title type="html">Tasks iOs - Homescreen</title><link href="http://localhost:4000/2018/05/16/tasks-home.html" rel="alternate" type="text/html" title="Tasks iOs - Homescreen" /><published>2018-05-16T00:00:00+07:00</published><updated>2018-05-16T00:00:00+07:00</updated><id>http://localhost:4000/2018/05/16/tasks-home</id><content type="html" xml:base="http://localhost:4000/2018/05/16/tasks-home.html">&lt;p&gt;Do you want to find a todo list? Google Tasks is a good choice for you. Very easy to use, very cool to keep using.&lt;/p&gt;

&lt;p&gt;I admire this app and want to make a good app like this. In this series, I will try to copy Google Tasks in iOS. Hope you keep reading.&lt;/p&gt;

&lt;h3 id=&quot;preparation&quot;&gt;Preparation&lt;/h3&gt;
&lt;p&gt;I use some code collection from my personal codebase. You can download it at &lt;a href=&quot;https://github.com/nguyentruongky/codebase&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Init an empty project and added my &lt;code class=&quot;highlighter-rouge&quot;&gt;mustHave&lt;/code&gt; folder&lt;/p&gt;

&lt;h3 id=&quot;design-ui&quot;&gt;Design UI&lt;/h3&gt;
&lt;p&gt;Today, we design this screen&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Ftodo%2F1.fresh_start.png?alt=media&amp;amp;token=c7be1937-b1e8-4021-95d4-9614213e8e82&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are some parts we need do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create custom views for the state view (center part) and the function view (bottom part)&lt;/li&gt;
  &lt;li&gt;Design views and set auto layout&lt;/li&gt;
  &lt;li&gt;Add animation when select &lt;code class=&quot;highlighter-rouge&quot;&gt;Add a new task&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;create-state-view&quot;&gt;Create state view&lt;/h3&gt;
&lt;p&gt;App has states, and app needs state view. So if we design a good view, we can reuse in other apps. &lt;strong&gt;This is not a good design, just make it done for this project only.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add new file &lt;code class=&quot;highlighter-rouge&quot;&gt;StateView.swift&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Paste these code into file&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    import UIKit

    class tkStateView: knView {
        let imageView = knUIMaker.makeImageView(image: UIImage(named: &quot;first_empty&quot;), contentMode: .scaleAspectFill)
        let emptyBoldLabel = knUIMaker.makeLabel(text: &quot;A fresh start&quot;,
                                                font: UIFont.boldSystemFont(ofSize: 16),
                                                color: .black, alignment: .center)
        let emptyActionLabel = knUIMaker.makeLabel(text: &quot;Anything to add?&quot;,
                                                font: UIFont.systemFont(ofSize: 16),
                                                color: UIColor.color(r: 96, g: 99, b: 104),
                                                alignment: .center)
        override func setupView() {
            addSubviews(views: imageView, emptyBoldLabel, emptyActionLabel)
            addConstraints(withFormat: &quot;V:|[v0]-44-[v1]-8-[v2]|&quot;, views: imageView, emptyBoldLabel, emptyActionLabel)
            
            imageView.square(edge: screenWidth / 2)
            imageView.horizontal(toView: self)
            
            emptyBoldLabel.horizontal(toView: self)
        
            emptyActionLabel.horizontal(toView: self)
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;*Note&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;I usually use alias to start the name of class/struct. In this project, it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;tk&lt;/code&gt;. With this alias, we can prevent some same names, like NotificationCenter…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;

&lt;p&gt;Hope code is easy to understand. This view can automatically calculate the size. Its width is &lt;code class=&quot;highlighter-rouge&quot;&gt;screen width / 2&lt;/code&gt;, equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;imageView&lt;/code&gt;. Its height is calculated by constraints &lt;code class=&quot;highlighter-rouge&quot;&gt;V:|[v0]-44-[v1]-8-[v2]|&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;create-function-view&quot;&gt;Create function view&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Add new file name &lt;code class=&quot;highlighter-rouge&quot;&gt;FunctionView.swift&lt;/code&gt; and paste code below&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    class tkFunctionView: knView {
        let addButton = knUIMaker.makeButton()
        let listOptionButton = knUIMaker.makeButton(image: UIImage(named: &quot;dot_menu&quot;))
        let accountOptionButton = knUIMaker.makeButton(image: UIImage(named: &quot;dash_menu&quot;))
        
        override func setupView() {
            let plusIcon = knUIMaker.makeImageView(image: UIImage(named: &quot;add&quot;)!,
                                                contentMode: .scaleAspectFit)
            plusIcon.change(color: .white)
            let addLabel = knUIMaker.makeLabel(text: &quot;Add a new task&quot;,
                                           font: .boldSystemFont(ofSize: 16),
                                           color: .white)
            let addView = knUIMaker.makeView()
            addView.addSubviews(views: plusIcon, addLabel)
            addView.addConstraints(withFormat: &quot;H:|[v0]-16-[v1]|&quot;,
                               views: plusIcon, addLabel)
            plusIcon.centerY(toView: addView)
            addLabel.centerY(toView: addView)
            
            addButton.addSubviews(views: addView)
            addView.center(toView: addButton)
            addButton.createRoundCorner(30)
            addButton.backgroundColor = UIColor.color(r: 71, g: 136, b: 241)
            
            let line = knUIMaker.makeLine(color: .color(value: 234), height: 3)
            addSubviews(views: line, addButton, listOptionButton, accountOptionButton)
            
            line.horizontal(toView: self)
            line.centerY(toView: addButton)
            
            addButton.top(toView: self)
            addButton.centerX(toView: self)
            addButton.size(CGSize(width: screenWidth / 1.8, height: 60))
            
            listOptionButton.right(toView: self, space: -24)
            listOptionButton.verticalSpacing(toView: addButton)
            
            accountOptionButton.left(toView: self, space: 24)
            accountOptionButton.verticalSpacing(toView: addButton)
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;When you work in a project, I’m sure you don’t do like this. I have to try to design UI in the main view. When everything works great, I split them up to smaller view to be easier to reuse.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;implement-homescreen-ui&quot;&gt;Implement homescreen UI&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Open file &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController.swift&lt;/code&gt; and change base class to &lt;code class=&quot;highlighter-rouge&quot;&gt;knController&lt;/code&gt;. That’s just a UIViewController and I added some extensions for it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Define some views&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    let titleLabel = knUIMaker.makeLabel(text: &quot;My Tasks&quot;,
                                            font: UIFont.systemFont(ofSize: 36),
                                            color: .black)
    let stateView = tkStateView()
    let functionView = tkFunctionView()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Override &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt; method from base class&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    override func setupView() {
        view.addSubviews(views: titleLabel, stateView, functionView)
        
        titleLabel.topLeft(toView: view, top: 68, left: 54)
        
        stateView.center(toView: view)
        
        functionView.horizontal(toView: view)
        functionView.bottom(toView: view)
        functionView.height(120)        
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Run and see.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Ftodo%2F1.result_fresh_start.png?alt=media&amp;amp;token=13a4dbcd-f277-4510-8860-f4f4eb6c34a7&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I don’t like shadow, so I skip drop shadow for the line and the add button in &lt;code class=&quot;highlighter-rouge&quot;&gt;tkFunctionView&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;add-createtaskview&quot;&gt;Add CreateTaskView&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Add new file name &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateTaskView.swift&lt;/code&gt; and paste code below&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    class tkCreateTaskView: knView {
        let taskNameTextView = knUIMaker.makeTextView(placeholder: &quot;New task&quot;,
                                                  font: .systemFont(ofSize: 18),
                                                  color: .black)
        let addButton = knUIMaker.makeButton(image: UIImage(named: &quot;add_fill&quot;))
        let saveButton = knUIMaker.makeButton(title: &quot;Save&quot;,
                                          titleColor: .color(r: 68, g: 137, b: 242),
                                          font: .boldSystemFont(ofSize: 18))
        var officalBounds = CGRect.zero
        
        override func setupView() {
            taskNameTextView.showsVerticalScrollIndicator = false
            taskNameTextView.returnKeyType = .done
            taskNameTextView.autocorrectionType = .no

            addSubviews(views: taskNameTextView, addButton, saveButton)
            
            taskNameTextView.horizontal(toView: self, space: 24)
            taskNameTextView.top(toView: self, space: 16)
            
            addButton.bottomLeft(toView: self, bottom: -16, left: 24)
            addButton.square(edge: 44)
            
            saveButton.right(toView: self, space: -24)
            saveButton.centerY(toView: addButton)
            
            taskNameTextView.height(44)
            backgroundColor = .white
        }
        
        override func layoutSubviews() {
            // (1)
            guard officalBounds != bounds else { return }
            officalBounds = bounds
            makeRoundCorner()
        }

        func makeRoundCorner() {
            let maskPath = UIBezierPath(roundedRect: bounds,
                                        byRoundingCorners: [.topRight, .topLeft],
                                        cornerRadii: CGSize(width: 20, height: 20))
            let shape = CAShapeLayer()
            shape.path = maskPath.cgPath
            layer.mask = shape
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1): method &lt;code class=&quot;highlighter-rouge&quot;&gt;layoutSubviews&lt;/code&gt; is called multi times. We don’t need to do anything if &lt;code class=&quot;highlighter-rouge&quot;&gt;bounds&lt;/code&gt; does not change.&lt;/p&gt;

&lt;h3 id=&quot;animate-to-show-createtaskview&quot;&gt;Animate to show CreateTaskView&lt;/h3&gt;

&lt;p&gt;Official UI&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Ftodo%2F2.add_task.jpeg?alt=media&amp;amp;token=7550a6e5-c464-4d68-a4d7-8036fbad53ac&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt; class and add some code&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    let newTaskView: tkCreateTaskView = {
        let view = tkCreateTaskView()
        view.frame.size = CGSize(width: screenWidth, height: 130)
        // (1)
        view.alpha = 0
        return view
    }()
    
    // (2)
    override var inputAccessoryView: UIView? { return newTaskView }
    override var canBecomeFirstResponder: Bool { return true }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1): We will animate the view opacity in next step&lt;/p&gt;

&lt;p&gt;(2): There are 2 ways to make the UI like this&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, add &lt;code class=&quot;highlighter-rouge&quot;&gt;newTaskView&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt; and set auto layout. Observe Keyboard Notification and animate the constraints.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Second, set &lt;code class=&quot;highlighter-rouge&quot;&gt;newTaskView&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;inputAccessoryView&lt;/code&gt;. Much easier. This is what I am doing&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Add action to show &lt;code class=&quot;highlighter-rouge&quot;&gt;newTaskView&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt; method&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    override func setupView() {
        ...
        functionView.addButton.addTarget(self, action: #selector(showCreateTaskView))
    }

    @objc func showCreateTaskView() {
        newTaskView.taskNameTextView.becomeFirstResponder()
        UIView.animate(withDuration: 0.35, animations: { [weak self] in
            self?.newTaskView.alpha = 1
        })
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Run and see.&lt;/li&gt;
  &lt;li&gt;Almost done. Just miss a black view overlay the main view. Get it done.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    @objc func showBlackView() {
        let blackButton = knUIMaker.makeButton()
        blackButton.backgroundColor = UIColor.black.withAlphaComponent(0.5)
        blackButton.tag = 1001
        view.addSubviews(views: blackButton)
        blackButton.fill(toView: view)
        blackButton.addTarget(self, action: #selector(hideCreateTaskView))
    }

    @objc func hideCreateTaskView() {
        let blackButton = view.viewWithTag(1001)
        newTaskView.taskNameTextView.resignFirstResponder()
        UIView.animate(withDuration: 0.35, animations: { [weak self] in
            self?.newTaskView.alpha = 0
            blackButton?.alpha = 0
        })

        run({ blackButton?.removeFromSuperview()
            }, after: 0.35)
    }

    @objc func showCreateTaskView() {
        showBlackView() 
        ...
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;OK, run again for final result&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Ftodo%2F2.result_add_task.gif?alt=media&amp;amp;token=ac236b54-5f44-4e47-948c-974854a8f929&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;We’ve done the first part. You can download the source &lt;a href=&quot;https://drive.google.com/open?id=1jX8toVMnIAHmmvM_HwCXjvgur6x4dquF&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Do you want to find a todo list? Google Tasks is a good choice for you. Very easy to use, very cool to keep using.</summary></entry><entry><title type="html">Unsplash iOs - Homescreen - Transition to view photo fullscreen</title><link href="http://localhost:4000/2018/04/30/transition-to-detail.html" rel="alternate" type="text/html" title="Unsplash iOs - Homescreen - Transition to view photo fullscreen" /><published>2018-04-30T00:00:00+07:00</published><updated>2018-04-30T00:00:00+07:00</updated><id>http://localhost:4000/2018/04/30/transition-to-detail</id><content type="html" xml:base="http://localhost:4000/2018/04/30/transition-to-detail.html">&lt;h2 id=&quot;whole-series&quot;&gt;Whole series&lt;/h2&gt;

&lt;p&gt;I am making an app like Unsplash iOs to practise skills. This is the part 3 in the series.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Part 1: &lt;a href=&quot;/2018/04/20/unsplash-homescreen.html&quot; target=&quot;_blank&quot;&gt;Note&lt;/a&gt; &lt;a href=&quot;https://drive.google.com/open?id=1eJWCPYe0mrLj30yUhHixL3kKe1vXNipX&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Part 2: &lt;a href=&quot;/2018/04/23/unsplash-header-collection.html&quot; target=&quot;_blank&quot;&gt;Note&lt;/a&gt; &lt;a href=&quot;https://drive.google.com/open?id=17nrIA8hjXWOiofVlAmR-G1aL-xx65vvY&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Part 3: &lt;a href=&quot;/2018/04/26/unsplash-home-animation.html&quot; target=&quot;_blank&quot;&gt;Note&lt;/a&gt; &lt;a href=&quot;https://drive.google.com/open?id=1BWS51BVmJ0HwpDxTv3AXhGoINOPEvyOY&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Part 4: &lt;a href=&quot;/2018/04/28/drap-drop-tableview-animation.html&quot; target=&quot;_blank&quot;&gt;Note&lt;/a&gt; &lt;a href=&quot;https://drive.google.com/open?id=1sPk9e72ToR0VFbaK1IFFPpHHrQb4zOpX&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Part 5&lt;/strong&gt;: &lt;a href=&quot;/2018/04/30/transition-to-detail.html&quot; target=&quot;_blank&quot;&gt;Note&lt;/a&gt; &lt;a href=&quot;https://drive.google.com/open?id=1pTvT1MDiIhdQbvu2PshwEgyrNPnmc0fL&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In any photo apps, when select a photo, user can view fullscreen photo, double tap to zoom, and pinch zoom. It should have animation to make the transition look smooth and make sense.&lt;/p&gt;

&lt;p&gt;In my note, I only tell you how to make transition to view detail and go back to the list. Double tap to zoom you can read in the project. Pinch zoom you can easily google.&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;h3 id=&quot;add-method-in-homecontroller&quot;&gt;Add method in HomeController&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(didSelectRowAt)&lt;/code&gt; to fire transition and show detail controller&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        // (1)
        if indexPath.row == 0 { return }
        let cell = tableView.cellForRow(at: indexPath)

        // (2)
        guard let imageView = cell?.viewWithTag(1001) as? UIImageView else { return }
        let newImageView = animator.cloneImageView(from: imageView)

        // (3)
        let originalFrame = animator.changeFrameToView(from: imageView)
        newImageView.frame = originalFrame

        // (4)
        view.addSubviews(views: newImageView)

        UIView.animate(withDuration: 0.35, animations: {
            // (5)
            newImageView.backgroundColor = .black
            newImageView.contentMode = .scaleAspectFit
            newImageView.frame = UIScreen.main.bounds
        }, completion: { _ in
            let controller = DetailController()
            
            // (6)
            controller.originalFrame = originalFrame
            controller.index = indexPath.row - 1

            // (7)
            controller.modalPresentationStyle = .overCurrentContext
            self.present(controller, animated: false)
            newImageView.removeFromSuperview()
        })
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1): The first cell is PhotoGroupCell, we don’t show DetailController while first cell tapped.&lt;/p&gt;

&lt;p&gt;(2): Get the &lt;code class=&quot;highlighter-rouge&quot;&gt;photoImageView&lt;/code&gt; inside the selected cell, same to animation when long press to download.&lt;/p&gt;

&lt;p&gt;(3): We need to save &lt;code class=&quot;highlighter-rouge&quot;&gt;originalFrame&lt;/code&gt; to go back at the same position. It’s cool when you select a photo, it moves to a position, and you swipe down, the photo goes back to the previous position.&lt;/p&gt;

&lt;p&gt;(4): Add &lt;code class=&quot;highlighter-rouge&quot;&gt;newImageView&lt;/code&gt; to view and we will animate this imageView. Same idea to download animation.&lt;/p&gt;

&lt;p&gt;(5): We use the strength of imageView to display an image fit the current size at the center but keep the aspect. The other space will be the backgroundColor.&lt;/p&gt;

&lt;p&gt;(6): We paste the &lt;code class=&quot;highlighter-rouge&quot;&gt;originalFrame&lt;/code&gt;, current index to &lt;code class=&quot;highlighter-rouge&quot;&gt;DetailController&lt;/code&gt;. Current index will be used to display correct photo in &lt;code class=&quot;highlighter-rouge&quot;&gt;DetailController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(7): We present &lt;code class=&quot;highlighter-rouge&quot;&gt;DetailController&lt;/code&gt; with a transparent background. When close &lt;code class=&quot;highlighter-rouge&quot;&gt;DetailController&lt;/code&gt;, we will have a cool animation here.&lt;/p&gt;

&lt;h3 id=&quot;add-detailcontroller&quot;&gt;Add DetailController&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Add new file &lt;code class=&quot;highlighter-rouge&quot;&gt;DetailController.swift&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add properties to class &lt;code class=&quot;highlighter-rouge&quot;&gt;DetailController&lt;/code&gt;, inherit from &lt;code class=&quot;highlighter-rouge&quot;&gt;knCollectionController&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    var datasource = [Photo]()
    var currentPhotoIndex = 0
    var originalFrame = CGRect.zero

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Wee need to show correct photo in the collection view, add these code&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        collectionView.contentOffset = CGPoint(x: currentPhotoIndex * Int(screenWidth), y: 0)
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This controller is not too difficult, so that, I don’t write too detail, just something important.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add code to &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    override func setupView() {
        if let layout = collectionView.collectionViewLayout as? UICollectionViewFlowLayout {
            layout.scrollDirection = .horizontal
        }
        
        collectionView.backgroundColor = .black
        view.addSubviews(views: collectionView)
        collectionView.fill(toView: view)
        
        collectionView.isPagingEnabled = true
        collectionView.showsHorizontalScrollIndicator = false
        statusBarStyle = .lightContent

        view.backgroundColor = .clear
        view.isOpaque = false
        
        // add close button here
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt; is clean enough to understand.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add action to close detail controller&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    @objc func closeView() {
        guard let cell = collectionView.visibleCells.first as? DetailCell else { return }
        let imageView = cell.imageView
        let newImageView = cloneImageView(from: imageView)
        view.addSubviews(views: newImageView)
        newImageView.frame = view.frame
        collectionView.isHidden = true
        
        UIView.animate(withDuration: 0.4, animations: { [unowned self] in
            newImageView.frame = self.originalFrame
        }, completion: { [weak self] _ in
            self?.dismiss(animated: false) })
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Same idea before, we get the imageView inside the current cell, clone it and animate it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It will be cooler when you swipe down and close the view. &lt;code class=&quot;highlighter-rouge&quot;&gt;UIPanGestureRecognizer&lt;/code&gt; can help to do this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need &lt;code class=&quot;highlighter-rouge&quot;&gt;DetailCell&lt;/code&gt; before, but it’s very simple so I don’t write it down here. Just contain an imageView and some buttons. I didn’t implement too detail about buttons, you can do it easily.&lt;/p&gt;

&lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;DetailCell&lt;/code&gt;, add a property to keep in touch with &lt;code class=&quot;highlighter-rouge&quot;&gt;DetailController&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    var panAction: ((UIPanGestureRecognizer) -&amp;gt; Void)?

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt;, add gesture to cell&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    let panGesture = UIPanGestureRecognizer(target: self, action: #selector(detectPan))
    panGesture.delegate = self
    addGestureRecognizer(panGesture)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And handle the gesture&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    @objc func detectPan(recognizer: UIPanGestureRecognizer) {
        panAction?(recognizer)
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Back to &lt;code class=&quot;highlighter-rouge&quot;&gt;DetailController&lt;/code&gt;, in &lt;code class=&quot;highlighter-rouge&quot;&gt;itemForRowAtIndex&lt;/code&gt;, add code to connect to cell&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    cell.panAction = { [weak self] gesture in self?.detectPan(gesture: gesture) }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hanlde the gesture&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    func detectPan(gesture: UIPanGestureRecognizer) {
        let touchPoint = gesture.location(in: view)
        
        switch gesture.state {
        case .began:
            initialTouchPoint = touchPoint
        case .ended, .cancelled:
            // (1)
            if touchPoint.y - initialTouchPoint.y &amp;gt; 100 &amp;amp;&amp;amp;
                abs(touchPoint.x - initialTouchPoint.x) &amp;lt; 5 {
                closeView()
            }
        default:
            break
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1): If you swipe down in a straight line, we will close the the controller. Without condition &lt;code class=&quot;highlighter-rouge&quot;&gt;abs(touchPoint.x - initialTouchPoint.x) &amp;lt; 5&lt;/code&gt;, we can close controller while swipe left and right to see other photos.&lt;/p&gt;

&lt;h3 id=&quot;its-run-time&quot;&gt;It’s run time&lt;/h3&gt;

&lt;p&gt;Run and see your result.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Funsplash%2Ftransition.gif?alt=media&amp;amp;token=5b23d44c-54be-499e-b474-ea02f3954667&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ah, I change datasource for both HomeController and DetailController. Up to now, we are manually manage the datasource with fake data. We will change that next part.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I do not cover all the app. This is the end of this series. Learn a lot from Unsplash app. Unsplash team is very precise. App is simple but very cool. Love what the team doing. Thanks Unplash team.&lt;/p&gt;

&lt;p&gt;You can find final source at &lt;a href=&quot;https://github.com/nguyentruongky/Unsplash&quot;&gt;my Github Unsplash&lt;/a&gt;&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Whole series</summary></entry><entry><title type="html">Unsplash iOs - Homescreen - Drag and Drop in UITableView</title><link href="http://localhost:4000/2018/04/28/drap-drop-tableview-animation.html" rel="alternate" type="text/html" title="Unsplash iOs - Homescreen - Drag and Drop in UITableView" /><published>2018-04-28T00:00:00+07:00</published><updated>2018-04-28T00:00:00+07:00</updated><id>http://localhost:4000/2018/04/28/drap-drop-tableview-animation</id><content type="html" xml:base="http://localhost:4000/2018/04/28/drap-drop-tableview-animation.html">&lt;h2 id=&quot;whole-series&quot;&gt;Whole series&lt;/h2&gt;

&lt;p&gt;I am making an app like Unsplash iOs to practise skills. This is the part 3 in the series.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Part 1: &lt;a href=&quot;/2018/04/20/unsplash-homescreen.html&quot; target=&quot;_blank&quot;&gt;Note&lt;/a&gt; &lt;a href=&quot;https://drive.google.com/open?id=1eJWCPYe0mrLj30yUhHixL3kKe1vXNipX&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Part 2: &lt;a href=&quot;/2018/04/23/unsplash-header-collection.html&quot; target=&quot;_blank&quot;&gt;Note&lt;/a&gt; &lt;a href=&quot;https://drive.google.com/open?id=17nrIA8hjXWOiofVlAmR-G1aL-xx65vvY&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Part 3: &lt;a href=&quot;/2018/04/26/unsplash-home-animation.html&quot; target=&quot;_blank&quot;&gt;Note&lt;/a&gt; &lt;a href=&quot;https://drive.google.com/open?id=1BWS51BVmJ0HwpDxTv3AXhGoINOPEvyOY&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Part 4&lt;/strong&gt;: &lt;a href=&quot;/2018/04/28/drap-drop-tableview-animation.html&quot; target=&quot;_blank&quot;&gt;Note&lt;/a&gt; &lt;a href=&quot;https://drive.google.com/open?id=1sPk9e72ToR0VFbaK1IFFPpHHrQb4zOpX&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Part 5: &lt;a href=&quot;/2018/04/30/transition-to-detail.html&quot; target=&quot;_blank&quot;&gt;Note&lt;/a&gt; &lt;a href=&quot;https://drive.google.com/open?id=1pTvT1MDiIhdQbvu2PshwEgyrNPnmc0fL&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;We add animation in previous part (Part 3) to animate table header view when scrolling and zooming. Today, we will download photo when long pressing at a photo and moving to the download zone. These action needs a series of animations. Not too easy but not too hard. We can do it.&lt;/p&gt;

&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;
&lt;p&gt;You need to install the Unsplash app in &lt;a href=&quot;https://itunes.apple.com/us/app/unsplash/id1290631746?mt=8&quot;&gt;Appstore&lt;/a&gt; and try to understand the download behaviour from the original app.&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;
&lt;h3 id=&quot;add-long-press-gesture-recognizer&quot;&gt;Add long press gesture recognizer&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Open class &lt;code class=&quot;highlighter-rouge&quot;&gt;PhotoCell&lt;/code&gt; and add &lt;code class=&quot;highlighter-rouge&quot;&gt;UILongPressGestureRecognizer&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt; method&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    let longGesture = UILongPressGestureRecognizer(target: self, action: #selector(detectLongPress))
    addGestureRecognizer(longGesture)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add method &lt;code class=&quot;highlighter-rouge&quot;&gt;detectLongPress&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    @objc func detectLongPress(gesture: UILongPressGestureRecognizer) {
        longGestureAction?(gesture)
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add property &lt;code class=&quot;highlighter-rouge&quot;&gt;longGestureAction&lt;/code&gt;. This property will be passed from &lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    var longGestureAction: ((_ gesture: UILongPressGestureRecognizer) -&amp;gt; Void)?

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;add-gesture-handler-in-homecontroller&quot;&gt;Add gesture handler in HomeController&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Add code to tableView(cellForRowAt)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    cell.longGestureAction = { [weak self] recognizer in self?.didLongPressCell(recognizer: recognizer)}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add method&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    @objc func didLongPressCell (recognizer: UILongPressGestureRecognizer) {
        animator.recognizer = recognizer
        animator.detectDownloading()
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Compiler tells it doesn’t &lt;code class=&quot;highlighter-rouge&quot;&gt;animator&lt;/code&gt;. No worries, leave it there. We get back to it later.&lt;/p&gt;

&lt;h3 id=&quot;add-animator&quot;&gt;Add animator&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Add new file &lt;code class=&quot;highlighter-rouge&quot;&gt;Animator.swift&lt;/code&gt; and class &lt;code class=&quot;highlighter-rouge&quot;&gt;Animator&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We need some properties to handle these animations&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    var view = UIView()
    lazy var dropZone = self.makeDropZone()
    var dragImageView: UIImageView?
    var startPoint = CGPoint.zero
    var recognizer: UILongPressGestureRecognizer?

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add method &lt;code class=&quot;highlighter-rouge&quot;&gt;detectDownloading&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    func detectDownloading() {
        guard let recognizer = recognizer, let imageView = recognizer.view?.viewWithTag(1001) as? UIImageView else { return }
        
        switch recognizer.state {
        case .began:
            dragImageView = cloneImageView(from: imageView)
            view.addSubviews(views: dragImageView!)
            dragImageView!.frame = changeFrameToView(from: imageView)
            startPoint = locationInView(from: recognizer)
            zoom(view: dragImageView!, to: 1.02)
        case .changed:
            guard let dragImageView = dragImageView else { return }
            let newPoint = locationInView(from: recognizer)
            if newPoint == startPoint { return }
            zoom(view: dragImageView, to: 0.5)
            dragImageView.center = newPoint
            animateDropZone(visible: true)
            view.bringSubview(toFront: dragImageView)
            
            if checkContain(bigView: dragImageView, smallView: dropZone) {
                zoomDropZone(bigger: true)
            }
            else {
                zoomDropZone(bigger: false)
            }
            
        case .ended:
            guard let dragImageView = dragImageView else { return }
            if (checkContain(bigView: dragImageView, smallView: dropZone)) {
                print(&quot;Downloading&quot;)
                animateImageWhenDownload()
                animateDropZone(visible: false)
            } else {
                print(&quot;Cancel download&quot;)
                let originalFrame = changeFrameToView(from: imageView)
                animateImageWhenCancel(to: originalFrame)
                animateDropZone(visible: false)
            }
        default:
            return
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is an important method. I will go slowly here and hope it is easy to understand for you.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    guard let recognizer = recognizer, let imageView = recognizer.view?.viewWithTag(1001) as? UIImageView else { return }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;recognizer&lt;/code&gt; is passed from &lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController&lt;/code&gt;. We need UIImageView from the view in &lt;code class=&quot;highlighter-rouge&quot;&gt;UIGestureRecognizer&lt;/code&gt;. We added gesture to the &lt;code class=&quot;highlighter-rouge&quot;&gt;PhotoCell&lt;/code&gt;, so the &lt;code class=&quot;highlighter-rouge&quot;&gt;recognizer.view&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;PhotoCell&lt;/code&gt;. We have 2 options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;photoImageView&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;PhotoCell&lt;/code&gt; to public and we can access by &lt;code class=&quot;highlighter-rouge&quot;&gt;(recognizer?.view as? PhotoCell)?.photoImageView&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add a tag 1001 to &lt;code class=&quot;highlighter-rouge&quot;&gt;photoImageView&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;PhotoCell&lt;/code&gt; and access by &lt;code class=&quot;highlighter-rouge&quot;&gt;viewWithTag&lt;/code&gt; like this &lt;code class=&quot;highlighter-rouge&quot;&gt;recognizer.view?.viewWithTag(1001) as? UIImageView&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I follow the second option, because I don’t want to open photoImageView to public. Keep everything in private if I can.&lt;/p&gt;

&lt;p&gt;Next, the switch case of &lt;code class=&quot;highlighter-rouge&quot;&gt;UIGestureRecognizerState&lt;/code&gt;. We need to focus on the following state&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    case .began:
        // (1)
        dragImageView = cloneImageView(from: imageView)
        view.addSubviews(views: dragImageView!)

        // (2)
        dragImageView!.frame = changeFrameToView(from: imageView)

        // (3)
        startPoint = locationInView(from: recognizer)

        // (4)
        zoom(view: dragImageView!, to: 1.02)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1): We need to clone the &lt;code class=&quot;highlighter-rouge&quot;&gt;photoImageView&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;dragImageView&lt;/code&gt; in the selected &lt;code class=&quot;highlighter-rouge&quot;&gt;PhotoCell&lt;/code&gt; and add it to the main view. Why do we have to clone it? Without this action, we will move the &lt;code class=&quot;highlighter-rouge&quot;&gt;photoImageView&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;PhotoCell&lt;/code&gt; around, and the cell will have a blank space for this imageView.&lt;/p&gt;

&lt;p&gt;You can see the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;cloneImageView&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;changeFrameToView&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;locationInView&lt;/code&gt; methods in 
 &lt;a href=&quot;https://gist.github.com/nguyentruongky/a484459983ee52bf11a750d682e6dd9b&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(2): Why do we need to &lt;code class=&quot;highlighter-rouge&quot;&gt;changeFrameToView&lt;/code&gt;? The &lt;code class=&quot;highlighter-rouge&quot;&gt;dragImageView&lt;/code&gt; frame currently is in the UITableView, because it belongs to a cell. We need to move it out of the tableView. Changing frame to main view is neccessary.&lt;/p&gt;

&lt;p&gt;(3): When &lt;code class=&quot;highlighter-rouge&quot;&gt;UIGestureRecognizerState&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;.began&lt;/code&gt;, it calls &lt;code class=&quot;highlighter-rouge&quot;&gt;.changed&lt;/code&gt; also and calls several times. We have to save &lt;code class=&quot;highlighter-rouge&quot;&gt;startPoint&lt;/code&gt; to prevent it state &lt;code class=&quot;highlighter-rouge&quot;&gt;.changed&lt;/code&gt; called unpredictably.&lt;/p&gt;

&lt;p&gt;(4): A slight animation zoom in make user focus on what happen. Only zoom in to 1.02 or 1.04 is great, not larger.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    case .changed:
        guard let dragImageView = dragImageView else { return }

        // (1)
        let newPoint = locationInView(from: recognizer)
        if newPoint == startPoint { return }

        // (2)
        zoom(view: dragImageView, to: 0.5)

        // (3)
        dragImageView.center = newPoint

        // (4)
        animateDropZone(visible: true)

        // (5)
        if checkContain(bigView: dragImageView, smallView: dropZone) {
            zoomDropZone(bigger: true)
        }
        else {
            zoomDropZone(bigger: false)
        }

        // (6)
        view.bringSubview(toFront: dragImageView)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The state &lt;code class=&quot;highlighter-rouge&quot;&gt;.changed&lt;/code&gt; when we move the finger around. The selected photo needs to be moved around while moving.&lt;/p&gt;

&lt;p&gt;(1): This is how we prevent unpreditable action in &lt;code class=&quot;highlighter-rouge&quot;&gt;.begin&lt;/code&gt; state. It in the same location but don’t know why it fires &lt;code class=&quot;highlighter-rouge&quot;&gt;.changed&lt;/code&gt; state.&lt;/p&gt;

&lt;p&gt;(2): OK, animation here. Zoom out the photo to smaller while moving. You can zoom out to 0.3 - 0.6. But when the &lt;code class=&quot;highlighter-rouge&quot;&gt;dragImageView&lt;/code&gt; is in the dropZone, the &lt;code class=&quot;highlighter-rouge&quot;&gt;downloadZone&lt;/code&gt; will zoom in a little bit, and zoom out when it is out. That’s what (5) do.&lt;/p&gt;

&lt;p&gt;(3): Move the image view around with your finger. Please take note here, in the &lt;code class=&quot;highlighter-rouge&quot;&gt;cloneImageView&lt;/code&gt; method, we have to change &lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt; to true. &lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt; was false because it is setup by auto layout, but now we have to change frame and animate by frame.&lt;/p&gt;

&lt;p&gt;(4): The original app has a download zone at the bottom right. It zooms in to appear while moving. The implementation is in the file. I write detail about download zone later.&lt;/p&gt;

&lt;p&gt;(6): We need to bring th &lt;code class=&quot;highlighter-rouge&quot;&gt;dragImagView&lt;/code&gt; to the top unless it is overlaped by the download zone.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    case .ended:
        guard let dragImageView = dragImageView else { return }
        if (checkContain(bigView: dragImageView, smallView: dropZone)) {
            if let image = dragImageView.image {
                UIImageWriteToSavedPhotosAlbum(image, nil, nil, nil)
            }
            animateImageWhenDownload()
            animateDropZone(visible: false)
        } else {
            print(&quot;Cancel download&quot;)
            let originalFrame = changeFrameToView(from: imageView)
            animateImageWhenCancel(to: originalFrame)
            animateDropZone(visible: false)
        }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;State &lt;code class=&quot;highlighter-rouge&quot;&gt;.end&lt;/code&gt; is fired when you lift your finger. If your lift point is in dropZone, the photo will be downloaded and saved into your Photos Library. And do nothing when it’s out the zone.&lt;/p&gt;

&lt;h3 id=&quot;request-permisson-to-save-photo&quot;&gt;Request permisson to save photo&lt;/h3&gt;

&lt;p&gt;Without request permisson, the app will be crashed, and you can see the mesage like this.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This app has crashed because it attempted to access privacy-sensitive data without a usage description.  The app’s Info.plist must contain an NSPhotoLibraryAddUsageDescription key with a string value explaining to the user how the app uses this data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Very easy to fix. Just open &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt; as Source code and add lines before &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &amp;lt;key&amp;gt;NSPhotoLibraryAddUsageDescription&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;Save photo from Unplash to your Photos Library&amp;lt;/string&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;add-animator-to-homecontroller&quot;&gt;Add animator to HomeController&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Back to &lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController&lt;/code&gt;, add new property &lt;code class=&quot;highlighter-rouge&quot;&gt;let animator = Animator()&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt;, add these code to the end of the method&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    animator.view = view
    view.addSubviews(views: animator.dropZone)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Replace method &lt;code class=&quot;highlighter-rouge&quot;&gt;didLongPressCell&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    @objc func didLongPressCell(recognizer: UILongPressGestureRecognizer) {
        animator.recognizer = recognizer
        animator.detectDownloading()
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run and see&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Funsplash%2Fdownload_animation.gif?alt=media&amp;amp;token=4770cc2f-6e58-4ee3-bb9c-a7ad378341d3&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;downloadzone&quot;&gt;DownloadZone&lt;/h3&gt;

&lt;p&gt;I write a little bit about how I make the download zone view and how to animated it, not too detail, just the idea to do.&lt;/p&gt;

&lt;p&gt;The download zone view is created and animated by frame, not auto layout. Same to the label in side the view. When make the view, we will set its frame out of the main frame, so it’s not visible in the view. And will update frame when appear and zoom. If we just update the view only, the label inside will be moved unwanted. So we need to update frame to both download view and the label inside.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are many things we can improve in this code. I will do that at the end of the project. You can do it yourself and drop me text in github or skype. We can discuss more about this. Love to hear from you.&lt;/p&gt;

&lt;p&gt;PS: After this note, I found the Unsplash app only support for iOs 11, so maybe the team is using Drag and Drop in iOs 11 only. You can try it yourself.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Whole series</summary></entry><entry><title type="html">Unsplash iOs - Homescreen - Animation</title><link href="http://localhost:4000/2018/04/26/unsplash-home-animation.html" rel="alternate" type="text/html" title="Unsplash iOs - Homescreen - Animation" /><published>2018-04-26T00:00:00+07:00</published><updated>2018-04-26T00:00:00+07:00</updated><id>http://localhost:4000/2018/04/26/unsplash-home-animation</id><content type="html" xml:base="http://localhost:4000/2018/04/26/unsplash-home-animation.html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Animation is a must-have thing in iOs app. Animation makes app look cool and live. Everyone likes something animate than a sudden change.&lt;/p&gt;

&lt;p&gt;Unsplash does a great job here. A cool animation when scrolling makes app more interesting.&lt;/p&gt;

&lt;p&gt;Today I will make an animation like Unsplash, not 100% same, but not bad, I think :D. I don’t record Unsplash animation, you should download the app and enjoy it. Really cool. Cool app worths to be downloaded and rated. You can download &lt;a href=&quot;https://itunes.apple.com/us/app/unsplash/id1290631746?mt=8&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;whole-series&quot;&gt;Whole series&lt;/h2&gt;

&lt;p&gt;I am making an app like Unsplash iOs to practise skills. This is the part 3 in the series.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Part 1: &lt;a href=&quot;/2018/04/20/unsplash-homescreen.html&quot; target=&quot;_blank&quot;&gt;Note&lt;/a&gt; &lt;a href=&quot;https://drive.google.com/open?id=1eJWCPYe0mrLj30yUhHixL3kKe1vXNipX&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Part 2: &lt;a href=&quot;/2018/04/23/unsplash-header-collection.html&quot; target=&quot;_blank&quot;&gt;Note&lt;/a&gt; &lt;a href=&quot;https://drive.google.com/open?id=17nrIA8hjXWOiofVlAmR-G1aL-xx65vvY&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Part 3&lt;/strong&gt;: &lt;a href=&quot;/2018/04/26/unsplash-home-animation.html&quot; target=&quot;_blank&quot;&gt;Note&lt;/a&gt; &lt;a href=&quot;https://drive.google.com/open?id=1BWS51BVmJ0HwpDxTv3AXhGoINOPEvyOY&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Part 4 &lt;a href=&quot;/2018/04/28/drap-drop-tableview-animation.html&quot; target=&quot;_blank&quot;&gt;Note&lt;/a&gt; &lt;a href=&quot;https://drive.google.com/open?id=1sPk9e72ToR0VFbaK1IFFPpHHrQb4zOpX&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Part 5: &lt;a href=&quot;/2018/04/30/transition-to-detail.html&quot; target=&quot;_blank&quot;&gt;Note&lt;/a&gt; &lt;a href=&quot;https://drive.google.com/open?id=1pTvT1MDiIhdQbvu2PshwEgyrNPnmc0fL&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lets-do-it&quot;&gt;Let’s do it&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController&lt;/code&gt;, add a new HeaderView&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    let animatedHeader = HeaderView()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Replace this code to &lt;code class=&quot;highlighter-rouge&quot;&gt;view.addSubviews(views: tableView)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    view.addSubviews(views: animatedHeader, tableView)

    // (2)
    animatedHeader.translatesAutoresizingMaskIntoConstraints = false
    animatedHeader.horizontal(toView: view)
    // (3)
    animatedHeaderHeightConstraint = animatedHeader.height(headerHeight)
    animatedHeader.top(toView: view)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That means the &lt;code class=&quot;highlighter-rouge&quot;&gt;animatedHeader&lt;/code&gt; is behind the tableView.&lt;/p&gt;

&lt;p&gt;(2) is very important. Do you know why? We need to setup auto layout for &lt;code class=&quot;highlighter-rouge&quot;&gt;animatedHeader&lt;/code&gt; so that, we need to set &lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt; to false.&lt;/p&gt;

&lt;p&gt;(3): We need to keep the animatedHeader height constraint to animate it later.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;animatedHeader&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;headerView&lt;/code&gt; need same data. Set the same data for &lt;code class=&quot;highlighter-rouge&quot;&gt;animatedHeader&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;fetchData&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    animatedHeader.data = headerView.data

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;The keypoint is here. Add method &lt;code class=&quot;highlighter-rouge&quot;&gt;scrollViewDidScroll&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        // (1)
        let yOffset = scrollView.contentOffset.y
        // (2)
        let stopPoint: CGFloat = 96
        let newHeight = headerHeight - yOffset

        if newHeight &amp;gt; stopPoint {
            // (3)
            animatedHeaderHeightConstraint?.constant = newHeight
            // view.layoutIfNeeded()

            // (4)
            headerView.isHidden = true
        }
        else {
            headerView.isHidden = false
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Move very slowly to understand clearly.&lt;/p&gt;

&lt;p&gt;(1): Animation will animate by the changing of &lt;code class=&quot;highlighter-rouge&quot;&gt;scrollView.contentOffset.y&lt;/code&gt;. Most of animations in &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt; need this property.&lt;/p&gt;

&lt;p&gt;(2): Why &lt;code class=&quot;highlighter-rouge&quot;&gt;stopPoint&lt;/code&gt; is 96? 96 is total of some paddings. First, the padding from the &lt;code class=&quot;highlighter-rouge&quot;&gt;searchTextField&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;titleLabel&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;HeaderView&lt;/code&gt;, it’s 16px. Second, the padding from &lt;code class=&quot;highlighter-rouge&quot;&gt;searchTextField&lt;/code&gt; to the bottom of the &lt;code class=&quot;highlighter-rouge&quot;&gt;HeaderView&lt;/code&gt;, it should be equal to first padding, 16px. Third, the status bar height, 20px. Final, the &lt;code class=&quot;highlighter-rouge&quot;&gt;searchTextField&lt;/code&gt; height, 44px. It’s 16 + 16 + 20 + 44.&lt;/p&gt;

&lt;p&gt;Stop point means when the &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView&lt;/code&gt; scroll (yOffset) to greater than &lt;code class=&quot;highlighter-rouge&quot;&gt;stopPoint&lt;/code&gt;, animation will stop.&lt;/p&gt;

&lt;p&gt;Forgot to tell you. We need to move &lt;code class=&quot;highlighter-rouge&quot;&gt;let headerHeight: CGFloat = 350&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt; to class.&lt;/p&gt;

&lt;p&gt;(3): Update the &lt;code class=&quot;highlighter-rouge&quot;&gt;animatedHeaderHeightConstraint&lt;/code&gt;. iOs 9 needs call &lt;code class=&quot;highlighter-rouge&quot;&gt;view.layoutIfNeeded()&lt;/code&gt; to update the constraints.&lt;/p&gt;

&lt;p&gt;(4): We have to hide the real &lt;code class=&quot;highlighter-rouge&quot;&gt;headerView&lt;/code&gt; because the &lt;code class=&quot;highlighter-rouge&quot;&gt;animatedHeader&lt;/code&gt; is behind the tableView, so we can’t see anything if the real &lt;code class=&quot;highlighter-rouge&quot;&gt;headerView&lt;/code&gt; is shown.&lt;/p&gt;

&lt;p&gt;Run the project. And you see white space at &lt;code class=&quot;highlighter-rouge&quot;&gt;headerView&lt;/code&gt; portion. The &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView.backgroundColor&lt;/code&gt; is white, it has to be clear. Set &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView.backgroundColor = .clear&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Funsplash%2Fanimation_1.gif?alt=media&amp;amp;token=4ff5e4ba-72c1-4783-a294-5a79ba04c651&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The animation doesn’t stop at stopPoint. Actually, it stops, but we can’t see it. The &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView&lt;/code&gt; overlaps the &lt;code class=&quot;highlighter-rouge&quot;&gt;animatedHeader&lt;/code&gt;. So we need to bring it to front.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    func bringFakeViewToFontIf(isTop: Bool) {
        view.bringSubview(toFront: isTop ? tableView : animatedHeader)
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;scrollViewDidScroll&lt;/code&gt;, add code after line &lt;code class=&quot;highlighter-rouge&quot;&gt;let newHeight = headerHeight - yOffset&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   
    bringFakeViewToFontIf(isTop: yOffset == 0)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run again and see&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Funsplash%2Fanimation_2.gif?alt=media&amp;amp;token=ee7b5983-675e-49f0-a33e-ec9f857e2d78&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yeah, it stops. But you can see the problem, &lt;code class=&quot;highlighter-rouge&quot;&gt;titleLabel&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;authorLabel&lt;/code&gt; are in wrong position. In Unsplash, they’re fading out. Do the same thing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fade out &lt;code class=&quot;highlighter-rouge&quot;&gt;titleLabel&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;authorLabel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    
    var opacity = (newHeight - stopPoint) / headerHeight
    opacity = opacity &amp;gt; 0 ? opacity : 0

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add these lines after &lt;code class=&quot;highlighter-rouge&quot;&gt;headerView.isHidden = true&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    animatedHeader.authorLabel.alpha = opacity
    animatedHeader.titleLabel.alpha = opacity

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run and see, it works.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Next, we need to change the background from an image to white.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;HeadView.swift&lt;/code&gt;, define new view&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    let whiteView = knUIMaker.makeView(background: .white)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change &lt;code class=&quot;highlighter-rouge&quot;&gt;addSubviews(views: imageView, titleLabel, searchTextField, authorLabel)&lt;/code&gt; to&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    addSubviews(views: imageView, whiteView, titleLabel, searchTextField, authorLabel)    
    whiteView.fill(toView: self)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add new method&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    func animateWhiteView(by opacity: CGFloat) {
        let whiteViewOpacity = opacity &amp;gt; 0 ? opacity : 0
        whiteView.alpha = 1 - whiteViewOpacity
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Back to &lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController&lt;/code&gt;, add these before close bracket of &lt;code class=&quot;highlighter-rouge&quot;&gt;scrollViewDidScroll&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    let whiteViewOpacity = (newHeight * 2.2) / headerHeight
    animatedHeader.animateWhiteView(by: whiteViewOpacity)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Why &lt;code class=&quot;highlighter-rouge&quot;&gt;whiteViewOpacity&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;(newHeight * 2.2) / headerHeight&lt;/code&gt;? The whiteView need to be white when scroll up upto the &lt;code class=&quot;highlighter-rouge&quot;&gt;categoryView&lt;/code&gt; is overlapped, so it needs to be calculated with a higher value. &lt;code class=&quot;highlighter-rouge&quot;&gt;2.2&lt;/code&gt; is just a guess and try value. I had to try several times before and found 2.2 is a good value for this purpose.&lt;/p&gt;

&lt;p&gt;We need to change the status bar style to default.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    if newHeight &amp;gt; stopPoint {
        ...
        statusBarStyle = .lightContent
    }
    else {
        ...
        statusBarStyle = .default
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run and see.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Funsplash%2Fanimation_3.gif?alt=media&amp;amp;token=80e8ae5b-1c62-4bd2-9cff-cb5b698b5f3d&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Almost there. We need to change the searchTextField backgroundColor, placeholder text color, the search icon color.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    func changeSearchTextFieldStyle(_ style: Style) {
        if style == .light {
            blurEffectView.removeFromSuperview()
            searchTextField.backgroundColor = UIColor.color(value: 230)
            let color = UIColor.color(value: 150)
            searchTextField.changePlaceholderTextColor(color)
            (searchTextField.leftView as? UIImageView)?.change(color: color)
        }
        else {
            addBlur(to: searchTextField, size: CGSize(width: screenWidth - 16 * 2, height: 44))
            let color = UIColor.white
            searchTextField.changePlaceholderTextColor(color)
            (searchTextField.leftView as? UIImageView)?.change(color: color)
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    enum Style {
        case dark, light
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Move &lt;code class=&quot;highlighter-rouge&quot;&gt;blurEffectView&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;addBlur&lt;/code&gt; method and init in the class &lt;code class=&quot;highlighter-rouge&quot;&gt;HeaderView&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    private let blurEffectView = UIVisualEffectView(effect: UIBlurEffect(style: UIBlurEffectStyle.dark))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Back to &lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController&lt;/code&gt;, in &lt;code class=&quot;highlighter-rouge&quot;&gt;scrollViewDidScroll&lt;/code&gt; method&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    if newHeight &amp;gt; stopPoint {
        ...
        animatedHeader.changeSearchTextFieldStyle(.dark)
    }
    else {
        ...
        animatedHeader.changeSearchTextFieldStyle(.light)
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Finally, animation is here.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/blogs-1de93.appspot.com/o/assets%2Funsplash%2Fanimation_final.gif?alt=media&amp;amp;token=b71dd320-749d-41fd-ad8e-66444a46747a&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;That’s some simple thing about animation in Unsplash. Simple and good. Love Unsplash team.&lt;/p&gt;</content><author><name>Ky Nguyen</name></author><summary type="html">Introduction Animation is a must-have thing in iOs app. Animation makes app look cool and live. Everyone likes something animate than a sudden change.</summary></entry></feed>